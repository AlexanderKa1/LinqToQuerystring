//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g 2013-06-12 12:10:42

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  LinqToQuerystring 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class LinqToQuerystringParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALIAS", "ALL", "ALLPAGES", "AND", "ANY", "ASC", "ASSIGN", "AVERAGE", "BOOL", "BYTE", "COUNT", "DATETIME", "DESC", "DOUBLE", "DYNAMICIDENTIFIER", "ENDSWITH", "EQUALS", "ESC_SEQ", "FILTER", "GREATERTHAN", "GREATERTHANOREQUAL", "GUID", "HEX_DIGIT", "HEX_PAIR", "IDENTIFIER", "INLINECOUNT", "INT", "LESSTHAN", "LESSTHANOREQUAL", "LONG", "MAX", "MIN", "NEWLINE", "NONE", "NOT", "NOTEQUALS", "OCTAL_ESC", "OR", "ORDERBY", "SELECT", "SINGLE", "SKIP", "SPACE", "STARTSWITH", "STRING", "SUBSTRINGOF", "SUM", "TOLOWER", "TOP", "UNICODE_ESC", "'&'", "'('", "')'", "','", "'/'", "':'"
	};
	public const int EOF=-1;
	public const int ALIAS=4;
	public const int ALL=5;
	public const int ALLPAGES=6;
	public const int AND=7;
	public const int ANY=8;
	public const int ASC=9;
	public const int ASSIGN=10;
	public const int AVERAGE=11;
	public const int BOOL=12;
	public const int BYTE=13;
	public const int COUNT=14;
	public const int DATETIME=15;
	public const int DESC=16;
	public const int DOUBLE=17;
	public const int DYNAMICIDENTIFIER=18;
	public const int ENDSWITH=19;
	public const int EQUALS=20;
	public const int ESC_SEQ=21;
	public const int FILTER=22;
	public const int GREATERTHAN=23;
	public const int GREATERTHANOREQUAL=24;
	public const int GUID=25;
	public const int HEX_DIGIT=26;
	public const int HEX_PAIR=27;
	public const int IDENTIFIER=28;
	public const int INLINECOUNT=29;
	public const int INT=30;
	public const int LESSTHAN=31;
	public const int LESSTHANOREQUAL=32;
	public const int LONG=33;
	public const int MAX=34;
	public const int MIN=35;
	public const int NEWLINE=36;
	public const int NONE=37;
	public const int NOT=38;
	public const int NOTEQUALS=39;
	public const int OCTAL_ESC=40;
	public const int OR=41;
	public const int ORDERBY=42;
	public const int SELECT=43;
	public const int SINGLE=44;
	public const int SKIP=45;
	public const int SPACE=46;
	public const int STARTSWITH=47;
	public const int STRING=48;
	public const int SUBSTRINGOF=49;
	public const int SUM=50;
	public const int TOLOWER=51;
	public const int TOP=52;
	public const int UNICODE_ESC=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;

	public LinqToQuerystringParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public LinqToQuerystringParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return LinqToQuerystringParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:33:8: public prog : ( param ( '&' ! param )* )* ;
	[GrammarRule("prog")]
	public AstParserRuleReturnScope<object, IToken> prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		TraceIn("prog", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal2 = default(IToken);
		AstParserRuleReturnScope<object, IToken> param1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> param3 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal2_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(33, 25);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:2: ( ( param ( '&' ! param )* )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:4: ( param ( '&' ! param )* )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(34, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:4: ( param ( '&' ! param )* )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==FILTER||LA2_1==INLINECOUNT||(LA2_1>=ORDERBY && LA2_1<=SELECT)||LA2_1==SKIP||LA2_1==TOP))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:5: param ( '&' ! param )*
					{
					DebugLocation(34, 5);
					PushFollow(Follow._param_in_prog85);
					param1=param();
					PopFollow();

					adaptor.AddChild(root_0, param1.Tree);
					DebugLocation(34, 11);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:11: ( '&' ! param )*
					try { DebugEnterSubRule(1);
					while (true)
					{
						int alt1=2;
						try { DebugEnterDecision(1, false);
						int LA1_1 = input.LA(1);

						if ((LA1_1==54))
						{
							alt1 = 1;
						}


						} finally { DebugExitDecision(1); }
						switch ( alt1 )
						{
						case 1:
							DebugEnterAlt(1);
							// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:12: '&' ! param
							{
							DebugLocation(34, 15);
							char_literal2=(IToken)Match(input,54,Follow._54_in_prog88); 
							DebugLocation(34, 17);
							PushFollow(Follow._param_in_prog91);
							param3=param();
							PopFollow();

							adaptor.AddChild(root_0, param3.Tree);

							}
							break;

						default:
							goto loop1;
						}
					}

					loop1:
						;

					} finally { DebugExitSubRule(1); }


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
		}
		DebugLocation(34, 25);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	partial void EnterRule_param();
	partial void LeaveRule_param();
	// $ANTLR start "param"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:1: param : ( orderby | top | skip | filter | select | inlinecount ) ;
	[GrammarRule("param")]
	private AstParserRuleReturnScope<object, IToken> param()
	{
		EnterRule_param();
		EnterRule("param", 2);
		TraceIn("param", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> orderby4 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> top5 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> skip6 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filter7 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> select8 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> inlinecount9 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "param");
		DebugLocation(36, 62);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:7: ( ( orderby | top | skip | filter | select | inlinecount ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:9: ( orderby | top | skip | filter | select | inlinecount )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(36, 9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:9: ( orderby | top | skip | filter | select | inlinecount )
			int alt3=6;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case ORDERBY:
				{
				alt3 = 1;
				}
				break;
			case TOP:
				{
				alt3 = 2;
				}
				break;
			case SKIP:
				{
				alt3 = 3;
				}
				break;
			case FILTER:
				{
				alt3 = 4;
				}
				break;
			case SELECT:
				{
				alt3 = 5;
				}
				break;
			case INLINECOUNT:
				{
				alt3 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:10: orderby
				{
				DebugLocation(36, 10);
				PushFollow(Follow._orderby_in_param104);
				orderby4=orderby();
				PopFollow();

				adaptor.AddChild(root_0, orderby4.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:20: top
				{
				DebugLocation(36, 20);
				PushFollow(Follow._top_in_param108);
				top5=top();
				PopFollow();

				adaptor.AddChild(root_0, top5.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:26: skip
				{
				DebugLocation(36, 26);
				PushFollow(Follow._skip_in_param112);
				skip6=skip();
				PopFollow();

				adaptor.AddChild(root_0, skip6.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:33: filter
				{
				DebugLocation(36, 33);
				PushFollow(Follow._filter_in_param116);
				filter7=filter();
				PopFollow();

				adaptor.AddChild(root_0, filter7.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:42: select
				{
				DebugLocation(36, 42);
				PushFollow(Follow._select_in_param120);
				select8=select();
				PopFollow();

				adaptor.AddChild(root_0, select8.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:51: inlinecount
				{
				DebugLocation(36, 51);
				PushFollow(Follow._inlinecount_in_param124);
				inlinecount9=inlinecount();
				PopFollow();

				adaptor.AddChild(root_0, inlinecount9.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("param", 2);
			LeaveRule("param", 2);
			LeaveRule_param();
		}
		DebugLocation(36, 62);
		} finally { DebugExitRule(GrammarFileName, "param"); }
		return retval;

	}
	// $ANTLR end "param"

	partial void EnterRule_skip();
	partial void LeaveRule_skip();
	// $ANTLR start "skip"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:38:1: skip : SKIP ^ ( INT )+ ;
	[GrammarRule("skip")]
	private AstParserRuleReturnScope<object, IToken> skip()
	{
		EnterRule_skip();
		EnterRule("skip", 3);
		TraceIn("skip", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SKIP10 = default(IToken);
		IToken INT11 = default(IToken);

		object SKIP10_tree = default(object);
		object INT11_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "skip");
		DebugLocation(38, 13);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:39:2: ( SKIP ^ ( INT )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:39:4: SKIP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(39, 8);
			SKIP10=(IToken)Match(input,SKIP,Follow._SKIP_in_skip135); 
			SKIP10_tree = (object)adaptor.Create(SKIP10);
			root_0 = (object)adaptor.BecomeRoot(SKIP10_tree, root_0);
			DebugLocation(39, 10);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:39:10: ( INT )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==INT))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:39:10: INT
					{
					DebugLocation(39, 10);
					INT11=(IToken)Match(input,INT,Follow._INT_in_skip138); 
					INT11_tree = (object)adaptor.Create(INT11);
					adaptor.AddChild(root_0, INT11_tree);

					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("skip", 3);
			LeaveRule("skip", 3);
			LeaveRule_skip();
		}
		DebugLocation(39, 13);
		} finally { DebugExitRule(GrammarFileName, "skip"); }
		return retval;

	}
	// $ANTLR end "skip"

	partial void EnterRule_top();
	partial void LeaveRule_top();
	// $ANTLR start "top"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:41:1: top : TOP ^ ( INT )+ ;
	[GrammarRule("top")]
	private AstParserRuleReturnScope<object, IToken> top()
	{
		EnterRule_top();
		EnterRule("top", 4);
		TraceIn("top", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken TOP12 = default(IToken);
		IToken INT13 = default(IToken);

		object TOP12_tree = default(object);
		object INT13_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "top");
		DebugLocation(41, 12);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:42:2: ( TOP ^ ( INT )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:42:4: TOP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(42, 7);
			TOP12=(IToken)Match(input,TOP,Follow._TOP_in_top149); 
			TOP12_tree = (object)adaptor.Create(TOP12);
			root_0 = (object)adaptor.BecomeRoot(TOP12_tree, root_0);
			DebugLocation(42, 9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:42:9: ( INT )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==INT))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:42:9: INT
					{
					DebugLocation(42, 9);
					INT13=(IToken)Match(input,INT,Follow._INT_in_top152); 
					INT13_tree = (object)adaptor.Create(INT13);
					adaptor.AddChild(root_0, INT13_tree);

					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top", 4);
			LeaveRule("top", 4);
			LeaveRule_top();
		}
		DebugLocation(42, 12);
		} finally { DebugExitRule(GrammarFileName, "top"); }
		return retval;

	}
	// $ANTLR end "top"

	partial void EnterRule_filter();
	partial void LeaveRule_filter();
	// $ANTLR start "filter"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:1: filter : FILTER ^ filterexpression[false] ;
	[GrammarRule("filter")]
	private AstParserRuleReturnScope<object, IToken> filter()
	{
		EnterRule_filter();
		EnterRule("filter", 5);
		TraceIn("filter", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken FILTER14 = default(IToken);
		AstParserRuleReturnScope<object, IToken> filterexpression15 = default(AstParserRuleReturnScope<object, IToken>);

		object FILTER14_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filter");
		DebugLocation(44, 34);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:45:2: ( FILTER ^ filterexpression[false] )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:45:4: FILTER ^ filterexpression[false]
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(45, 10);
			FILTER14=(IToken)Match(input,FILTER,Follow._FILTER_in_filter163); 
			FILTER14_tree = (object)adaptor.Create(FILTER14);
			root_0 = (object)adaptor.BecomeRoot(FILTER14_tree, root_0);
			DebugLocation(45, 12);
			PushFollow(Follow._filterexpression_in_filter166);
			filterexpression15=filterexpression(false);
			PopFollow();

			adaptor.AddChild(root_0, filterexpression15.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filter", 5);
			LeaveRule("filter", 5);
			LeaveRule_filter();
		}
		DebugLocation(45, 34);
		} finally { DebugExitRule(GrammarFileName, "filter"); }
		return retval;

	}
	// $ANTLR end "filter"

	partial void EnterRule_select();
	partial void LeaveRule_select();
	// $ANTLR start "select"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:47:1: select : SELECT ^ propertyname[false] ( ',' ! propertyname[false] )* ;
	[GrammarRule("select")]
	private AstParserRuleReturnScope<object, IToken> select()
	{
		EnterRule_select();
		EnterRule("select", 6);
		TraceIn("select", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SELECT16 = default(IToken);
		IToken char_literal18 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname17 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname19 = default(AstParserRuleReturnScope<object, IToken>);

		object SELECT16_tree = default(object);
		object char_literal18_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "select");
		DebugLocation(47, 58);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:2: ( SELECT ^ propertyname[false] ( ',' ! propertyname[false] )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:4: SELECT ^ propertyname[false] ( ',' ! propertyname[false] )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(48, 10);
			SELECT16=(IToken)Match(input,SELECT,Follow._SELECT_in_select177); 
			SELECT16_tree = (object)adaptor.Create(SELECT16);
			root_0 = (object)adaptor.BecomeRoot(SELECT16_tree, root_0);
			DebugLocation(48, 12);
			PushFollow(Follow._propertyname_in_select180);
			propertyname17=propertyname(false);
			PopFollow();

			adaptor.AddChild(root_0, propertyname17.Tree);
			DebugLocation(48, 32);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:32: ( ',' ! propertyname[false] )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==57))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:33: ',' ! propertyname[false]
					{
					DebugLocation(48, 36);
					char_literal18=(IToken)Match(input,57,Follow._57_in_select184); 
					DebugLocation(48, 38);
					PushFollow(Follow._propertyname_in_select187);
					propertyname19=propertyname(false);
					PopFollow();

					adaptor.AddChild(root_0, propertyname19.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select", 6);
			LeaveRule("select", 6);
			LeaveRule_select();
		}
		DebugLocation(48, 58);
		} finally { DebugExitRule(GrammarFileName, "select"); }
		return retval;

	}
	// $ANTLR end "select"

	partial void EnterRule_inlinecount();
	partial void LeaveRule_inlinecount();
	// $ANTLR start "inlinecount"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:50:1: inlinecount : ( INLINECOUNT ^ ALLPAGES | INLINECOUNT NONE ->);
	[GrammarRule("inlinecount")]
	private AstParserRuleReturnScope<object, IToken> inlinecount()
	{
		EnterRule_inlinecount();
		EnterRule("inlinecount", 7);
		TraceIn("inlinecount", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken INLINECOUNT20 = default(IToken);
		IToken ALLPAGES21 = default(IToken);
		IToken INLINECOUNT22 = default(IToken);
		IToken NONE23 = default(IToken);

		object INLINECOUNT20_tree = default(object);
		object ALLPAGES21_tree = default(object);
		object INLINECOUNT22_tree = default(object);
		object NONE23_tree = default(object);
		RewriteRuleITokenStream stream_INLINECOUNT=new RewriteRuleITokenStream(adaptor,"token INLINECOUNT");
		RewriteRuleITokenStream stream_NONE=new RewriteRuleITokenStream(adaptor,"token NONE");
		try { DebugEnterRule(GrammarFileName, "inlinecount");
		DebugLocation(50, 22);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:2: ( INLINECOUNT ^ ALLPAGES | INLINECOUNT NONE ->)
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1==INLINECOUNT))
			{
				int LA7_2 = input.LA(2);

				if ((LA7_2==ALLPAGES))
				{
					alt7 = 1;
				}
				else if ((LA7_2==NONE))
				{
					alt7 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:4: INLINECOUNT ^ ALLPAGES
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(51, 15);
				INLINECOUNT20=(IToken)Match(input,INLINECOUNT,Follow._INLINECOUNT_in_inlinecount200); 
				INLINECOUNT20_tree = (object)adaptor.Create(INLINECOUNT20);
				root_0 = (object)adaptor.BecomeRoot(INLINECOUNT20_tree, root_0);
				DebugLocation(51, 17);
				ALLPAGES21=(IToken)Match(input,ALLPAGES,Follow._ALLPAGES_in_inlinecount203); 
				ALLPAGES21_tree = (object)adaptor.Create(ALLPAGES21);
				adaptor.AddChild(root_0, ALLPAGES21_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:52:4: INLINECOUNT NONE
				{
				DebugLocation(52, 4);
				INLINECOUNT22=(IToken)Match(input,INLINECOUNT,Follow._INLINECOUNT_in_inlinecount208);  
				stream_INLINECOUNT.Add(INLINECOUNT22);

				DebugLocation(52, 16);
				NONE23=(IToken)Match(input,NONE,Follow._NONE_in_inlinecount210);  
				stream_NONE.Add(NONE23);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 52:21: ->
				{
					DebugLocation(52, 23);
					root_0 = null;
				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inlinecount", 7);
			LeaveRule("inlinecount", 7);
			LeaveRule_inlinecount();
		}
		DebugLocation(52, 22);
		} finally { DebugExitRule(GrammarFileName, "inlinecount"); }
		return retval;

	}
	// $ANTLR end "inlinecount"

	partial void EnterRule_filterexpression();
	partial void LeaveRule_filterexpression();
	// $ANTLR start "filterexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:54:1: filterexpression[bool subquery] : orexpression[subquery] ( SPACE ! OR ^ SPACE ! orexpression[subquery] )* ;
	[GrammarRule("filterexpression")]
	private AstParserRuleReturnScope<object, IToken> filterexpression(bool subquery)
	{
		EnterRule_filterexpression();
		EnterRule("filterexpression", 8);
		TraceIn("filterexpression", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE25 = default(IToken);
		IToken OR26 = default(IToken);
		IToken SPACE27 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orexpression24 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orexpression28 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE25_tree = default(object);
		object OR26_tree = default(object);
		object SPACE27_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filterexpression");
		DebugLocation(54, 69);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:55:2: ( orexpression[subquery] ( SPACE ! OR ^ SPACE ! orexpression[subquery] )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:55:4: orexpression[subquery] ( SPACE ! OR ^ SPACE ! orexpression[subquery] )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(55, 4);
			PushFollow(Follow._orexpression_in_filterexpression222);
			orexpression24=orexpression(subquery);
			PopFollow();

			adaptor.AddChild(root_0, orexpression24.Tree);
			DebugLocation(55, 27);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:55:27: ( SPACE ! OR ^ SPACE ! orexpression[subquery] )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==SPACE))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:55:28: SPACE ! OR ^ SPACE ! orexpression[subquery]
					{
					DebugLocation(55, 33);
					SPACE25=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression226); 
					DebugLocation(55, 37);
					OR26=(IToken)Match(input,OR,Follow._OR_in_filterexpression229); 
					OR26_tree = (object)adaptor.Create(OR26);
					root_0 = (object)adaptor.BecomeRoot(OR26_tree, root_0);
					DebugLocation(55, 44);
					SPACE27=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression232); 
					DebugLocation(55, 46);
					PushFollow(Follow._orexpression_in_filterexpression235);
					orexpression28=orexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, orexpression28.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filterexpression", 8);
			LeaveRule("filterexpression", 8);
			LeaveRule_filterexpression();
		}
		DebugLocation(55, 69);
		} finally { DebugExitRule(GrammarFileName, "filterexpression"); }
		return retval;

	}
	// $ANTLR end "filterexpression"

	partial void EnterRule_orexpression();
	partial void LeaveRule_orexpression();
	// $ANTLR start "orexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:57:1: orexpression[bool subquery] : andexpression[subquery] ( SPACE ! AND ^ SPACE ! andexpression[subquery] )* ;
	[GrammarRule("orexpression")]
	private AstParserRuleReturnScope<object, IToken> orexpression(bool subquery)
	{
		EnterRule_orexpression();
		EnterRule("orexpression", 9);
		TraceIn("orexpression", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE30 = default(IToken);
		IToken AND31 = default(IToken);
		IToken SPACE32 = default(IToken);
		AstParserRuleReturnScope<object, IToken> andexpression29 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> andexpression33 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE30_tree = default(object);
		object AND31_tree = default(object);
		object SPACE32_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orexpression");
		DebugLocation(57, 72);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:2: ( andexpression[subquery] ( SPACE ! AND ^ SPACE ! andexpression[subquery] )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:4: andexpression[subquery] ( SPACE ! AND ^ SPACE ! andexpression[subquery] )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(58, 4);
			PushFollow(Follow._andexpression_in_orexpression249);
			andexpression29=andexpression(subquery);
			PopFollow();

			adaptor.AddChild(root_0, andexpression29.Tree);
			DebugLocation(58, 28);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:28: ( SPACE ! AND ^ SPACE ! andexpression[subquery] )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==SPACE))
				{
					int LA9_2 = input.LA(2);

					if ((LA9_2==AND))
					{
						alt9 = 1;
					}


				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:29: SPACE ! AND ^ SPACE ! andexpression[subquery]
					{
					DebugLocation(58, 34);
					SPACE30=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression253); 
					DebugLocation(58, 39);
					AND31=(IToken)Match(input,AND,Follow._AND_in_orexpression256); 
					AND31_tree = (object)adaptor.Create(AND31);
					root_0 = (object)adaptor.BecomeRoot(AND31_tree, root_0);
					DebugLocation(58, 46);
					SPACE32=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression259); 
					DebugLocation(58, 48);
					PushFollow(Follow._andexpression_in_orexpression262);
					andexpression33=andexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, andexpression33.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orexpression", 9);
			LeaveRule("orexpression", 9);
			LeaveRule_orexpression();
		}
		DebugLocation(58, 72);
		} finally { DebugExitRule(GrammarFileName, "orexpression"); }
		return retval;

	}
	// $ANTLR end "orexpression"

	partial void EnterRule_andexpression();
	partial void LeaveRule_andexpression();
	// $ANTLR start "andexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:60:1: andexpression[bool subquery] : ( NOT ^ SPACE ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) | ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) );
	[GrammarRule("andexpression")]
	private AstParserRuleReturnScope<object, IToken> andexpression(bool subquery)
	{
		EnterRule_andexpression();
		EnterRule("andexpression", 10);
		TraceIn("andexpression", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NOT34 = default(IToken);
		IToken SPACE35 = default(IToken);
		IToken char_literal36 = default(IToken);
		IToken char_literal38 = default(IToken);
		IToken char_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		AstParserRuleReturnScope<object, IToken> filterexpression37 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> booleanexpression39 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filterexpression41 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> booleanexpression43 = default(AstParserRuleReturnScope<object, IToken>);

		object NOT34_tree = default(object);
		object SPACE35_tree = default(object);
		object char_literal36_tree = default(object);
		object char_literal38_tree = default(object);
		object char_literal40_tree = default(object);
		object char_literal42_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "andexpression");
		DebugLocation(60, 69);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:61:2: ( NOT ^ SPACE ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) | ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==NOT))
			{
				alt12 = 1;
			}
			else if (((LA12_1>=BOOL && LA12_1<=BYTE)||LA12_1==DATETIME||(LA12_1>=DOUBLE && LA12_1<=ENDSWITH)||LA12_1==GUID||LA12_1==IDENTIFIER||LA12_1==INT||LA12_1==LONG||LA12_1==SINGLE||(LA12_1>=STARTSWITH && LA12_1<=SUBSTRINGOF)||LA12_1==TOLOWER||LA12_1==55))
			{
				alt12 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:61:4: NOT ^ SPACE ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(61, 7);
				NOT34=(IToken)Match(input,NOT,Follow._NOT_in_andexpression276); 
				NOT34_tree = (object)adaptor.Create(NOT34);
				root_0 = (object)adaptor.BecomeRoot(NOT34_tree, root_0);
				DebugLocation(61, 9);
				SPACE35=(IToken)Match(input,SPACE,Follow._SPACE_in_andexpression279); 
				SPACE35_tree = (object)adaptor.Create(SPACE35);
				adaptor.AddChild(root_0, SPACE35_tree);
				DebugLocation(61, 15);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:61:15: ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==55))
				{
					alt10 = 1;
				}
				else if (((LA10_1>=BOOL && LA10_1<=BYTE)||LA10_1==DATETIME||(LA10_1>=DOUBLE && LA10_1<=ENDSWITH)||LA10_1==GUID||LA10_1==IDENTIFIER||LA10_1==INT||LA10_1==LONG||LA10_1==SINGLE||(LA10_1>=STARTSWITH && LA10_1<=SUBSTRINGOF)||LA10_1==TOLOWER))
				{
					alt10 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:61:16: '(' filterexpression[subquery] ')'
					{
					DebugLocation(61, 16);
					char_literal36=(IToken)Match(input,55,Follow._55_in_andexpression282); 
					char_literal36_tree = (object)adaptor.Create(char_literal36);
					adaptor.AddChild(root_0, char_literal36_tree);
					DebugLocation(61, 20);
					PushFollow(Follow._filterexpression_in_andexpression284);
					filterexpression37=filterexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, filterexpression37.Tree);
					DebugLocation(61, 47);
					char_literal38=(IToken)Match(input,56,Follow._56_in_andexpression287); 
					char_literal38_tree = (object)adaptor.Create(char_literal38);
					adaptor.AddChild(root_0, char_literal38_tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:61:53: booleanexpression[subquery]
					{
					DebugLocation(61, 53);
					PushFollow(Follow._booleanexpression_in_andexpression291);
					booleanexpression39=booleanexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, booleanexpression39.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(10); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:62:4: ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(62, 4);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:62:4: ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==55))
				{
					alt11 = 1;
				}
				else if (((LA11_1>=BOOL && LA11_1<=BYTE)||LA11_1==DATETIME||(LA11_1>=DOUBLE && LA11_1<=ENDSWITH)||LA11_1==GUID||LA11_1==IDENTIFIER||LA11_1==INT||LA11_1==LONG||LA11_1==SINGLE||(LA11_1>=STARTSWITH && LA11_1<=SUBSTRINGOF)||LA11_1==TOLOWER))
				{
					alt11 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:62:5: '(' filterexpression[subquery] ')'
					{
					DebugLocation(62, 5);
					char_literal40=(IToken)Match(input,55,Follow._55_in_andexpression299); 
					char_literal40_tree = (object)adaptor.Create(char_literal40);
					adaptor.AddChild(root_0, char_literal40_tree);
					DebugLocation(62, 9);
					PushFollow(Follow._filterexpression_in_andexpression301);
					filterexpression41=filterexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, filterexpression41.Tree);
					DebugLocation(62, 36);
					char_literal42=(IToken)Match(input,56,Follow._56_in_andexpression304); 
					char_literal42_tree = (object)adaptor.Create(char_literal42);
					adaptor.AddChild(root_0, char_literal42_tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:62:42: booleanexpression[subquery]
					{
					DebugLocation(62, 42);
					PushFollow(Follow._booleanexpression_in_andexpression308);
					booleanexpression43=booleanexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, booleanexpression43.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(11); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andexpression", 10);
			LeaveRule("andexpression", 10);
			LeaveRule_andexpression();
		}
		DebugLocation(62, 69);
		} finally { DebugExitRule(GrammarFileName, "andexpression"); }
		return retval;

	}
	// $ANTLR end "andexpression"

	partial void EnterRule_booleanexpression();
	partial void LeaveRule_booleanexpression();
	// $ANTLR start "booleanexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:64:1: booleanexpression[bool subquery] : atom1= atom[subquery] ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) ) ;
	[GrammarRule("booleanexpression")]
	private AstParserRuleReturnScope<object, IToken> booleanexpression(bool subquery)
	{
		EnterRule_booleanexpression();
		EnterRule("booleanexpression", 11);
		TraceIn("booleanexpression", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		IToken SPACE44 = default(IToken);
		IToken SPACE45 = default(IToken);
		AstParserRuleReturnScope<object, IToken> atom1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom2 = default(AstParserRuleReturnScope<object, IToken>);

		object op_tree = default(object);
		object SPACE44_tree = default(object);
		object SPACE45_tree = default(object);
		RewriteRuleITokenStream stream_SPACE=new RewriteRuleITokenStream(adaptor,"token SPACE");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_NOTEQUALS=new RewriteRuleITokenStream(adaptor,"token NOTEQUALS");
		RewriteRuleITokenStream stream_GREATERTHAN=new RewriteRuleITokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleITokenStream stream_GREATERTHANOREQUAL=new RewriteRuleITokenStream(adaptor,"token GREATERTHANOREQUAL");
		RewriteRuleITokenStream stream_LESSTHAN=new RewriteRuleITokenStream(adaptor,"token LESSTHAN");
		RewriteRuleITokenStream stream_LESSTHANOREQUAL=new RewriteRuleITokenStream(adaptor,"token LESSTHANOREQUAL");
		RewriteRuleSubtreeStream stream_atom=new RewriteRuleSubtreeStream(adaptor,"rule atom");
		try { DebugEnterRule(GrammarFileName, "booleanexpression");
		DebugLocation(64, 3);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:65:2: (atom1= atom[subquery] ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:65:4: atom1= atom[subquery] ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) )
			{
			DebugLocation(65, 9);
			PushFollow(Follow._atom_in_booleanexpression324);
			atom1=atom(subquery);
			PopFollow();

			stream_atom.Add(atom1.Tree);
			DebugLocation(65, 25);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:65:25: ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) )
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1==SPACE))
			{
				int LA14_2 = input.LA(2);

				if ((LA14_2==AND||LA14_2==OR))
				{
					alt14 = 2;
				}
				else if ((LA14_2==EQUALS||(LA14_2>=GREATERTHAN && LA14_2<=GREATERTHANOREQUAL)||(LA14_2>=LESSTHAN && LA14_2<=LESSTHANOREQUAL)||LA14_2==NOTEQUALS))
				{
					alt14 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA14_1==EOF||LA14_1==FILTER||LA14_1==INLINECOUNT||(LA14_1>=ORDERBY && LA14_1<=SELECT)||LA14_1==SKIP||LA14_1==TOP||LA14_1==54||LA14_1==56))
			{
				alt14 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:66:4: SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery]
				{
				DebugLocation(66, 4);
				SPACE44=(IToken)Match(input,SPACE,Follow._SPACE_in_booleanexpression332);  
				stream_SPACE.Add(SPACE44);

				DebugLocation(66, 10);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:66:10: (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL )
				int alt13=6;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				switch (input.LA(1))
				{
				case EQUALS:
					{
					alt13 = 1;
					}
					break;
				case NOTEQUALS:
					{
					alt13 = 2;
					}
					break;
				case GREATERTHAN:
					{
					alt13 = 3;
					}
					break;
				case GREATERTHANOREQUAL:
					{
					alt13 = 4;
					}
					break;
				case LESSTHAN:
					{
					alt13 = 5;
					}
					break;
				case LESSTHANOREQUAL:
					{
					alt13 = 6;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:66:11: op= EQUALS
					{
					DebugLocation(66, 13);
					op=(IToken)Match(input,EQUALS,Follow._EQUALS_in_booleanexpression337);  
					stream_EQUALS.Add(op);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:66:23: op= NOTEQUALS
					{
					DebugLocation(66, 25);
					op=(IToken)Match(input,NOTEQUALS,Follow._NOTEQUALS_in_booleanexpression343);  
					stream_NOTEQUALS.Add(op);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:66:38: op= GREATERTHAN
					{
					DebugLocation(66, 40);
					op=(IToken)Match(input,GREATERTHAN,Follow._GREATERTHAN_in_booleanexpression349);  
					stream_GREATERTHAN.Add(op);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:66:55: op= GREATERTHANOREQUAL
					{
					DebugLocation(66, 57);
					op=(IToken)Match(input,GREATERTHANOREQUAL,Follow._GREATERTHANOREQUAL_in_booleanexpression355);  
					stream_GREATERTHANOREQUAL.Add(op);


					}
					break;
				case 5:
					DebugEnterAlt(5);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:66:79: op= LESSTHAN
					{
					DebugLocation(66, 81);
					op=(IToken)Match(input,LESSTHAN,Follow._LESSTHAN_in_booleanexpression361);  
					stream_LESSTHAN.Add(op);


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:66:93: op= LESSTHANOREQUAL
					{
					DebugLocation(66, 95);
					op=(IToken)Match(input,LESSTHANOREQUAL,Follow._LESSTHANOREQUAL_in_booleanexpression367);  
					stream_LESSTHANOREQUAL.Add(op);


					}
					break;

				}
				} finally { DebugExitSubRule(13); }

				DebugLocation(66, 113);
				SPACE45=(IToken)Match(input,SPACE,Follow._SPACE_in_booleanexpression370);  
				stream_SPACE.Add(SPACE45);

				DebugLocation(66, 124);
				PushFollow(Follow._atom_in_booleanexpression374);
				atom2=atom(subquery);
				PopFollow();

				stream_atom.Add(atom2.Tree);


				{
				// AST REWRITE
				// elements: op, atom1, atom2
				// token labels: op
				// rule labels: atom1, atom2, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_op=new RewriteRuleITokenStream(adaptor,"token op",op);
				RewriteRuleSubtreeStream stream_atom1=new RewriteRuleSubtreeStream(adaptor,"rule atom1",atom1!=null?atom1.Tree:null);
				RewriteRuleSubtreeStream stream_atom2=new RewriteRuleSubtreeStream(adaptor,"rule atom2",atom2!=null?atom2.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 67:4: -> ^( $op $atom1 $atom2)
				{
					DebugLocation(67, 7);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:67:7: ^( $op $atom1 $atom2)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(67, 10);
					root_1 = (object)adaptor.BecomeRoot(stream_op.NextNode(), root_1);

					DebugLocation(67, 14);
					adaptor.AddChild(root_1, stream_atom1.NextTree());
					DebugLocation(67, 21);
					adaptor.AddChild(root_1, stream_atom2.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:68:5: 
				{

				{
				// AST REWRITE
				// elements: EQUALS, atom1
				// token labels: 
				// rule labels: atom1, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_atom1=new RewriteRuleSubtreeStream(adaptor,"rule atom1",atom1!=null?atom1.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 68:5: -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] )
				{
					DebugLocation(68, 8);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:68:8: ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(68, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(EQUALS, "eq"), root_1);

					DebugLocation(68, 24);
					adaptor.AddChild(root_1, stream_atom1.NextTree());
					DebugLocation(68, 30);
					adaptor.AddChild(root_1, (object)adaptor.Create(BOOL, "true"));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("booleanexpression", 11);
			LeaveRule("booleanexpression", 11);
			LeaveRule_booleanexpression();
		}
		DebugLocation(69, 3);
		} finally { DebugExitRule(GrammarFileName, "booleanexpression"); }
		return retval;

	}
	// $ANTLR end "booleanexpression"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:71:1: atom[bool subquery] : ( functioncall[subquery] | constant | accessor[subquery] );
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<object, IToken> atom(bool subquery)
	{
		EnterRule_atom();
		EnterRule("atom", 12);
		TraceIn("atom", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> functioncall46 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> constant47 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> accessor48 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(71, 21);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:72:2: ( functioncall[subquery] | constant | accessor[subquery] )
			int alt15=3;
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case ENDSWITH:
			case STARTSWITH:
			case SUBSTRINGOF:
			case TOLOWER:
				{
				alt15 = 1;
				}
				break;
			case BOOL:
			case BYTE:
			case DATETIME:
			case DOUBLE:
			case GUID:
			case INT:
			case LONG:
			case SINGLE:
			case STRING:
				{
				alt15 = 2;
				}
				break;
			case DYNAMICIDENTIFIER:
			case IDENTIFIER:
				{
				alt15 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:72:4: functioncall[subquery]
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(72, 4);
				PushFollow(Follow._functioncall_in_atom426);
				functioncall46=functioncall(subquery);
				PopFollow();

				adaptor.AddChild(root_0, functioncall46.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:73:4: constant
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(73, 4);
				PushFollow(Follow._constant_in_atom432);
				constant47=constant();
				PopFollow();

				adaptor.AddChild(root_0, constant47.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:74:4: accessor[subquery]
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(74, 4);
				PushFollow(Follow._accessor_in_atom437);
				accessor48=accessor(subquery);
				PopFollow();

				adaptor.AddChild(root_0, accessor48.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 12);
			LeaveRule("atom", 12);
			LeaveRule_atom();
		}
		DebugLocation(74, 21);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_functioncall();
	partial void LeaveRule_functioncall();
	// $ANTLR start "functioncall"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:76:1: functioncall[bool subquery] : function ^ '(' atom[subquery] ( ',' atom[subquery] )* ')' ;
	[GrammarRule("functioncall")]
	private AstParserRuleReturnScope<object, IToken> functioncall(bool subquery)
	{
		EnterRule_functioncall();
		EnterRule("functioncall", 13);
		TraceIn("functioncall", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal50 = default(IToken);
		IToken char_literal52 = default(IToken);
		IToken char_literal54 = default(IToken);
		AstParserRuleReturnScope<object, IToken> function49 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom51 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom53 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal50_tree = default(object);
		object char_literal52_tree = default(object);
		object char_literal54_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functioncall");
		DebugLocation(76, 57);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:77:2: ( function ^ '(' atom[subquery] ( ',' atom[subquery] )* ')' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:77:4: function ^ '(' atom[subquery] ( ',' atom[subquery] )* ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(77, 12);
			PushFollow(Follow._function_in_functioncall449);
			function49=function();
			PopFollow();

			root_0 = (object)adaptor.BecomeRoot(function49.Tree, root_0);
			DebugLocation(77, 14);
			char_literal50=(IToken)Match(input,55,Follow._55_in_functioncall452); 
			char_literal50_tree = (object)adaptor.Create(char_literal50);
			adaptor.AddChild(root_0, char_literal50_tree);
			DebugLocation(77, 18);
			PushFollow(Follow._atom_in_functioncall454);
			atom51=atom(subquery);
			PopFollow();

			adaptor.AddChild(root_0, atom51.Tree);
			DebugLocation(77, 33);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:77:33: ( ',' atom[subquery] )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==57))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:77:34: ',' atom[subquery]
					{
					DebugLocation(77, 34);
					char_literal52=(IToken)Match(input,57,Follow._57_in_functioncall458); 
					char_literal52_tree = (object)adaptor.Create(char_literal52);
					adaptor.AddChild(root_0, char_literal52_tree);
					DebugLocation(77, 38);
					PushFollow(Follow._atom_in_functioncall460);
					atom53=atom(subquery);
					PopFollow();

					adaptor.AddChild(root_0, atom53.Tree);

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(77, 55);
			char_literal54=(IToken)Match(input,56,Follow._56_in_functioncall465); 
			char_literal54_tree = (object)adaptor.Create(char_literal54);
			adaptor.AddChild(root_0, char_literal54_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall", 13);
			LeaveRule("functioncall", 13);
			LeaveRule_functioncall();
		}
		DebugLocation(77, 57);
		} finally { DebugExitRule(GrammarFileName, "functioncall"); }
		return retval;

	}
	// $ANTLR end "functioncall"

	partial void EnterRule_accessor();
	partial void LeaveRule_accessor();
	// $ANTLR start "accessor"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:79:1: accessor[bool subquery] : ( propertyname[subquery] -> propertyname ) ( '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')' )? ;
	[GrammarRule("accessor")]
	private AstParserRuleReturnScope<object, IToken> accessor(bool subquery)
	{
		EnterRule_accessor();
		EnterRule("accessor", 14);
		TraceIn("accessor", 14);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken func = default(IToken);
		IToken id = default(IToken);
		IToken char_literal56 = default(IToken);
		IToken char_literal57 = default(IToken);
		IToken char_literal58 = default(IToken);
		IToken SPACE59 = default(IToken);
		IToken char_literal61 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname55 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filterexpression60 = default(AstParserRuleReturnScope<object, IToken>);

		object func_tree = default(object);
		object id_tree = default(object);
		object char_literal56_tree = default(object);
		object char_literal57_tree = default(object);
		object char_literal58_tree = default(object);
		object SPACE59_tree = default(object);
		object char_literal61_tree = default(object);
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
		RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
		RewriteRuleITokenStream stream_COUNT=new RewriteRuleITokenStream(adaptor,"token COUNT");
		RewriteRuleITokenStream stream_MAX=new RewriteRuleITokenStream(adaptor,"token MAX");
		RewriteRuleITokenStream stream_MIN=new RewriteRuleITokenStream(adaptor,"token MIN");
		RewriteRuleITokenStream stream_SUM=new RewriteRuleITokenStream(adaptor,"token SUM");
		RewriteRuleITokenStream stream_AVERAGE=new RewriteRuleITokenStream(adaptor,"token AVERAGE");
		RewriteRuleITokenStream stream_55=new RewriteRuleITokenStream(adaptor,"token 55");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_SPACE=new RewriteRuleITokenStream(adaptor,"token SPACE");
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleSubtreeStream stream_propertyname=new RewriteRuleSubtreeStream(adaptor,"rule propertyname");
		RewriteRuleSubtreeStream stream_filterexpression=new RewriteRuleSubtreeStream(adaptor,"rule filterexpression");
		try { DebugEnterRule(GrammarFileName, "accessor");
		DebugLocation(79, 4);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:79:24: ( ( propertyname[subquery] -> propertyname ) ( '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')' )? )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:80:3: ( propertyname[subquery] -> propertyname ) ( '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')' )?
			{
			DebugLocation(80, 3);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:80:3: ( propertyname[subquery] -> propertyname )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:80:4: propertyname[subquery]
			{
			DebugLocation(80, 4);
			PushFollow(Follow._propertyname_in_accessor477);
			propertyname55=propertyname(subquery);
			PopFollow();

			stream_propertyname.Add(propertyname55.Tree);


			{
			// AST REWRITE
			// elements: propertyname
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 80:27: -> propertyname
			{
				DebugLocation(80, 30);
				adaptor.AddChild(root_0, stream_propertyname.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(80, 44);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:80:44: ( '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')' )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_1 = input.LA(1);

			if ((LA19_1==58))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:81:4: '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')'
				{
				DebugLocation(81, 4);
				char_literal56=(IToken)Match(input,58,Follow._58_in_accessor490);  
				stream_58.Add(char_literal56);

				DebugLocation(81, 8);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:81:8: (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE )
				int alt17=7;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case ANY:
					{
					alt17 = 1;
					}
					break;
				case ALL:
					{
					alt17 = 2;
					}
					break;
				case COUNT:
					{
					alt17 = 3;
					}
					break;
				case MAX:
					{
					alt17 = 4;
					}
					break;
				case MIN:
					{
					alt17 = 5;
					}
					break;
				case SUM:
					{
					alt17 = 6;
					}
					break;
				case AVERAGE:
					{
					alt17 = 7;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:81:9: func= ANY
					{
					DebugLocation(81, 13);
					func=(IToken)Match(input,ANY,Follow._ANY_in_accessor495);  
					stream_ANY.Add(func);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:81:20: func= ALL
					{
					DebugLocation(81, 24);
					func=(IToken)Match(input,ALL,Follow._ALL_in_accessor501);  
					stream_ALL.Add(func);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:81:31: func= COUNT
					{
					DebugLocation(81, 35);
					func=(IToken)Match(input,COUNT,Follow._COUNT_in_accessor507);  
					stream_COUNT.Add(func);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:81:44: func= MAX
					{
					DebugLocation(81, 48);
					func=(IToken)Match(input,MAX,Follow._MAX_in_accessor513);  
					stream_MAX.Add(func);


					}
					break;
				case 5:
					DebugEnterAlt(5);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:81:55: func= MIN
					{
					DebugLocation(81, 59);
					func=(IToken)Match(input,MIN,Follow._MIN_in_accessor519);  
					stream_MIN.Add(func);


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:81:66: func= SUM
					{
					DebugLocation(81, 70);
					func=(IToken)Match(input,SUM,Follow._SUM_in_accessor525);  
					stream_SUM.Add(func);


					}
					break;
				case 7:
					DebugEnterAlt(7);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:81:77: func= AVERAGE
					{
					DebugLocation(81, 81);
					func=(IToken)Match(input,AVERAGE,Follow._AVERAGE_in_accessor531);  
					stream_AVERAGE.Add(func);


					}
					break;

				}
				} finally { DebugExitSubRule(17); }

				DebugLocation(82, 4);
				char_literal57=(IToken)Match(input,55,Follow._55_in_accessor538);  
				stream_55.Add(char_literal57);

				DebugLocation(82, 8);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:82:8: ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) )
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==IDENTIFIER))
				{
					alt18 = 1;
				}
				else if ((LA18_1==56))
				{
					alt18 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:83:5: (id= IDENTIFIER ':' SPACE filterexpression[true] )
					{
					DebugLocation(83, 5);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:83:5: (id= IDENTIFIER ':' SPACE filterexpression[true] )
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:83:6: id= IDENTIFIER ':' SPACE filterexpression[true]
					{
					DebugLocation(83, 8);
					id=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_accessor549);  
					stream_IDENTIFIER.Add(id);

					DebugLocation(83, 20);
					char_literal58=(IToken)Match(input,59,Follow._59_in_accessor551);  
					stream_59.Add(char_literal58);

					DebugLocation(83, 24);
					SPACE59=(IToken)Match(input,SPACE,Follow._SPACE_in_accessor553);  
					stream_SPACE.Add(SPACE59);

					DebugLocation(83, 30);
					PushFollow(Follow._filterexpression_in_accessor555);
					filterexpression60=filterexpression(true);
					PopFollow();

					stream_filterexpression.Add(filterexpression60.Tree);

					}



					{
					// AST REWRITE
					// elements: func, accessor, filterexpression
					// token labels: func
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_func=new RewriteRuleITokenStream(adaptor,"token func",func);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 83:54: -> ^( $func $accessor ALIAS[$id] filterexpression )
					{
						DebugLocation(83, 57);
						// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:83:57: ^( $func $accessor ALIAS[$id] filterexpression )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(83, 60);
						root_1 = (object)adaptor.BecomeRoot(stream_func.NextNode(), root_1);

						DebugLocation(83, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(83, 75);
						adaptor.AddChild(root_1, (object)adaptor.Create(ALIAS, id));
						DebugLocation(83, 86);
						adaptor.AddChild(root_1, stream_filterexpression.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:7: 
					{

					{
					// AST REWRITE
					// elements: func, accessor
					// token labels: func
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_func=new RewriteRuleITokenStream(adaptor,"token func",func);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 84:7: -> ^( $func $accessor)
					{
						DebugLocation(84, 10);
						// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:10: ^( $func $accessor)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(84, 13);
						root_1 = (object)adaptor.BecomeRoot(stream_func.NextNode(), root_1);

						DebugLocation(84, 19);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(18); }

				DebugLocation(85, 4);
				char_literal61=(IToken)Match(input,56,Follow._56_in_accessor595);  
				stream_56.Add(char_literal61);


				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessor", 14);
			LeaveRule("accessor", 14);
			LeaveRule_accessor();
		}
		DebugLocation(86, 4);
		} finally { DebugExitRule(GrammarFileName, "accessor"); }
		return retval;

	}
	// $ANTLR end "accessor"

	partial void EnterRule_function();
	partial void LeaveRule_function();
	// $ANTLR start "function"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:88:1: function : ( STARTSWITH | ENDSWITH | SUBSTRINGOF | TOLOWER );
	[GrammarRule("function")]
	private AstParserRuleReturnScope<object, IToken> function()
	{
		EnterRule_function();
		EnterRule("function", 15);
		TraceIn("function", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set62 = default(IToken);

		object set62_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "function");
		DebugLocation(88, 48);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:89:2: ( STARTSWITH | ENDSWITH | SUBSTRINGOF | TOLOWER )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(89, 2);

			set62=(IToken)input.LT(1);
			if (input.LA(1)==ENDSWITH||input.LA(1)==STARTSWITH||input.LA(1)==SUBSTRINGOF||input.LA(1)==TOLOWER)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set62));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function", 15);
			LeaveRule("function", 15);
			LeaveRule_function();
		}
		DebugLocation(89, 48);
		} finally { DebugExitRule(GrammarFileName, "function"); }
		return retval;

	}
	// $ANTLR end "function"

	partial void EnterRule_orderby();
	partial void LeaveRule_orderby();
	// $ANTLR start "orderby"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:91:1: orderby : ORDERBY ^ orderbylist ;
	[GrammarRule("orderby")]
	private AstParserRuleReturnScope<object, IToken> orderby()
	{
		EnterRule_orderby();
		EnterRule("orderby", 16);
		TraceIn("orderby", 16);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ORDERBY63 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderbylist64 = default(AstParserRuleReturnScope<object, IToken>);

		object ORDERBY63_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderby");
		DebugLocation(91, 23);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:92:2: ( ORDERBY ^ orderbylist )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:92:4: ORDERBY ^ orderbylist
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(92, 11);
			ORDERBY63=(IToken)Match(input,ORDERBY,Follow._ORDERBY_in_orderby634); 
			ORDERBY63_tree = (object)adaptor.Create(ORDERBY63);
			root_0 = (object)adaptor.BecomeRoot(ORDERBY63_tree, root_0);
			DebugLocation(92, 13);
			PushFollow(Follow._orderbylist_in_orderby637);
			orderbylist64=orderbylist();
			PopFollow();

			adaptor.AddChild(root_0, orderbylist64.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby", 16);
			LeaveRule("orderby", 16);
			LeaveRule_orderby();
		}
		DebugLocation(92, 23);
		} finally { DebugExitRule(GrammarFileName, "orderby"); }
		return retval;

	}
	// $ANTLR end "orderby"

	partial void EnterRule_orderbylist();
	partial void LeaveRule_orderbylist();
	// $ANTLR start "orderbylist"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:94:1: orderbylist : orderpropertyname ( ',' ! orderpropertyname )* ;
	[GrammarRule("orderbylist")]
	private AstParserRuleReturnScope<object, IToken> orderbylist()
	{
		EnterRule_orderbylist();
		EnterRule("orderbylist", 17);
		TraceIn("orderbylist", 17);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal66 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderpropertyname65 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orderpropertyname67 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal66_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderbylist");
		DebugLocation(94, 46);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:95:2: ( orderpropertyname ( ',' ! orderpropertyname )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:95:4: orderpropertyname ( ',' ! orderpropertyname )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(95, 4);
			PushFollow(Follow._orderpropertyname_in_orderbylist647);
			orderpropertyname65=orderpropertyname();
			PopFollow();

			adaptor.AddChild(root_0, orderpropertyname65.Tree);
			DebugLocation(95, 22);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:95:22: ( ',' ! orderpropertyname )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==57))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:95:23: ',' ! orderpropertyname
					{
					DebugLocation(95, 26);
					char_literal66=(IToken)Match(input,57,Follow._57_in_orderbylist650); 
					DebugLocation(95, 28);
					PushFollow(Follow._orderpropertyname_in_orderbylist653);
					orderpropertyname67=orderpropertyname();
					PopFollow();

					adaptor.AddChild(root_0, orderpropertyname67.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderbylist", 17);
			LeaveRule("orderbylist", 17);
			LeaveRule_orderbylist();
		}
		DebugLocation(95, 46);
		} finally { DebugExitRule(GrammarFileName, "orderbylist"); }
		return retval;

	}
	// $ANTLR end "orderbylist"

	partial void EnterRule_orderpropertyname();
	partial void LeaveRule_orderpropertyname();
	// $ANTLR start "orderpropertyname"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:97:1: orderpropertyname : propertyname[false] ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) ) ;
	[GrammarRule("orderpropertyname")]
	private AstParserRuleReturnScope<object, IToken> orderpropertyname()
	{
		EnterRule_orderpropertyname();
		EnterRule("orderpropertyname", 18);
		TraceIn("orderpropertyname", 18);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		IToken SPACE69 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname68 = default(AstParserRuleReturnScope<object, IToken>);

		object op_tree = default(object);
		object SPACE69_tree = default(object);
		RewriteRuleITokenStream stream_SPACE=new RewriteRuleITokenStream(adaptor,"token SPACE");
		RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");
		RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
		RewriteRuleSubtreeStream stream_propertyname=new RewriteRuleSubtreeStream(adaptor,"rule propertyname");
		try { DebugEnterRule(GrammarFileName, "orderpropertyname");
		DebugLocation(97, 3);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:98:2: ( propertyname[false] ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:98:4: propertyname[false] ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) )
			{
			DebugLocation(98, 4);
			PushFollow(Follow._propertyname_in_orderpropertyname664);
			propertyname68=propertyname(false);
			PopFollow();

			stream_propertyname.Add(propertyname68.Tree);
			DebugLocation(98, 24);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:98:24: ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) )
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1==EOF||LA22_1==FILTER||LA22_1==INLINECOUNT||(LA22_1>=ORDERBY && LA22_1<=SELECT)||LA22_1==SKIP||LA22_1==TOP||LA22_1==54||LA22_1==57))
			{
				alt22 = 1;
			}
			else if ((LA22_1==SPACE))
			{
				alt22 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:99:4: 
				{

				{
				// AST REWRITE
				// elements: propertyname
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 99:4: -> ^( ASC[\"asc\"] propertyname )
				{
					DebugLocation(99, 7);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:99:7: ^( ASC[\"asc\"] propertyname )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(99, 9);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ASC, "asc"), root_1);

					DebugLocation(99, 20);
					adaptor.AddChild(root_1, stream_propertyname.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:100:6: ( SPACE (op= ASC |op= DESC ) )
				{
				DebugLocation(100, 6);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:100:6: ( SPACE (op= ASC |op= DESC ) )
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:100:7: SPACE (op= ASC |op= DESC )
				{
				DebugLocation(100, 7);
				SPACE69=(IToken)Match(input,SPACE,Follow._SPACE_in_orderpropertyname687);  
				stream_SPACE.Add(SPACE69);

				DebugLocation(100, 13);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:100:13: (op= ASC |op= DESC )
				int alt21=2;
				try { DebugEnterSubRule(21);
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==ASC))
				{
					alt21 = 1;
				}
				else if ((LA21_1==DESC))
				{
					alt21 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(21); }
				switch (alt21)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:100:14: op= ASC
					{
					DebugLocation(100, 16);
					op=(IToken)Match(input,ASC,Follow._ASC_in_orderpropertyname692);  
					stream_ASC.Add(op);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:100:23: op= DESC
					{
					DebugLocation(100, 25);
					op=(IToken)Match(input,DESC,Follow._DESC_in_orderpropertyname698);  
					stream_DESC.Add(op);


					}
					break;

				}
				} finally { DebugExitSubRule(21); }


				}



				{
				// AST REWRITE
				// elements: op, propertyname
				// token labels: op
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_op=new RewriteRuleITokenStream(adaptor,"token op",op);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 100:33: -> ^( $op propertyname )
				{
					DebugLocation(100, 36);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:100:36: ^( $op propertyname )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(100, 39);
					root_1 = (object)adaptor.BecomeRoot(stream_op.NextNode(), root_1);

					DebugLocation(100, 42);
					adaptor.AddChild(root_1, stream_propertyname.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderpropertyname", 18);
			LeaveRule("orderpropertyname", 18);
			LeaveRule_orderpropertyname();
		}
		DebugLocation(101, 3);
		} finally { DebugExitRule(GrammarFileName, "orderpropertyname"); }
		return retval;

	}
	// $ANTLR end "orderpropertyname"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();
	// $ANTLR start "constant"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:1: constant : ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DOUBLE ^| GUID ^| BYTE ^) ;
	[GrammarRule("constant")]
	private AstParserRuleReturnScope<object, IToken> constant()
	{
		EnterRule_constant();
		EnterRule("constant", 19);
		TraceIn("constant", 19);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken INT70 = default(IToken);
		IToken BOOL71 = default(IToken);
		IToken STRING72 = default(IToken);
		IToken DATETIME73 = default(IToken);
		IToken LONG74 = default(IToken);
		IToken SINGLE75 = default(IToken);
		IToken DOUBLE76 = default(IToken);
		IToken GUID77 = default(IToken);
		IToken BYTE78 = default(IToken);

		object INT70_tree = default(object);
		object BOOL71_tree = default(object);
		object STRING72_tree = default(object);
		object DATETIME73_tree = default(object);
		object LONG74_tree = default(object);
		object SINGLE75_tree = default(object);
		object DOUBLE76_tree = default(object);
		object GUID77_tree = default(object);
		object BYTE78_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(103, 90);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:9: ( ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DOUBLE ^| GUID ^| BYTE ^) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:11: ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DOUBLE ^| GUID ^| BYTE ^)
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(103, 11);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:11: ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DOUBLE ^| GUID ^| BYTE ^)
			int alt23=9;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case INT:
				{
				alt23 = 1;
				}
				break;
			case BOOL:
				{
				alt23 = 2;
				}
				break;
			case STRING:
				{
				alt23 = 3;
				}
				break;
			case DATETIME:
				{
				alt23 = 4;
				}
				break;
			case LONG:
				{
				alt23 = 5;
				}
				break;
			case SINGLE:
				{
				alt23 = 6;
				}
				break;
			case DOUBLE:
				{
				alt23 = 7;
				}
				break;
			case GUID:
				{
				alt23 = 8;
				}
				break;
			case BYTE:
				{
				alt23 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:12: INT ^
				{
				DebugLocation(103, 15);
				INT70=(IToken)Match(input,INT,Follow._INT_in_constant722); 
				INT70_tree = (object)adaptor.Create(INT70);
				root_0 = (object)adaptor.BecomeRoot(INT70_tree, root_0);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:19: BOOL ^
				{
				DebugLocation(103, 23);
				BOOL71=(IToken)Match(input,BOOL,Follow._BOOL_in_constant727); 
				BOOL71_tree = (object)adaptor.Create(BOOL71);
				root_0 = (object)adaptor.BecomeRoot(BOOL71_tree, root_0);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:27: STRING ^
				{
				DebugLocation(103, 33);
				STRING72=(IToken)Match(input,STRING,Follow._STRING_in_constant732); 
				STRING72_tree = (object)adaptor.Create(STRING72);
				root_0 = (object)adaptor.BecomeRoot(STRING72_tree, root_0);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:37: DATETIME ^
				{
				DebugLocation(103, 45);
				DATETIME73=(IToken)Match(input,DATETIME,Follow._DATETIME_in_constant737); 
				DATETIME73_tree = (object)adaptor.Create(DATETIME73);
				root_0 = (object)adaptor.BecomeRoot(DATETIME73_tree, root_0);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:49: LONG ^
				{
				DebugLocation(103, 53);
				LONG74=(IToken)Match(input,LONG,Follow._LONG_in_constant742); 
				LONG74_tree = (object)adaptor.Create(LONG74);
				root_0 = (object)adaptor.BecomeRoot(LONG74_tree, root_0);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:57: SINGLE ^
				{
				DebugLocation(103, 63);
				SINGLE75=(IToken)Match(input,SINGLE,Follow._SINGLE_in_constant747); 
				SINGLE75_tree = (object)adaptor.Create(SINGLE75);
				root_0 = (object)adaptor.BecomeRoot(SINGLE75_tree, root_0);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:67: DOUBLE ^
				{
				DebugLocation(103, 73);
				DOUBLE76=(IToken)Match(input,DOUBLE,Follow._DOUBLE_in_constant752); 
				DOUBLE76_tree = (object)adaptor.Create(DOUBLE76);
				root_0 = (object)adaptor.BecomeRoot(DOUBLE76_tree, root_0);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:77: GUID ^
				{
				DebugLocation(103, 81);
				GUID77=(IToken)Match(input,GUID,Follow._GUID_in_constant757); 
				GUID77_tree = (object)adaptor.Create(GUID77);
				root_0 = (object)adaptor.BecomeRoot(GUID77_tree, root_0);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:85: BYTE ^
				{
				DebugLocation(103, 89);
				BYTE78=(IToken)Match(input,BYTE,Follow._BYTE_in_constant762); 
				BYTE78_tree = (object)adaptor.Create(BYTE78);
				root_0 = (object)adaptor.BecomeRoot(BYTE78_tree, root_0);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant", 19);
			LeaveRule("constant", 19);
			LeaveRule_constant();
		}
		DebugLocation(103, 90);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_propertyname();
	partial void LeaveRule_propertyname();
	// $ANTLR start "propertyname"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:105:1: propertyname[bool subquery] : ( identifierpart[subquery] -> identifierpart ) ( '/' next= subpropertyname[false] -> ^( $propertyname $next) )? ;
	[GrammarRule("propertyname")]
	private AstParserRuleReturnScope<object, IToken> propertyname(bool subquery)
	{
		EnterRule_propertyname();
		EnterRule("propertyname", 20);
		TraceIn("propertyname", 20);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal80 = default(IToken);
		AstParserRuleReturnScope<object, IToken> next = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> identifierpart79 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal80_tree = default(object);
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleSubtreeStream stream_identifierpart=new RewriteRuleSubtreeStream(adaptor,"rule identifierpart");
		RewriteRuleSubtreeStream stream_subpropertyname=new RewriteRuleSubtreeStream(adaptor,"rule subpropertyname");
		try { DebugEnterRule(GrammarFileName, "propertyname");
		DebugLocation(105, 108);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:2: ( ( identifierpart[subquery] -> identifierpart ) ( '/' next= subpropertyname[false] -> ^( $propertyname $next) )? )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:4: ( identifierpart[subquery] -> identifierpart ) ( '/' next= subpropertyname[false] -> ^( $propertyname $next) )?
			{
			DebugLocation(106, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:4: ( identifierpart[subquery] -> identifierpart )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:5: identifierpart[subquery]
			{
			DebugLocation(106, 5);
			PushFollow(Follow._identifierpart_in_propertyname775);
			identifierpart79=identifierpart(subquery);
			PopFollow();

			stream_identifierpart.Add(identifierpart79.Tree);


			{
			// AST REWRITE
			// elements: identifierpart
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 106:30: -> identifierpart
			{
				DebugLocation(106, 33);
				adaptor.AddChild(root_0, stream_identifierpart.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(106, 49);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:49: ( '/' next= subpropertyname[false] -> ^( $propertyname $next) )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==58))
			{
				int LA24_2 = input.LA(2);

				if ((LA24_2==DYNAMICIDENTIFIER||LA24_2==IDENTIFIER))
				{
					alt24 = 1;
				}
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:50: '/' next= subpropertyname[false]
				{
				DebugLocation(106, 50);
				char_literal80=(IToken)Match(input,58,Follow._58_in_propertyname784);  
				stream_58.Add(char_literal80);

				DebugLocation(106, 58);
				PushFollow(Follow._subpropertyname_in_propertyname788);
				next=subpropertyname(false);
				PopFollow();

				stream_subpropertyname.Add(next.Tree);


				{
				// AST REWRITE
				// elements: propertyname, next
				// token labels: 
				// rule labels: next, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_next=new RewriteRuleSubtreeStream(adaptor,"rule next",next!=null?next.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 106:82: -> ^( $propertyname $next)
				{
					DebugLocation(106, 85);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:85: ^( $propertyname $next)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(106, 88);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(106, 102);
					adaptor.AddChild(root_1, stream_next.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyname", 20);
			LeaveRule("propertyname", 20);
			LeaveRule_propertyname();
		}
		DebugLocation(106, 108);
		} finally { DebugExitRule(GrammarFileName, "propertyname"); }
		return retval;

	}
	// $ANTLR end "propertyname"

	partial void EnterRule_subpropertyname();
	partial void LeaveRule_subpropertyname();
	// $ANTLR start "subpropertyname"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:108:1: subpropertyname[bool subquery] : propertyname[false] ;
	[GrammarRule("subpropertyname")]
	private AstParserRuleReturnScope<object, IToken> subpropertyname(bool subquery)
	{
		EnterRule_subpropertyname();
		EnterRule("subpropertyname", 21);
		TraceIn("subpropertyname", 21);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> propertyname81 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "subpropertyname");
		DebugLocation(108, 22);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:109:2: ( propertyname[false] )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:109:4: propertyname[false]
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(109, 4);
			PushFollow(Follow._propertyname_in_subpropertyname811);
			propertyname81=propertyname(false);
			PopFollow();

			adaptor.AddChild(root_0, propertyname81.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subpropertyname", 21);
			LeaveRule("subpropertyname", 21);
			LeaveRule_subpropertyname();
		}
		DebugLocation(109, 22);
		} finally { DebugExitRule(GrammarFileName, "subpropertyname"); }
		return retval;

	}
	// $ANTLR end "subpropertyname"

	partial void EnterRule_identifierpart();
	partial void LeaveRule_identifierpart();
	// $ANTLR start "identifierpart"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:111:1: identifierpart[bool subquery] : (id= IDENTIFIER -> {subquery}? ALIAS[$id] -> IDENTIFIER[$id] | DYNAMICIDENTIFIER -> DYNAMICIDENTIFIER ) ;
	[GrammarRule("identifierpart")]
	private AstParserRuleReturnScope<object, IToken> identifierpart(bool subquery)
	{
		EnterRule_identifierpart();
		EnterRule("identifierpart", 22);
		TraceIn("identifierpart", 22);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken id = default(IToken);
		IToken DYNAMICIDENTIFIER82 = default(IToken);

		object id_tree = default(object);
		object DYNAMICIDENTIFIER82_tree = default(object);
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_DYNAMICIDENTIFIER=new RewriteRuleITokenStream(adaptor,"token DYNAMICIDENTIFIER");
		try { DebugEnterRule(GrammarFileName, "identifierpart");
		DebugLocation(111, 43);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:112:2: ( (id= IDENTIFIER -> {subquery}? ALIAS[$id] -> IDENTIFIER[$id] | DYNAMICIDENTIFIER -> DYNAMICIDENTIFIER ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:112:4: (id= IDENTIFIER -> {subquery}? ALIAS[$id] -> IDENTIFIER[$id] | DYNAMICIDENTIFIER -> DYNAMICIDENTIFIER )
			{
			DebugLocation(112, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:112:4: (id= IDENTIFIER -> {subquery}? ALIAS[$id] -> IDENTIFIER[$id] | DYNAMICIDENTIFIER -> DYNAMICIDENTIFIER )
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==IDENTIFIER))
			{
				alt25 = 1;
			}
			else if ((LA25_1==DYNAMICIDENTIFIER))
			{
				alt25 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:112:5: id= IDENTIFIER
				{
				DebugLocation(112, 7);
				id=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifierpart826);  
				stream_IDENTIFIER.Add(id);



				{
				// AST REWRITE
				// elements: IDENTIFIER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 112:19: -> {subquery}? ALIAS[$id]
				if (subquery)
				{
					DebugLocation(112, 34);
					adaptor.AddChild(root_0, (object)adaptor.Create(ALIAS, id));

				}
				else // 113:5: -> IDENTIFIER[$id]
				{
					DebugLocation(113, 8);
					adaptor.AddChild(root_0, (object)adaptor.Create(IDENTIFIER, id));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:114:5: DYNAMICIDENTIFIER
				{
				DebugLocation(114, 5);
				DYNAMICIDENTIFIER82=(IToken)Match(input,DYNAMICIDENTIFIER,Follow._DYNAMICIDENTIFIER_in_identifierpart848);  
				stream_DYNAMICIDENTIFIER.Add(DYNAMICIDENTIFIER82);



				{
				// AST REWRITE
				// elements: DYNAMICIDENTIFIER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 114:23: -> DYNAMICIDENTIFIER
				{
					DebugLocation(114, 26);
					adaptor.AddChild(root_0, stream_DYNAMICIDENTIFIER.NextNode());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifierpart", 22);
			LeaveRule("identifierpart", 22);
			LeaveRule_identifierpart();
		}
		DebugLocation(114, 43);
		} finally { DebugExitRule(GrammarFileName, "identifierpart"); }
		return retval;

	}
	// $ANTLR end "identifierpart"

	partial void EnterRule_filteroperator();
	partial void LeaveRule_filteroperator();
	// $ANTLR start "filteroperator"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:116:1: filteroperator : ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL );
	[GrammarRule("filteroperator")]
	private AstParserRuleReturnScope<object, IToken> filteroperator()
	{
		EnterRule_filteroperator();
		EnterRule("filteroperator", 23);
		TraceIn("filteroperator", 23);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set83 = default(IToken);

		object set83_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filteroperator");
		DebugLocation(116, 85);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:117:2: ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(117, 2);

			set83=(IToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATERTHAN && input.LA(1)<=GREATERTHANOREQUAL)||(input.LA(1)>=LESSTHAN && input.LA(1)<=LESSTHANOREQUAL)||input.LA(1)==NOTEQUALS)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set83));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filteroperator", 23);
			LeaveRule("filteroperator", 23);
			LeaveRule_filteroperator();
		}
		DebugLocation(117, 85);
		} finally { DebugExitRule(GrammarFileName, "filteroperator"); }
		return retval;

	}
	// $ANTLR end "filteroperator"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _param_in_prog85 = new BitSet(new ulong[]{0x502C0020400002UL});
		public static readonly BitSet _54_in_prog88 = new BitSet(new ulong[]{0x102C0020400000UL});
		public static readonly BitSet _param_in_prog91 = new BitSet(new ulong[]{0x502C0020400002UL});
		public static readonly BitSet _orderby_in_param104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _top_in_param108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _skip_in_param112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _filter_in_param116 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_in_param120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _inlinecount_in_param124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SKIP_in_skip135 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _INT_in_skip138 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _TOP_in_top149 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _INT_in_top152 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _FILTER_in_filter163 = new BitSet(new ulong[]{0x8B9042520EB000UL});
		public static readonly BitSet _filterexpression_in_filter166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select177 = new BitSet(new ulong[]{0x10040000UL});
		public static readonly BitSet _propertyname_in_select180 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _57_in_select184 = new BitSet(new ulong[]{0x10040000UL});
		public static readonly BitSet _propertyname_in_select187 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _INLINECOUNT_in_inlinecount200 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ALLPAGES_in_inlinecount203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INLINECOUNT_in_inlinecount208 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _NONE_in_inlinecount210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orexpression_in_filterexpression222 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _SPACE_in_filterexpression226 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _OR_in_filterexpression229 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _SPACE_in_filterexpression232 = new BitSet(new ulong[]{0x8B9042520EB000UL});
		public static readonly BitSet _orexpression_in_filterexpression235 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _andexpression_in_orexpression249 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _SPACE_in_orexpression253 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _AND_in_orexpression256 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _SPACE_in_orexpression259 = new BitSet(new ulong[]{0x8B9042520EB000UL});
		public static readonly BitSet _andexpression_in_orexpression262 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _NOT_in_andexpression276 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _SPACE_in_andexpression279 = new BitSet(new ulong[]{0x8B9002520EB000UL});
		public static readonly BitSet _55_in_andexpression282 = new BitSet(new ulong[]{0x8B9042520EB000UL});
		public static readonly BitSet _filterexpression_in_andexpression284 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_andexpression287 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanexpression_in_andexpression291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_andexpression299 = new BitSet(new ulong[]{0x8B9042520EB000UL});
		public static readonly BitSet _filterexpression_in_andexpression301 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_andexpression304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanexpression_in_andexpression308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_booleanexpression324 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _SPACE_in_booleanexpression332 = new BitSet(new ulong[]{0x8181900000UL});
		public static readonly BitSet _EQUALS_in_booleanexpression337 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NOTEQUALS_in_booleanexpression343 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _GREATERTHAN_in_booleanexpression349 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _GREATERTHANOREQUAL_in_booleanexpression355 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _LESSTHAN_in_booleanexpression361 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _LESSTHANOREQUAL_in_booleanexpression367 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _SPACE_in_booleanexpression370 = new BitSet(new ulong[]{0xB9002520EB000UL});
		public static readonly BitSet _atom_in_booleanexpression374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_in_atom426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_atom432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessor_in_atom437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_in_functioncall449 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _55_in_functioncall452 = new BitSet(new ulong[]{0xB9002520EB000UL});
		public static readonly BitSet _atom_in_functioncall454 = new BitSet(new ulong[]{0x300000000000000UL});
		public static readonly BitSet _57_in_functioncall458 = new BitSet(new ulong[]{0xB9002520EB000UL});
		public static readonly BitSet _atom_in_functioncall460 = new BitSet(new ulong[]{0x300000000000000UL});
		public static readonly BitSet _56_in_functioncall465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_accessor477 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_accessor490 = new BitSet(new ulong[]{0x4000C00004920UL});
		public static readonly BitSet _ANY_in_accessor495 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _ALL_in_accessor501 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _COUNT_in_accessor507 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _MAX_in_accessor513 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _MIN_in_accessor519 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _SUM_in_accessor525 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _AVERAGE_in_accessor531 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _55_in_accessor538 = new BitSet(new ulong[]{0x100000010000000UL});
		public static readonly BitSet _IDENTIFIER_in_accessor549 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_accessor551 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _SPACE_in_accessor553 = new BitSet(new ulong[]{0x8B9042520EB000UL});
		public static readonly BitSet _filterexpression_in_accessor555 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_accessor595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDERBY_in_orderby634 = new BitSet(new ulong[]{0x10040000UL});
		public static readonly BitSet _orderbylist_in_orderby637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist647 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _57_in_orderbylist650 = new BitSet(new ulong[]{0x10040000UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist653 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _propertyname_in_orderpropertyname664 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _SPACE_in_orderpropertyname687 = new BitSet(new ulong[]{0x10200UL});
		public static readonly BitSet _ASC_in_orderpropertyname692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderpropertyname698 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_constant722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BOOL_in_constant727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_constant732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATETIME_in_constant737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LONG_in_constant742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SINGLE_in_constant747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_constant752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GUID_in_constant757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BYTE_in_constant762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierpart_in_propertyname775 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_propertyname784 = new BitSet(new ulong[]{0x10040000UL});
		public static readonly BitSet _subpropertyname_in_propertyname788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_subpropertyname811 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_identifierpart826 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DYNAMICIDENTIFIER_in_identifierpart848 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  LinqToQuerystring 
