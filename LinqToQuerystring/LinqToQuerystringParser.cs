//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g 2013-04-07 21:41:16

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  LinqToQuerystring 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class LinqToQuerystringParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALLPAGES", "AND", "ASC", "ASSIGN", "BOOL", "DATETIME", "DESC", "ENDSWITH", "EQUALS", "ESC_SEQ", "FILTER", "GREATERTHAN", "GREATERTHANOREQUAL", "HEX_DIGIT", "IDENTIFIER", "INLINECOUNT", "INT", "LESSTHAN", "LESSTHANOREQUAL", "NEWLINE", "NONE", "NOT", "NOTEQUALS", "OCTAL_ESC", "OR", "ORDERBY", "SELECT", "SKIP", "SPACE", "STARTSWITH", "STRING", "SUBSTRINGOF", "TOP", "UNICODE_ESC", "'&'", "'('", "')'", "','", "'/'"
	};
	public const int EOF=-1;
	public const int ALLPAGES=4;
	public const int AND=5;
	public const int ASC=6;
	public const int ASSIGN=7;
	public const int BOOL=8;
	public const int DATETIME=9;
	public const int DESC=10;
	public const int ENDSWITH=11;
	public const int EQUALS=12;
	public const int ESC_SEQ=13;
	public const int FILTER=14;
	public const int GREATERTHAN=15;
	public const int GREATERTHANOREQUAL=16;
	public const int HEX_DIGIT=17;
	public const int IDENTIFIER=18;
	public const int INLINECOUNT=19;
	public const int INT=20;
	public const int LESSTHAN=21;
	public const int LESSTHANOREQUAL=22;
	public const int NEWLINE=23;
	public const int NONE=24;
	public const int NOT=25;
	public const int NOTEQUALS=26;
	public const int OCTAL_ESC=27;
	public const int OR=28;
	public const int ORDERBY=29;
	public const int SELECT=30;
	public const int SKIP=31;
	public const int SPACE=32;
	public const int STARTSWITH=33;
	public const int STRING=34;
	public const int SUBSTRINGOF=35;
	public const int TOP=36;
	public const int UNICODE_ESC=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;

	public LinqToQuerystringParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public LinqToQuerystringParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return LinqToQuerystringParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:13:8: public prog : ( param ( '&' ! param )* )* ;
	[GrammarRule("prog")]
	public AstParserRuleReturnScope<object, IToken> prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		TraceIn("prog", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal2 = default(IToken);
		AstParserRuleReturnScope<object, IToken> param1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> param3 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal2_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(13, 25);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:2: ( ( param ( '&' ! param )* )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:4: ( param ( '&' ! param )* )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(14, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:4: ( param ( '&' ! param )* )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==FILTER||LA2_1==INLINECOUNT||(LA2_1>=ORDERBY && LA2_1<=SKIP)||LA2_1==TOP))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:5: param ( '&' ! param )*
					{
					DebugLocation(14, 5);
					PushFollow(Follow._param_in_prog55);
					param1=param();
					PopFollow();

					adaptor.AddChild(root_0, param1.Tree);
					DebugLocation(14, 11);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:11: ( '&' ! param )*
					try { DebugEnterSubRule(1);
					while (true)
					{
						int alt1=2;
						try { DebugEnterDecision(1, false);
						int LA1_1 = input.LA(1);

						if ((LA1_1==38))
						{
							alt1 = 1;
						}


						} finally { DebugExitDecision(1); }
						switch ( alt1 )
						{
						case 1:
							DebugEnterAlt(1);
							// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:12: '&' ! param
							{
							DebugLocation(14, 15);
							char_literal2=(IToken)Match(input,38,Follow._38_in_prog58); 
							DebugLocation(14, 17);
							PushFollow(Follow._param_in_prog61);
							param3=param();
							PopFollow();

							adaptor.AddChild(root_0, param3.Tree);

							}
							break;

						default:
							goto loop1;
						}
					}

					loop1:
						;

					} finally { DebugExitSubRule(1); }


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
		}
		DebugLocation(14, 25);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	partial void EnterRule_param();
	partial void LeaveRule_param();
	// $ANTLR start "param"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:1: param : ( orderby | top | skip | filter | select | inlinecount ) ;
	[GrammarRule("param")]
	private AstParserRuleReturnScope<object, IToken> param()
	{
		EnterRule_param();
		EnterRule("param", 2);
		TraceIn("param", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> orderby4 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> top5 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> skip6 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filter7 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> select8 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> inlinecount9 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "param");
		DebugLocation(16, 62);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:7: ( ( orderby | top | skip | filter | select | inlinecount ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:9: ( orderby | top | skip | filter | select | inlinecount )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(16, 9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:9: ( orderby | top | skip | filter | select | inlinecount )
			int alt3=6;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case ORDERBY:
				{
				alt3 = 1;
				}
				break;
			case TOP:
				{
				alt3 = 2;
				}
				break;
			case SKIP:
				{
				alt3 = 3;
				}
				break;
			case FILTER:
				{
				alt3 = 4;
				}
				break;
			case SELECT:
				{
				alt3 = 5;
				}
				break;
			case INLINECOUNT:
				{
				alt3 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:10: orderby
				{
				DebugLocation(16, 10);
				PushFollow(Follow._orderby_in_param74);
				orderby4=orderby();
				PopFollow();

				adaptor.AddChild(root_0, orderby4.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:20: top
				{
				DebugLocation(16, 20);
				PushFollow(Follow._top_in_param78);
				top5=top();
				PopFollow();

				adaptor.AddChild(root_0, top5.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:26: skip
				{
				DebugLocation(16, 26);
				PushFollow(Follow._skip_in_param82);
				skip6=skip();
				PopFollow();

				adaptor.AddChild(root_0, skip6.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:33: filter
				{
				DebugLocation(16, 33);
				PushFollow(Follow._filter_in_param86);
				filter7=filter();
				PopFollow();

				adaptor.AddChild(root_0, filter7.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:42: select
				{
				DebugLocation(16, 42);
				PushFollow(Follow._select_in_param90);
				select8=select();
				PopFollow();

				adaptor.AddChild(root_0, select8.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:51: inlinecount
				{
				DebugLocation(16, 51);
				PushFollow(Follow._inlinecount_in_param94);
				inlinecount9=inlinecount();
				PopFollow();

				adaptor.AddChild(root_0, inlinecount9.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("param", 2);
			LeaveRule("param", 2);
			LeaveRule_param();
		}
		DebugLocation(16, 62);
		} finally { DebugExitRule(GrammarFileName, "param"); }
		return retval;

	}
	// $ANTLR end "param"

	partial void EnterRule_skip();
	partial void LeaveRule_skip();
	// $ANTLR start "skip"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:18:1: skip : SKIP ^ ( INT )+ ;
	[GrammarRule("skip")]
	private AstParserRuleReturnScope<object, IToken> skip()
	{
		EnterRule_skip();
		EnterRule("skip", 3);
		TraceIn("skip", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SKIP10 = default(IToken);
		IToken INT11 = default(IToken);

		object SKIP10_tree = default(object);
		object INT11_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "skip");
		DebugLocation(18, 13);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:19:2: ( SKIP ^ ( INT )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:19:4: SKIP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(19, 8);
			SKIP10=(IToken)Match(input,SKIP,Follow._SKIP_in_skip105); 
			SKIP10_tree = (object)adaptor.Create(SKIP10);
			root_0 = (object)adaptor.BecomeRoot(SKIP10_tree, root_0);
			DebugLocation(19, 10);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:19:10: ( INT )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==INT))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:19:10: INT
					{
					DebugLocation(19, 10);
					INT11=(IToken)Match(input,INT,Follow._INT_in_skip108); 
					INT11_tree = (object)adaptor.Create(INT11);
					adaptor.AddChild(root_0, INT11_tree);

					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("skip", 3);
			LeaveRule("skip", 3);
			LeaveRule_skip();
		}
		DebugLocation(19, 13);
		} finally { DebugExitRule(GrammarFileName, "skip"); }
		return retval;

	}
	// $ANTLR end "skip"

	partial void EnterRule_top();
	partial void LeaveRule_top();
	// $ANTLR start "top"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:21:1: top : TOP ^ ( INT )+ ;
	[GrammarRule("top")]
	private AstParserRuleReturnScope<object, IToken> top()
	{
		EnterRule_top();
		EnterRule("top", 4);
		TraceIn("top", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken TOP12 = default(IToken);
		IToken INT13 = default(IToken);

		object TOP12_tree = default(object);
		object INT13_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "top");
		DebugLocation(21, 12);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:22:2: ( TOP ^ ( INT )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:22:4: TOP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(22, 7);
			TOP12=(IToken)Match(input,TOP,Follow._TOP_in_top119); 
			TOP12_tree = (object)adaptor.Create(TOP12);
			root_0 = (object)adaptor.BecomeRoot(TOP12_tree, root_0);
			DebugLocation(22, 9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:22:9: ( INT )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==INT))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:22:9: INT
					{
					DebugLocation(22, 9);
					INT13=(IToken)Match(input,INT,Follow._INT_in_top122); 
					INT13_tree = (object)adaptor.Create(INT13);
					adaptor.AddChild(root_0, INT13_tree);

					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top", 4);
			LeaveRule("top", 4);
			LeaveRule_top();
		}
		DebugLocation(22, 12);
		} finally { DebugExitRule(GrammarFileName, "top"); }
		return retval;

	}
	// $ANTLR end "top"

	partial void EnterRule_filter();
	partial void LeaveRule_filter();
	// $ANTLR start "filter"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:24:1: filter : FILTER ^ filterexpression ;
	[GrammarRule("filter")]
	private AstParserRuleReturnScope<object, IToken> filter()
	{
		EnterRule_filter();
		EnterRule("filter", 5);
		TraceIn("filter", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken FILTER14 = default(IToken);
		AstParserRuleReturnScope<object, IToken> filterexpression15 = default(AstParserRuleReturnScope<object, IToken>);

		object FILTER14_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filter");
		DebugLocation(24, 27);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:25:2: ( FILTER ^ filterexpression )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:25:4: FILTER ^ filterexpression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(25, 10);
			FILTER14=(IToken)Match(input,FILTER,Follow._FILTER_in_filter133); 
			FILTER14_tree = (object)adaptor.Create(FILTER14);
			root_0 = (object)adaptor.BecomeRoot(FILTER14_tree, root_0);
			DebugLocation(25, 12);
			PushFollow(Follow._filterexpression_in_filter136);
			filterexpression15=filterexpression();
			PopFollow();

			adaptor.AddChild(root_0, filterexpression15.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filter", 5);
			LeaveRule("filter", 5);
			LeaveRule_filter();
		}
		DebugLocation(25, 27);
		} finally { DebugExitRule(GrammarFileName, "filter"); }
		return retval;

	}
	// $ANTLR end "filter"

	partial void EnterRule_select();
	partial void LeaveRule_select();
	// $ANTLR start "select"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:27:1: select : SELECT ^ propertyname ( ',' ! propertyname )* ;
	[GrammarRule("select")]
	private AstParserRuleReturnScope<object, IToken> select()
	{
		EnterRule_select();
		EnterRule("select", 6);
		TraceIn("select", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SELECT16 = default(IToken);
		IToken char_literal18 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname17 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname19 = default(AstParserRuleReturnScope<object, IToken>);

		object SELECT16_tree = default(object);
		object char_literal18_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "select");
		DebugLocation(27, 44);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:28:2: ( SELECT ^ propertyname ( ',' ! propertyname )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:28:4: SELECT ^ propertyname ( ',' ! propertyname )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(28, 10);
			SELECT16=(IToken)Match(input,SELECT,Follow._SELECT_in_select146); 
			SELECT16_tree = (object)adaptor.Create(SELECT16);
			root_0 = (object)adaptor.BecomeRoot(SELECT16_tree, root_0);
			DebugLocation(28, 12);
			PushFollow(Follow._propertyname_in_select149);
			propertyname17=propertyname();
			PopFollow();

			adaptor.AddChild(root_0, propertyname17.Tree);
			DebugLocation(28, 25);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:28:25: ( ',' ! propertyname )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==41))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:28:26: ',' ! propertyname
					{
					DebugLocation(28, 29);
					char_literal18=(IToken)Match(input,41,Follow._41_in_select152); 
					DebugLocation(28, 31);
					PushFollow(Follow._propertyname_in_select155);
					propertyname19=propertyname();
					PopFollow();

					adaptor.AddChild(root_0, propertyname19.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select", 6);
			LeaveRule("select", 6);
			LeaveRule_select();
		}
		DebugLocation(28, 44);
		} finally { DebugExitRule(GrammarFileName, "select"); }
		return retval;

	}
	// $ANTLR end "select"

	partial void EnterRule_inlinecount();
	partial void LeaveRule_inlinecount();
	// $ANTLR start "inlinecount"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:30:1: inlinecount : ( INLINECOUNT ^ ALLPAGES | INLINECOUNT NONE ->);
	[GrammarRule("inlinecount")]
	private AstParserRuleReturnScope<object, IToken> inlinecount()
	{
		EnterRule_inlinecount();
		EnterRule("inlinecount", 7);
		TraceIn("inlinecount", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken INLINECOUNT20 = default(IToken);
		IToken ALLPAGES21 = default(IToken);
		IToken INLINECOUNT22 = default(IToken);
		IToken NONE23 = default(IToken);

		object INLINECOUNT20_tree = default(object);
		object ALLPAGES21_tree = default(object);
		object INLINECOUNT22_tree = default(object);
		object NONE23_tree = default(object);
		RewriteRuleITokenStream stream_INLINECOUNT=new RewriteRuleITokenStream(adaptor,"token INLINECOUNT");
		RewriteRuleITokenStream stream_NONE=new RewriteRuleITokenStream(adaptor,"token NONE");
		try { DebugEnterRule(GrammarFileName, "inlinecount");
		DebugLocation(30, 22);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:31:2: ( INLINECOUNT ^ ALLPAGES | INLINECOUNT NONE ->)
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1==INLINECOUNT))
			{
				int LA7_2 = input.LA(2);

				if ((LA7_2==ALLPAGES))
				{
					alt7 = 1;
				}
				else if ((LA7_2==NONE))
				{
					alt7 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:31:4: INLINECOUNT ^ ALLPAGES
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(31, 15);
				INLINECOUNT20=(IToken)Match(input,INLINECOUNT,Follow._INLINECOUNT_in_inlinecount167); 
				INLINECOUNT20_tree = (object)adaptor.Create(INLINECOUNT20);
				root_0 = (object)adaptor.BecomeRoot(INLINECOUNT20_tree, root_0);
				DebugLocation(31, 17);
				ALLPAGES21=(IToken)Match(input,ALLPAGES,Follow._ALLPAGES_in_inlinecount170); 
				ALLPAGES21_tree = (object)adaptor.Create(ALLPAGES21);
				adaptor.AddChild(root_0, ALLPAGES21_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:32:4: INLINECOUNT NONE
				{
				DebugLocation(32, 4);
				INLINECOUNT22=(IToken)Match(input,INLINECOUNT,Follow._INLINECOUNT_in_inlinecount175);  
				stream_INLINECOUNT.Add(INLINECOUNT22);

				DebugLocation(32, 16);
				NONE23=(IToken)Match(input,NONE,Follow._NONE_in_inlinecount177);  
				stream_NONE.Add(NONE23);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 32:21: ->
				{
					DebugLocation(32, 23);
					root_0 = null;
				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inlinecount", 7);
			LeaveRule("inlinecount", 7);
			LeaveRule_inlinecount();
		}
		DebugLocation(32, 22);
		} finally { DebugExitRule(GrammarFileName, "inlinecount"); }
		return retval;

	}
	// $ANTLR end "inlinecount"

	partial void EnterRule_filterexpression();
	partial void LeaveRule_filterexpression();
	// $ANTLR start "filterexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:1: filterexpression : orexpression ( SPACE ! OR ^ SPACE ! orexpression )* ;
	[GrammarRule("filterexpression")]
	private AstParserRuleReturnScope<object, IToken> filterexpression()
	{
		EnterRule_filterexpression();
		EnterRule("filterexpression", 8);
		TraceIn("filterexpression", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE25 = default(IToken);
		IToken OR26 = default(IToken);
		IToken SPACE27 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orexpression24 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orexpression28 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE25_tree = default(object);
		object OR26_tree = default(object);
		object SPACE27_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filterexpression");
		DebugLocation(34, 49);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:35:2: ( orexpression ( SPACE ! OR ^ SPACE ! orexpression )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:35:4: orexpression ( SPACE ! OR ^ SPACE ! orexpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(35, 4);
			PushFollow(Follow._orexpression_in_filterexpression189);
			orexpression24=orexpression();
			PopFollow();

			adaptor.AddChild(root_0, orexpression24.Tree);
			DebugLocation(35, 17);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:35:17: ( SPACE ! OR ^ SPACE ! orexpression )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==SPACE))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:35:18: SPACE ! OR ^ SPACE ! orexpression
					{
					DebugLocation(35, 23);
					SPACE25=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression192); 
					DebugLocation(35, 27);
					OR26=(IToken)Match(input,OR,Follow._OR_in_filterexpression195); 
					OR26_tree = (object)adaptor.Create(OR26);
					root_0 = (object)adaptor.BecomeRoot(OR26_tree, root_0);
					DebugLocation(35, 34);
					SPACE27=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression198); 
					DebugLocation(35, 36);
					PushFollow(Follow._orexpression_in_filterexpression201);
					orexpression28=orexpression();
					PopFollow();

					adaptor.AddChild(root_0, orexpression28.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filterexpression", 8);
			LeaveRule("filterexpression", 8);
			LeaveRule_filterexpression();
		}
		DebugLocation(35, 49);
		} finally { DebugExitRule(GrammarFileName, "filterexpression"); }
		return retval;

	}
	// $ANTLR end "filterexpression"

	partial void EnterRule_orexpression();
	partial void LeaveRule_orexpression();
	// $ANTLR start "orexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:37:1: orexpression : andexpression ( SPACE ! AND ^ SPACE ! andexpression )* ;
	[GrammarRule("orexpression")]
	private AstParserRuleReturnScope<object, IToken> orexpression()
	{
		EnterRule_orexpression();
		EnterRule("orexpression", 9);
		TraceIn("orexpression", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE30 = default(IToken);
		IToken AND31 = default(IToken);
		IToken SPACE32 = default(IToken);
		AstParserRuleReturnScope<object, IToken> andexpression29 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> andexpression33 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE30_tree = default(object);
		object AND31_tree = default(object);
		object SPACE32_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orexpression");
		DebugLocation(37, 52);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:38:2: ( andexpression ( SPACE ! AND ^ SPACE ! andexpression )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:38:4: andexpression ( SPACE ! AND ^ SPACE ! andexpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(38, 4);
			PushFollow(Follow._andexpression_in_orexpression213);
			andexpression29=andexpression();
			PopFollow();

			adaptor.AddChild(root_0, andexpression29.Tree);
			DebugLocation(38, 18);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:38:18: ( SPACE ! AND ^ SPACE ! andexpression )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==SPACE))
				{
					int LA9_2 = input.LA(2);

					if ((LA9_2==AND))
					{
						alt9 = 1;
					}


				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:38:19: SPACE ! AND ^ SPACE ! andexpression
					{
					DebugLocation(38, 24);
					SPACE30=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression216); 
					DebugLocation(38, 29);
					AND31=(IToken)Match(input,AND,Follow._AND_in_orexpression219); 
					AND31_tree = (object)adaptor.Create(AND31);
					root_0 = (object)adaptor.BecomeRoot(AND31_tree, root_0);
					DebugLocation(38, 36);
					SPACE32=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression222); 
					DebugLocation(38, 38);
					PushFollow(Follow._andexpression_in_orexpression225);
					andexpression33=andexpression();
					PopFollow();

					adaptor.AddChild(root_0, andexpression33.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orexpression", 9);
			LeaveRule("orexpression", 9);
			LeaveRule_orexpression();
		}
		DebugLocation(38, 52);
		} finally { DebugExitRule(GrammarFileName, "orexpression"); }
		return retval;

	}
	// $ANTLR end "orexpression"

	partial void EnterRule_andexpression();
	partial void LeaveRule_andexpression();
	// $ANTLR start "andexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:40:1: andexpression : ( NOT ^ SPACE booleanexpression | booleanexpression );
	[GrammarRule("andexpression")]
	private AstParserRuleReturnScope<object, IToken> andexpression()
	{
		EnterRule_andexpression();
		EnterRule("andexpression", 10);
		TraceIn("andexpression", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NOT34 = default(IToken);
		IToken SPACE35 = default(IToken);
		AstParserRuleReturnScope<object, IToken> booleanexpression36 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> booleanexpression37 = default(AstParserRuleReturnScope<object, IToken>);

		object NOT34_tree = default(object);
		object SPACE35_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "andexpression");
		DebugLocation(40, 20);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:41:2: ( NOT ^ SPACE booleanexpression | booleanexpression )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==NOT))
			{
				alt10 = 1;
			}
			else if (((LA10_1>=BOOL && LA10_1<=DATETIME)||LA10_1==ENDSWITH||LA10_1==IDENTIFIER||LA10_1==INT||(LA10_1>=STARTSWITH && LA10_1<=SUBSTRINGOF)||LA10_1==39))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:41:4: NOT ^ SPACE booleanexpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(41, 7);
				NOT34=(IToken)Match(input,NOT,Follow._NOT_in_andexpression237); 
				NOT34_tree = (object)adaptor.Create(NOT34);
				root_0 = (object)adaptor.BecomeRoot(NOT34_tree, root_0);
				DebugLocation(41, 9);
				SPACE35=(IToken)Match(input,SPACE,Follow._SPACE_in_andexpression240); 
				SPACE35_tree = (object)adaptor.Create(SPACE35);
				adaptor.AddChild(root_0, SPACE35_tree);
				DebugLocation(41, 15);
				PushFollow(Follow._booleanexpression_in_andexpression242);
				booleanexpression36=booleanexpression();
				PopFollow();

				adaptor.AddChild(root_0, booleanexpression36.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:42:4: booleanexpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(42, 4);
				PushFollow(Follow._booleanexpression_in_andexpression247);
				booleanexpression37=booleanexpression();
				PopFollow();

				adaptor.AddChild(root_0, booleanexpression37.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andexpression", 10);
			LeaveRule("andexpression", 10);
			LeaveRule_andexpression();
		}
		DebugLocation(42, 20);
		} finally { DebugExitRule(GrammarFileName, "andexpression"); }
		return retval;

	}
	// $ANTLR end "andexpression"

	partial void EnterRule_booleanexpression();
	partial void LeaveRule_booleanexpression();
	// $ANTLR start "booleanexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:1: booleanexpression : atom ( SPACE ! filteroperator ^ SPACE ! atom | implicit ) ;
	[GrammarRule("booleanexpression")]
	private AstParserRuleReturnScope<object, IToken> booleanexpression()
	{
		EnterRule_booleanexpression();
		EnterRule("booleanexpression", 11);
		TraceIn("booleanexpression", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE39 = default(IToken);
		IToken SPACE41 = default(IToken);
		AstParserRuleReturnScope<object, IToken> atom38 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filteroperator40 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom42 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> implicit43 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE39_tree = default(object);
		object SPACE41_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "booleanexpression");
		DebugLocation(44, 55);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:45:2: ( atom ( SPACE ! filteroperator ^ SPACE ! atom | implicit ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:45:4: atom ( SPACE ! filteroperator ^ SPACE ! atom | implicit )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(45, 4);
			PushFollow(Follow._atom_in_booleanexpression258);
			atom38=atom();
			PopFollow();

			adaptor.AddChild(root_0, atom38.Tree);
			DebugLocation(45, 9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:45:9: ( SPACE ! filteroperator ^ SPACE ! atom | implicit )
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1==SPACE))
			{
				int LA11_2 = input.LA(2);

				if ((LA11_2==AND||LA11_2==OR))
				{
					alt11 = 2;
				}
				else if ((LA11_2==EQUALS||(LA11_2>=GREATERTHAN && LA11_2<=GREATERTHANOREQUAL)||(LA11_2>=LESSTHAN && LA11_2<=LESSTHANOREQUAL)||LA11_2==NOTEQUALS))
				{
					alt11 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA11_1==EOF||LA11_1==FILTER||LA11_1==INLINECOUNT||(LA11_1>=ORDERBY && LA11_1<=SKIP)||LA11_1==TOP||LA11_1==38||LA11_1==40))
			{
				alt11 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:45:10: SPACE ! filteroperator ^ SPACE ! atom
				{
				DebugLocation(45, 15);
				SPACE39=(IToken)Match(input,SPACE,Follow._SPACE_in_booleanexpression261); 
				DebugLocation(45, 31);
				PushFollow(Follow._filteroperator_in_booleanexpression264);
				filteroperator40=filteroperator();
				PopFollow();

				root_0 = (object)adaptor.BecomeRoot(filteroperator40.Tree, root_0);
				DebugLocation(45, 38);
				SPACE41=(IToken)Match(input,SPACE,Follow._SPACE_in_booleanexpression267); 
				DebugLocation(45, 40);
				PushFollow(Follow._atom_in_booleanexpression270);
				atom42=atom();
				PopFollow();

				adaptor.AddChild(root_0, atom42.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:45:47: implicit
				{
				DebugLocation(45, 47);
				PushFollow(Follow._implicit_in_booleanexpression274);
				implicit43=@implicit();
				PopFollow();

				adaptor.AddChild(root_0, implicit43.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("booleanexpression", 11);
			LeaveRule("booleanexpression", 11);
			LeaveRule_booleanexpression();
		}
		DebugLocation(45, 55);
		} finally { DebugExitRule(GrammarFileName, "booleanexpression"); }
		return retval;

	}
	// $ANTLR end "booleanexpression"

	partial void EnterRule_implicit();
	partial void LeaveRule_implicit();
	// $ANTLR start "implicit"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:47:1: implicit : -> ^( EQUALS BOOL[\"true\"] ) ;
	[GrammarRule("implicit")]
	private AstParserRuleReturnScope<object, IToken> @implicit()
	{
		EnterRule_implicit();
		EnterRule("implicit", 12);
		TraceIn("implicit", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		try { DebugEnterRule(GrammarFileName, "implicit");
		DebugLocation(47, 28);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:2: ( -> ^( EQUALS BOOL[\"true\"] ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:4: 
			{

			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 48:4: -> ^( EQUALS BOOL[\"true\"] )
			{
				DebugLocation(48, 7);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:7: ^( EQUALS BOOL[\"true\"] )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(48, 9);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(EQUALS, "EQUALS"), root_1);

				DebugLocation(48, 16);
				adaptor.AddChild(root_1, (object)adaptor.Create(BOOL, "true"));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("implicit", 12);
			LeaveRule("implicit", 12);
			LeaveRule_implicit();
		}
		DebugLocation(48, 28);
		} finally { DebugExitRule(GrammarFileName, "implicit"); }
		return retval;

	}
	// $ANTLR end "implicit"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:50:1: atom : ( '(' filterexpression ')' | functioncall | propertyname | constant );
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<object, IToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 13);
		TraceIn("atom", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal44 = default(IToken);
		IToken char_literal46 = default(IToken);
		AstParserRuleReturnScope<object, IToken> filterexpression45 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> functioncall47 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname48 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> constant49 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal44_tree = default(object);
		object char_literal46_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(50, 11);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:50:6: ( '(' filterexpression ')' | functioncall | propertyname | constant )
			int alt12=4;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case 39:
				{
				alt12 = 1;
				}
				break;
			case ENDSWITH:
			case STARTSWITH:
			case SUBSTRINGOF:
				{
				alt12 = 2;
				}
				break;
			case IDENTIFIER:
				{
				alt12 = 3;
				}
				break;
			case BOOL:
			case DATETIME:
			case INT:
			case STRING:
				{
				alt12 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:50:8: '(' filterexpression ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(50, 8);
				char_literal44=(IToken)Match(input,39,Follow._39_in_atom301); 
				char_literal44_tree = (object)adaptor.Create(char_literal44);
				adaptor.AddChild(root_0, char_literal44_tree);
				DebugLocation(50, 12);
				PushFollow(Follow._filterexpression_in_atom303);
				filterexpression45=filterexpression();
				PopFollow();

				adaptor.AddChild(root_0, filterexpression45.Tree);
				DebugLocation(50, 29);
				char_literal46=(IToken)Match(input,40,Follow._40_in_atom305); 
				char_literal46_tree = (object)adaptor.Create(char_literal46);
				adaptor.AddChild(root_0, char_literal46_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:4: functioncall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(51, 4);
				PushFollow(Follow._functioncall_in_atom310);
				functioncall47=functioncall();
				PopFollow();

				adaptor.AddChild(root_0, functioncall47.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:52:4: propertyname
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(52, 4);
				PushFollow(Follow._propertyname_in_atom315);
				propertyname48=propertyname();
				PopFollow();

				adaptor.AddChild(root_0, propertyname48.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:53:4: constant
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(53, 4);
				PushFollow(Follow._constant_in_atom321);
				constant49=constant();
				PopFollow();

				adaptor.AddChild(root_0, constant49.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 13);
			LeaveRule("atom", 13);
			LeaveRule_atom();
		}
		DebugLocation(53, 11);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_functioncall();
	partial void LeaveRule_functioncall();
	// $ANTLR start "functioncall"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:55:1: functioncall : function ^ '(' ( IDENTIFIER | constant ) ( ',' ( IDENTIFIER | constant ) )* ')' ;
	[GrammarRule("functioncall")]
	private AstParserRuleReturnScope<object, IToken> functioncall()
	{
		EnterRule_functioncall();
		EnterRule("functioncall", 14);
		TraceIn("functioncall", 14);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal51 = default(IToken);
		IToken IDENTIFIER52 = default(IToken);
		IToken char_literal54 = default(IToken);
		IToken IDENTIFIER55 = default(IToken);
		IToken char_literal57 = default(IToken);
		AstParserRuleReturnScope<object, IToken> function50 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> constant53 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> constant56 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal51_tree = default(object);
		object IDENTIFIER52_tree = default(object);
		object char_literal54_tree = default(object);
		object IDENTIFIER55_tree = default(object);
		object char_literal57_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functioncall");
		DebugLocation(55, 75);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:56:2: ( function ^ '(' ( IDENTIFIER | constant ) ( ',' ( IDENTIFIER | constant ) )* ')' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:56:4: function ^ '(' ( IDENTIFIER | constant ) ( ',' ( IDENTIFIER | constant ) )* ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(56, 12);
			PushFollow(Follow._function_in_functioncall330);
			function50=function();
			PopFollow();

			root_0 = (object)adaptor.BecomeRoot(function50.Tree, root_0);
			DebugLocation(56, 14);
			char_literal51=(IToken)Match(input,39,Follow._39_in_functioncall333); 
			char_literal51_tree = (object)adaptor.Create(char_literal51);
			adaptor.AddChild(root_0, char_literal51_tree);
			DebugLocation(56, 18);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:56:18: ( IDENTIFIER | constant )
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==IDENTIFIER))
			{
				alt13 = 1;
			}
			else if (((LA13_1>=BOOL && LA13_1<=DATETIME)||LA13_1==INT||LA13_1==STRING))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:56:19: IDENTIFIER
				{
				DebugLocation(56, 19);
				IDENTIFIER52=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_functioncall336); 
				IDENTIFIER52_tree = (object)adaptor.Create(IDENTIFIER52);
				adaptor.AddChild(root_0, IDENTIFIER52_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:56:32: constant
				{
				DebugLocation(56, 32);
				PushFollow(Follow._constant_in_functioncall340);
				constant53=constant();
				PopFollow();

				adaptor.AddChild(root_0, constant53.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(56, 42);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:56:42: ( ',' ( IDENTIFIER | constant ) )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if ((LA15_1==41))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:56:43: ',' ( IDENTIFIER | constant )
					{
					DebugLocation(56, 43);
					char_literal54=(IToken)Match(input,41,Follow._41_in_functioncall344); 
					char_literal54_tree = (object)adaptor.Create(char_literal54);
					adaptor.AddChild(root_0, char_literal54_tree);
					DebugLocation(56, 47);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:56:47: ( IDENTIFIER | constant )
					int alt14=2;
					try { DebugEnterSubRule(14);
					try { DebugEnterDecision(14, false);
					int LA14_1 = input.LA(1);

					if ((LA14_1==IDENTIFIER))
					{
						alt14 = 1;
					}
					else if (((LA14_1>=BOOL && LA14_1<=DATETIME)||LA14_1==INT||LA14_1==STRING))
					{
						alt14 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(14); }
					switch (alt14)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:56:48: IDENTIFIER
						{
						DebugLocation(56, 48);
						IDENTIFIER55=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_functioncall347); 
						IDENTIFIER55_tree = (object)adaptor.Create(IDENTIFIER55);
						adaptor.AddChild(root_0, IDENTIFIER55_tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:56:61: constant
						{
						DebugLocation(56, 61);
						PushFollow(Follow._constant_in_functioncall351);
						constant56=constant();
						PopFollow();

						adaptor.AddChild(root_0, constant56.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(14); }


					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }

			DebugLocation(56, 73);
			char_literal57=(IToken)Match(input,40,Follow._40_in_functioncall356); 
			char_literal57_tree = (object)adaptor.Create(char_literal57);
			adaptor.AddChild(root_0, char_literal57_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall", 14);
			LeaveRule("functioncall", 14);
			LeaveRule_functioncall();
		}
		DebugLocation(56, 75);
		} finally { DebugExitRule(GrammarFileName, "functioncall"); }
		return retval;

	}
	// $ANTLR end "functioncall"

	partial void EnterRule_function();
	partial void LeaveRule_function();
	// $ANTLR start "function"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:1: function : ( STARTSWITH | ENDSWITH | SUBSTRINGOF );
	[GrammarRule("function")]
	private AstParserRuleReturnScope<object, IToken> function()
	{
		EnterRule_function();
		EnterRule("function", 15);
		TraceIn("function", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set58 = default(IToken);

		object set58_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "function");
		DebugLocation(58, 38);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:59:2: ( STARTSWITH | ENDSWITH | SUBSTRINGOF )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(59, 2);

			set58=(IToken)input.LT(1);
			if (input.LA(1)==ENDSWITH||input.LA(1)==STARTSWITH||input.LA(1)==SUBSTRINGOF)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set58));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function", 15);
			LeaveRule("function", 15);
			LeaveRule_function();
		}
		DebugLocation(59, 38);
		} finally { DebugExitRule(GrammarFileName, "function"); }
		return retval;

	}
	// $ANTLR end "function"

	partial void EnterRule_orderby();
	partial void LeaveRule_orderby();
	// $ANTLR start "orderby"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:61:1: orderby : ORDERBY ^ orderbylist ;
	[GrammarRule("orderby")]
	private AstParserRuleReturnScope<object, IToken> orderby()
	{
		EnterRule_orderby();
		EnterRule("orderby", 16);
		TraceIn("orderby", 16);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ORDERBY59 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderbylist60 = default(AstParserRuleReturnScope<object, IToken>);

		object ORDERBY59_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderby");
		DebugLocation(61, 23);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:62:2: ( ORDERBY ^ orderbylist )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:62:4: ORDERBY ^ orderbylist
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(62, 11);
			ORDERBY59=(IToken)Match(input,ORDERBY,Follow._ORDERBY_in_orderby383); 
			ORDERBY59_tree = (object)adaptor.Create(ORDERBY59);
			root_0 = (object)adaptor.BecomeRoot(ORDERBY59_tree, root_0);
			DebugLocation(62, 13);
			PushFollow(Follow._orderbylist_in_orderby386);
			orderbylist60=orderbylist();
			PopFollow();

			adaptor.AddChild(root_0, orderbylist60.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby", 16);
			LeaveRule("orderby", 16);
			LeaveRule_orderby();
		}
		DebugLocation(62, 23);
		} finally { DebugExitRule(GrammarFileName, "orderby"); }
		return retval;

	}
	// $ANTLR end "orderby"

	partial void EnterRule_orderbylist();
	partial void LeaveRule_orderbylist();
	// $ANTLR start "orderbylist"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:64:1: orderbylist : orderpropertyname ( ',' ! orderpropertyname )* ;
	[GrammarRule("orderbylist")]
	private AstParserRuleReturnScope<object, IToken> orderbylist()
	{
		EnterRule_orderbylist();
		EnterRule("orderbylist", 17);
		TraceIn("orderbylist", 17);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal62 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderpropertyname61 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orderpropertyname63 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal62_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderbylist");
		DebugLocation(64, 46);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:65:2: ( orderpropertyname ( ',' ! orderpropertyname )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:65:4: orderpropertyname ( ',' ! orderpropertyname )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(65, 4);
			PushFollow(Follow._orderpropertyname_in_orderbylist396);
			orderpropertyname61=orderpropertyname();
			PopFollow();

			adaptor.AddChild(root_0, orderpropertyname61.Tree);
			DebugLocation(65, 22);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:65:22: ( ',' ! orderpropertyname )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==41))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:65:23: ',' ! orderpropertyname
					{
					DebugLocation(65, 26);
					char_literal62=(IToken)Match(input,41,Follow._41_in_orderbylist399); 
					DebugLocation(65, 28);
					PushFollow(Follow._orderpropertyname_in_orderbylist402);
					orderpropertyname63=orderpropertyname();
					PopFollow();

					adaptor.AddChild(root_0, orderpropertyname63.Tree);

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderbylist", 17);
			LeaveRule("orderbylist", 17);
			LeaveRule_orderbylist();
		}
		DebugLocation(65, 46);
		} finally { DebugExitRule(GrammarFileName, "orderbylist"); }
		return retval;

	}
	// $ANTLR end "orderbylist"

	partial void EnterRule_orderpropertyname();
	partial void LeaveRule_orderpropertyname();
	// $ANTLR start "orderpropertyname"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:67:1: orderpropertyname : ( propertyname -> ^( ASC propertyname ) | propertyname ( SPACE ! ( ASC | DESC ) ^) );
	[GrammarRule("orderpropertyname")]
	private AstParserRuleReturnScope<object, IToken> orderpropertyname()
	{
		EnterRule_orderpropertyname();
		EnterRule("orderpropertyname", 18);
		TraceIn("orderpropertyname", 18);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE66 = default(IToken);
		IToken set67 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname64 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname65 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE66_tree = default(object);
		object set67_tree = default(object);
		RewriteRuleSubtreeStream stream_propertyname=new RewriteRuleSubtreeStream(adaptor,"rule propertyname");
		try { DebugEnterRule(GrammarFileName, "orderpropertyname");
		DebugLocation(67, 39);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:68:2: ( propertyname -> ^( ASC propertyname ) | propertyname ( SPACE ! ( ASC | DESC ) ^) )
			int alt17=2;
			try { DebugEnterDecision(17, false);
			try
			{
				alt17 = dfa17.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:68:4: propertyname
				{
				DebugLocation(68, 4);
				PushFollow(Follow._propertyname_in_orderpropertyname413);
				propertyname64=propertyname();
				PopFollow();

				stream_propertyname.Add(propertyname64.Tree);


				{
				// AST REWRITE
				// elements: propertyname
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 68:17: -> ^( ASC propertyname )
				{
					DebugLocation(68, 20);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:68:20: ^( ASC propertyname )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(68, 22);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ASC, "ASC"), root_1);

					DebugLocation(68, 26);
					adaptor.AddChild(root_1, stream_propertyname.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:69:5: propertyname ( SPACE ! ( ASC | DESC ) ^)
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(69, 5);
				PushFollow(Follow._propertyname_in_orderpropertyname427);
				propertyname65=propertyname();
				PopFollow();

				adaptor.AddChild(root_0, propertyname65.Tree);
				DebugLocation(69, 18);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:69:18: ( SPACE ! ( ASC | DESC ) ^)
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:69:19: SPACE ! ( ASC | DESC ) ^
				{
				DebugLocation(69, 24);
				SPACE66=(IToken)Match(input,SPACE,Follow._SPACE_in_orderpropertyname430); 
				DebugLocation(69, 38);

				set67=(IToken)input.LT(1);
				set67=(IToken)input.LT(1);
				if (input.LA(1)==ASC||input.LA(1)==DESC)
				{
					input.Consume();
					root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set67), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderpropertyname", 18);
			LeaveRule("orderpropertyname", 18);
			LeaveRule_orderpropertyname();
		}
		DebugLocation(69, 39);
		} finally { DebugExitRule(GrammarFileName, "orderpropertyname"); }
		return retval;

	}
	// $ANTLR end "orderpropertyname"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();
	// $ANTLR start "constant"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:71:1: constant : ( ( INT )+ | BOOL | STRING | DATETIME ) ;
	[GrammarRule("constant")]
	private AstParserRuleReturnScope<object, IToken> constant()
	{
		EnterRule_constant();
		EnterRule("constant", 19);
		TraceIn("constant", 19);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken INT68 = default(IToken);
		IToken BOOL69 = default(IToken);
		IToken STRING70 = default(IToken);
		IToken DATETIME71 = default(IToken);

		object INT68_tree = default(object);
		object BOOL69_tree = default(object);
		object STRING70_tree = default(object);
		object DATETIME71_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(71, 43);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:71:9: ( ( ( INT )+ | BOOL | STRING | DATETIME ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:71:11: ( ( INT )+ | BOOL | STRING | DATETIME )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(71, 11);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:71:11: ( ( INT )+ | BOOL | STRING | DATETIME )
			int alt19=4;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			switch (input.LA(1))
			{
			case INT:
				{
				alt19 = 1;
				}
				break;
			case BOOL:
				{
				alt19 = 2;
				}
				break;
			case STRING:
				{
				alt19 = 3;
				}
				break;
			case DATETIME:
				{
				alt19 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:71:12: ( INT )+
				{
				DebugLocation(71, 12);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:71:12: ( INT )+
				int cnt18=0;
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_1 = input.LA(1);

					if ((LA18_1==INT))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch (alt18)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:71:12: INT
						{
						DebugLocation(71, 12);
						INT68=(IToken)Match(input,INT,Follow._INT_in_constant450); 
						INT68_tree = (object)adaptor.Create(INT68);
						adaptor.AddChild(root_0, INT68_tree);

						}
						break;

					default:
						if (cnt18 >= 1)
							goto loop18;

						EarlyExitException eee18 = new EarlyExitException( 18, input );
						DebugRecognitionException(eee18);
						throw eee18;
					}
					cnt18++;
				}
				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:71:19: BOOL
				{
				DebugLocation(71, 19);
				BOOL69=(IToken)Match(input,BOOL,Follow._BOOL_in_constant455); 
				BOOL69_tree = (object)adaptor.Create(BOOL69);
				adaptor.AddChild(root_0, BOOL69_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:71:26: STRING
				{
				DebugLocation(71, 26);
				STRING70=(IToken)Match(input,STRING,Follow._STRING_in_constant459); 
				STRING70_tree = (object)adaptor.Create(STRING70);
				adaptor.AddChild(root_0, STRING70_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:71:35: DATETIME
				{
				DebugLocation(71, 35);
				DATETIME71=(IToken)Match(input,DATETIME,Follow._DATETIME_in_constant463); 
				DATETIME71_tree = (object)adaptor.Create(DATETIME71);
				adaptor.AddChild(root_0, DATETIME71_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant", 19);
			LeaveRule("constant", 19);
			LeaveRule_constant();
		}
		DebugLocation(71, 43);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_propertyname();
	partial void LeaveRule_propertyname();
	// $ANTLR start "propertyname"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:73:1: propertyname : IDENTIFIER ( '/' IDENTIFIER )* ;
	[GrammarRule("propertyname")]
	private AstParserRuleReturnScope<object, IToken> propertyname()
	{
		EnterRule_propertyname();
		EnterRule("propertyname", 20);
		TraceIn("propertyname", 20);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken IDENTIFIER72 = default(IToken);
		IToken char_literal73 = default(IToken);
		IToken IDENTIFIER74 = default(IToken);

		object IDENTIFIER72_tree = default(object);
		object char_literal73_tree = default(object);
		object IDENTIFIER74_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "propertyname");
		DebugLocation(73, 32);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:74:2: ( IDENTIFIER ( '/' IDENTIFIER )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:74:4: IDENTIFIER ( '/' IDENTIFIER )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(74, 4);
			IDENTIFIER72=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_propertyname473); 
			IDENTIFIER72_tree = (object)adaptor.Create(IDENTIFIER72);
			adaptor.AddChild(root_0, IDENTIFIER72_tree);
			DebugLocation(74, 16);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:74:16: ( '/' IDENTIFIER )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==42))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:74:17: '/' IDENTIFIER
					{
					DebugLocation(74, 17);
					char_literal73=(IToken)Match(input,42,Follow._42_in_propertyname477); 
					char_literal73_tree = (object)adaptor.Create(char_literal73);
					adaptor.AddChild(root_0, char_literal73_tree);
					DebugLocation(74, 21);
					IDENTIFIER74=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_propertyname479); 
					IDENTIFIER74_tree = (object)adaptor.Create(IDENTIFIER74);
					adaptor.AddChild(root_0, IDENTIFIER74_tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyname", 20);
			LeaveRule("propertyname", 20);
			LeaveRule_propertyname();
		}
		DebugLocation(74, 32);
		} finally { DebugExitRule(GrammarFileName, "propertyname"); }
		return retval;

	}
	// $ANTLR end "propertyname"

	partial void EnterRule_filteroperator();
	partial void LeaveRule_filteroperator();
	// $ANTLR start "filteroperator"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:76:1: filteroperator : ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL );
	[GrammarRule("filteroperator")]
	private AstParserRuleReturnScope<object, IToken> filteroperator()
	{
		EnterRule_filteroperator();
		EnterRule("filteroperator", 21);
		TraceIn("filteroperator", 21);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set75 = default(IToken);

		object set75_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filteroperator");
		DebugLocation(76, 85);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:77:2: ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(77, 2);

			set75=(IToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATERTHAN && input.LA(1)<=GREATERTHANOREQUAL)||(input.LA(1)>=LESSTHAN && input.LA(1)<=LESSTHANOREQUAL)||input.LA(1)==NOTEQUALS)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set75));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filteroperator", 21);
			LeaveRule("filteroperator", 21);
			LeaveRule_filteroperator();
		}
		DebugLocation(77, 85);
		} finally { DebugExitRule(GrammarFileName, "filteroperator"); }
		return retval;

	}
	// $ANTLR end "filteroperator"
	#endregion Rules


	#region DFA
	private DFA17 dfa17;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa17 = new DFA17( this );
	}

	private class DFA17 : DFA
	{
		private const string DFA17_eotS =
			"\x6\xFFFF";
		private const string DFA17_eofS =
			"\x1\xFFFF\x1\x3\x3\xFFFF\x1\x3";
		private const string DFA17_minS =
			"\x1\x12\x1\xE\x1\x12\x2\xFFFF\x1\xE";
		private const string DFA17_maxS =
			"\x1\x12\x1\x2A\x1\x12\x2\xFFFF\x1\x2A";
		private const string DFA17_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA17_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA17_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x4\xFFFF\x1\x3\x9\xFFFF\x3\x3\x1\x4\x3\xFFFF\x1\x3\x1\xFFFF\x1"+
				"\x3\x2\xFFFF\x1\x3\x1\x2",
				"\x1\x5",
				"",
				"",
				"\x1\x3\x4\xFFFF\x1\x3\x9\xFFFF\x3\x3\x1\x4\x3\xFFFF\x1\x3\x1\xFFFF\x1"+
				"\x3\x2\xFFFF\x1\x3\x1\x2"
			};

		private static readonly short[] DFA17_eot = DFA.UnpackEncodedString(DFA17_eotS);
		private static readonly short[] DFA17_eof = DFA.UnpackEncodedString(DFA17_eofS);
		private static readonly char[] DFA17_min = DFA.UnpackEncodedStringToUnsignedChars(DFA17_minS);
		private static readonly char[] DFA17_max = DFA.UnpackEncodedStringToUnsignedChars(DFA17_maxS);
		private static readonly short[] DFA17_accept = DFA.UnpackEncodedString(DFA17_acceptS);
		private static readonly short[] DFA17_special = DFA.UnpackEncodedString(DFA17_specialS);
		private static readonly short[][] DFA17_transition;

		static DFA17()
		{
			int numStates = DFA17_transitionS.Length;
			DFA17_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA17_transition[i] = DFA.UnpackEncodedString(DFA17_transitionS[i]);
			}
		}

		public DFA17( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 17;
			this.eot = DFA17_eot;
			this.eof = DFA17_eof;
			this.min = DFA17_min;
			this.max = DFA17_max;
			this.accept = DFA17_accept;
			this.special = DFA17_special;
			this.transition = DFA17_transition;
		}

		public override string Description { get { return "67:1: orderpropertyname : ( propertyname -> ^( ASC propertyname ) | propertyname ( SPACE ! ( ASC | DESC ) ^) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _param_in_prog55 = new BitSet(new ulong[]{0x50E0084002UL});
		public static readonly BitSet _38_in_prog58 = new BitSet(new ulong[]{0x10E0084000UL});
		public static readonly BitSet _param_in_prog61 = new BitSet(new ulong[]{0x50E0084002UL});
		public static readonly BitSet _orderby_in_param74 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _top_in_param78 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _skip_in_param82 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _filter_in_param86 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_in_param90 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _inlinecount_in_param94 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SKIP_in_skip105 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _INT_in_skip108 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _TOP_in_top119 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _INT_in_top122 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _FILTER_in_filter133 = new BitSet(new ulong[]{0x8E02140B00UL});
		public static readonly BitSet _filterexpression_in_filter136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select146 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _propertyname_in_select149 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _41_in_select152 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _propertyname_in_select155 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _INLINECOUNT_in_inlinecount167 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ALLPAGES_in_inlinecount170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INLINECOUNT_in_inlinecount175 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _NONE_in_inlinecount177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orexpression_in_filterexpression189 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _SPACE_in_filterexpression192 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _OR_in_filterexpression195 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SPACE_in_filterexpression198 = new BitSet(new ulong[]{0x8E02140B00UL});
		public static readonly BitSet _orexpression_in_filterexpression201 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _andexpression_in_orexpression213 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _SPACE_in_orexpression216 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _AND_in_orexpression219 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SPACE_in_orexpression222 = new BitSet(new ulong[]{0x8E02140B00UL});
		public static readonly BitSet _andexpression_in_orexpression225 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _NOT_in_andexpression237 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SPACE_in_andexpression240 = new BitSet(new ulong[]{0x8E00140B00UL});
		public static readonly BitSet _booleanexpression_in_andexpression242 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanexpression_in_andexpression247 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_booleanexpression258 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SPACE_in_booleanexpression261 = new BitSet(new ulong[]{0x4619000UL});
		public static readonly BitSet _filteroperator_in_booleanexpression264 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SPACE_in_booleanexpression267 = new BitSet(new ulong[]{0x8E00140B00UL});
		public static readonly BitSet _atom_in_booleanexpression270 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _implicit_in_booleanexpression274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_atom301 = new BitSet(new ulong[]{0x8E02140B00UL});
		public static readonly BitSet _filterexpression_in_atom303 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _40_in_atom305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_in_atom310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_atom315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_atom321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_in_functioncall330 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_functioncall333 = new BitSet(new ulong[]{0x400140300UL});
		public static readonly BitSet _IDENTIFIER_in_functioncall336 = new BitSet(new ulong[]{0x30000000000UL});
		public static readonly BitSet _constant_in_functioncall340 = new BitSet(new ulong[]{0x30000000000UL});
		public static readonly BitSet _41_in_functioncall344 = new BitSet(new ulong[]{0x400140300UL});
		public static readonly BitSet _IDENTIFIER_in_functioncall347 = new BitSet(new ulong[]{0x30000000000UL});
		public static readonly BitSet _constant_in_functioncall351 = new BitSet(new ulong[]{0x30000000000UL});
		public static readonly BitSet _40_in_functioncall356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDERBY_in_orderby383 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _orderbylist_in_orderby386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist396 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _41_in_orderbylist399 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist402 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _propertyname_in_orderpropertyname413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_orderpropertyname427 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SPACE_in_orderpropertyname430 = new BitSet(new ulong[]{0x440UL});
		public static readonly BitSet _set_in_orderpropertyname433 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_constant450 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _BOOL_in_constant455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_constant459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATETIME_in_constant463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_propertyname473 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _42_in_propertyname477 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _IDENTIFIER_in_propertyname479 = new BitSet(new ulong[]{0x40000000002UL});
	}
	#endregion Follow sets
}

} // namespace  LinqToQuerystring 
