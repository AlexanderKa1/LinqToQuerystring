//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g 2013-03-30 11:43:07

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  LinqToQuerystring 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class LinqToQuerystringParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "ASC", "ASSIGN", "BOOL", "DESC", "EQUALS", "FILTER", "FILTEROPERATOR", "IDENTIFIER", "INT", "NEWLINE", "NOT", "OR", "ORDERBY", "SKIP", "SPACE", "STRING", "TOP", "'&'", "','", "'/'"
	};
	public const int EOF=-1;
	public const int AND=4;
	public const int ASC=5;
	public const int ASSIGN=6;
	public const int BOOL=7;
	public const int DESC=8;
	public const int EQUALS=9;
	public const int FILTER=10;
	public const int FILTEROPERATOR=11;
	public const int IDENTIFIER=12;
	public const int INT=13;
	public const int NEWLINE=14;
	public const int NOT=15;
	public const int OR=16;
	public const int ORDERBY=17;
	public const int SKIP=18;
	public const int SPACE=19;
	public const int STRING=20;
	public const int TOP=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;

	public LinqToQuerystringParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public LinqToQuerystringParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return LinqToQuerystringParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:13:8: public prog : ( param ( '&' ! param )* )* ;
	[GrammarRule("prog")]
	public AstParserRuleReturnScope<object, IToken> prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		TraceIn("prog", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal2 = default(IToken);
		AstParserRuleReturnScope<object, IToken> param1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> param3 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal2_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(13, 25);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:2: ( ( param ( '&' ! param )* )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:4: ( param ( '&' ! param )* )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(14, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:4: ( param ( '&' ! param )* )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==FILTER||(LA2_1>=ORDERBY && LA2_1<=SKIP)||LA2_1==TOP))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:5: param ( '&' ! param )*
					{
					DebugLocation(14, 5);
					PushFollow(Follow._param_in_prog55);
					param1=param();
					PopFollow();

					adaptor.AddChild(root_0, param1.Tree);
					DebugLocation(14, 11);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:11: ( '&' ! param )*
					try { DebugEnterSubRule(1);
					while (true)
					{
						int alt1=2;
						try { DebugEnterDecision(1, false);
						int LA1_1 = input.LA(1);

						if ((LA1_1==22))
						{
							alt1 = 1;
						}


						} finally { DebugExitDecision(1); }
						switch ( alt1 )
						{
						case 1:
							DebugEnterAlt(1);
							// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:12: '&' ! param
							{
							DebugLocation(14, 15);
							char_literal2=(IToken)Match(input,22,Follow._22_in_prog58); 
							DebugLocation(14, 17);
							PushFollow(Follow._param_in_prog61);
							param3=param();
							PopFollow();

							adaptor.AddChild(root_0, param3.Tree);

							}
							break;

						default:
							goto loop1;
						}
					}

					loop1:
						;

					} finally { DebugExitSubRule(1); }


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
		}
		DebugLocation(14, 25);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	partial void EnterRule_param();
	partial void LeaveRule_param();
	// $ANTLR start "param"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:1: param : ( orderby | top | skip | filter ) ;
	[GrammarRule("param")]
	private AstParserRuleReturnScope<object, IToken> param()
	{
		EnterRule_param();
		EnterRule("param", 2);
		TraceIn("param", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> orderby4 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> top5 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> skip6 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filter7 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "param");
		DebugLocation(16, 39);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:7: ( ( orderby | top | skip | filter ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:9: ( orderby | top | skip | filter )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(16, 9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:9: ( orderby | top | skip | filter )
			int alt3=4;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case ORDERBY:
				{
				alt3 = 1;
				}
				break;
			case TOP:
				{
				alt3 = 2;
				}
				break;
			case SKIP:
				{
				alt3 = 3;
				}
				break;
			case FILTER:
				{
				alt3 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:10: orderby
				{
				DebugLocation(16, 10);
				PushFollow(Follow._orderby_in_param74);
				orderby4=orderby();
				PopFollow();

				adaptor.AddChild(root_0, orderby4.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:20: top
				{
				DebugLocation(16, 20);
				PushFollow(Follow._top_in_param78);
				top5=top();
				PopFollow();

				adaptor.AddChild(root_0, top5.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:26: skip
				{
				DebugLocation(16, 26);
				PushFollow(Follow._skip_in_param82);
				skip6=skip();
				PopFollow();

				adaptor.AddChild(root_0, skip6.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:33: filter
				{
				DebugLocation(16, 33);
				PushFollow(Follow._filter_in_param86);
				filter7=filter();
				PopFollow();

				adaptor.AddChild(root_0, filter7.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("param", 2);
			LeaveRule("param", 2);
			LeaveRule_param();
		}
		DebugLocation(16, 39);
		} finally { DebugExitRule(GrammarFileName, "param"); }
		return retval;

	}
	// $ANTLR end "param"

	partial void EnterRule_skip();
	partial void LeaveRule_skip();
	// $ANTLR start "skip"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:18:1: skip : SKIP ^ ( INT )+ ;
	[GrammarRule("skip")]
	private AstParserRuleReturnScope<object, IToken> skip()
	{
		EnterRule_skip();
		EnterRule("skip", 3);
		TraceIn("skip", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SKIP8 = default(IToken);
		IToken INT9 = default(IToken);

		object SKIP8_tree = default(object);
		object INT9_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "skip");
		DebugLocation(18, 13);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:19:2: ( SKIP ^ ( INT )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:19:4: SKIP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(19, 8);
			SKIP8=(IToken)Match(input,SKIP,Follow._SKIP_in_skip97); 
			SKIP8_tree = (object)adaptor.Create(SKIP8);
			root_0 = (object)adaptor.BecomeRoot(SKIP8_tree, root_0);
			DebugLocation(19, 10);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:19:10: ( INT )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==INT))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:19:10: INT
					{
					DebugLocation(19, 10);
					INT9=(IToken)Match(input,INT,Follow._INT_in_skip100); 
					INT9_tree = (object)adaptor.Create(INT9);
					adaptor.AddChild(root_0, INT9_tree);

					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("skip", 3);
			LeaveRule("skip", 3);
			LeaveRule_skip();
		}
		DebugLocation(19, 13);
		} finally { DebugExitRule(GrammarFileName, "skip"); }
		return retval;

	}
	// $ANTLR end "skip"

	partial void EnterRule_top();
	partial void LeaveRule_top();
	// $ANTLR start "top"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:21:1: top : TOP ^ ( INT )+ ;
	[GrammarRule("top")]
	private AstParserRuleReturnScope<object, IToken> top()
	{
		EnterRule_top();
		EnterRule("top", 4);
		TraceIn("top", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken TOP10 = default(IToken);
		IToken INT11 = default(IToken);

		object TOP10_tree = default(object);
		object INT11_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "top");
		DebugLocation(21, 12);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:22:2: ( TOP ^ ( INT )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:22:4: TOP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(22, 7);
			TOP10=(IToken)Match(input,TOP,Follow._TOP_in_top111); 
			TOP10_tree = (object)adaptor.Create(TOP10);
			root_0 = (object)adaptor.BecomeRoot(TOP10_tree, root_0);
			DebugLocation(22, 9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:22:9: ( INT )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==INT))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:22:9: INT
					{
					DebugLocation(22, 9);
					INT11=(IToken)Match(input,INT,Follow._INT_in_top114); 
					INT11_tree = (object)adaptor.Create(INT11);
					adaptor.AddChild(root_0, INT11_tree);

					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top", 4);
			LeaveRule("top", 4);
			LeaveRule_top();
		}
		DebugLocation(22, 12);
		} finally { DebugExitRule(GrammarFileName, "top"); }
		return retval;

	}
	// $ANTLR end "top"

	partial void EnterRule_filter();
	partial void LeaveRule_filter();
	// $ANTLR start "filter"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:24:1: filter : FILTER ^ filterexpression ;
	[GrammarRule("filter")]
	private AstParserRuleReturnScope<object, IToken> filter()
	{
		EnterRule_filter();
		EnterRule("filter", 5);
		TraceIn("filter", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken FILTER12 = default(IToken);
		AstParserRuleReturnScope<object, IToken> filterexpression13 = default(AstParserRuleReturnScope<object, IToken>);

		object FILTER12_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filter");
		DebugLocation(24, 27);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:25:2: ( FILTER ^ filterexpression )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:25:4: FILTER ^ filterexpression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(25, 10);
			FILTER12=(IToken)Match(input,FILTER,Follow._FILTER_in_filter125); 
			FILTER12_tree = (object)adaptor.Create(FILTER12);
			root_0 = (object)adaptor.BecomeRoot(FILTER12_tree, root_0);
			DebugLocation(25, 12);
			PushFollow(Follow._filterexpression_in_filter128);
			filterexpression13=filterexpression();
			PopFollow();

			adaptor.AddChild(root_0, filterexpression13.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filter", 5);
			LeaveRule("filter", 5);
			LeaveRule_filter();
		}
		DebugLocation(25, 27);
		} finally { DebugExitRule(GrammarFileName, "filter"); }
		return retval;

	}
	// $ANTLR end "filter"

	partial void EnterRule_filterexpression();
	partial void LeaveRule_filterexpression();
	// $ANTLR start "filterexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:27:1: filterexpression : orexpression ( SPACE ! OR ^ SPACE ! orexpression )* ;
	[GrammarRule("filterexpression")]
	private AstParserRuleReturnScope<object, IToken> filterexpression()
	{
		EnterRule_filterexpression();
		EnterRule("filterexpression", 6);
		TraceIn("filterexpression", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE15 = default(IToken);
		IToken OR16 = default(IToken);
		IToken SPACE17 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orexpression14 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orexpression18 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE15_tree = default(object);
		object OR16_tree = default(object);
		object SPACE17_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filterexpression");
		DebugLocation(27, 49);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:28:2: ( orexpression ( SPACE ! OR ^ SPACE ! orexpression )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:28:4: orexpression ( SPACE ! OR ^ SPACE ! orexpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(28, 4);
			PushFollow(Follow._orexpression_in_filterexpression138);
			orexpression14=orexpression();
			PopFollow();

			adaptor.AddChild(root_0, orexpression14.Tree);
			DebugLocation(28, 17);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:28:17: ( SPACE ! OR ^ SPACE ! orexpression )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==SPACE))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:28:18: SPACE ! OR ^ SPACE ! orexpression
					{
					DebugLocation(28, 23);
					SPACE15=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression141); 
					DebugLocation(28, 27);
					OR16=(IToken)Match(input,OR,Follow._OR_in_filterexpression144); 
					OR16_tree = (object)adaptor.Create(OR16);
					root_0 = (object)adaptor.BecomeRoot(OR16_tree, root_0);
					DebugLocation(28, 34);
					SPACE17=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression147); 
					DebugLocation(28, 36);
					PushFollow(Follow._orexpression_in_filterexpression150);
					orexpression18=orexpression();
					PopFollow();

					adaptor.AddChild(root_0, orexpression18.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filterexpression", 6);
			LeaveRule("filterexpression", 6);
			LeaveRule_filterexpression();
		}
		DebugLocation(28, 49);
		} finally { DebugExitRule(GrammarFileName, "filterexpression"); }
		return retval;

	}
	// $ANTLR end "filterexpression"

	partial void EnterRule_orexpression();
	partial void LeaveRule_orexpression();
	// $ANTLR start "orexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:30:1: orexpression : andexpression ( SPACE ! AND ^ SPACE ! andexpression )* ;
	[GrammarRule("orexpression")]
	private AstParserRuleReturnScope<object, IToken> orexpression()
	{
		EnterRule_orexpression();
		EnterRule("orexpression", 7);
		TraceIn("orexpression", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE20 = default(IToken);
		IToken AND21 = default(IToken);
		IToken SPACE22 = default(IToken);
		AstParserRuleReturnScope<object, IToken> andexpression19 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> andexpression23 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE20_tree = default(object);
		object AND21_tree = default(object);
		object SPACE22_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orexpression");
		DebugLocation(30, 52);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:31:2: ( andexpression ( SPACE ! AND ^ SPACE ! andexpression )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:31:4: andexpression ( SPACE ! AND ^ SPACE ! andexpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(31, 4);
			PushFollow(Follow._andexpression_in_orexpression162);
			andexpression19=andexpression();
			PopFollow();

			adaptor.AddChild(root_0, andexpression19.Tree);
			DebugLocation(31, 18);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:31:18: ( SPACE ! AND ^ SPACE ! andexpression )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==SPACE))
				{
					int LA7_2 = input.LA(2);

					if ((LA7_2==AND))
					{
						alt7 = 1;
					}


				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:31:19: SPACE ! AND ^ SPACE ! andexpression
					{
					DebugLocation(31, 24);
					SPACE20=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression165); 
					DebugLocation(31, 29);
					AND21=(IToken)Match(input,AND,Follow._AND_in_orexpression168); 
					AND21_tree = (object)adaptor.Create(AND21);
					root_0 = (object)adaptor.BecomeRoot(AND21_tree, root_0);
					DebugLocation(31, 36);
					SPACE22=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression171); 
					DebugLocation(31, 38);
					PushFollow(Follow._andexpression_in_orexpression174);
					andexpression23=andexpression();
					PopFollow();

					adaptor.AddChild(root_0, andexpression23.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orexpression", 7);
			LeaveRule("orexpression", 7);
			LeaveRule_orexpression();
		}
		DebugLocation(31, 52);
		} finally { DebugExitRule(GrammarFileName, "orexpression"); }
		return retval;

	}
	// $ANTLR end "orexpression"

	partial void EnterRule_andexpression();
	partial void LeaveRule_andexpression();
	// $ANTLR start "andexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:33:1: andexpression : ( NOT ^)* comparisonexpression ( SPACE ! NOT ^ SPACE ! comparisonexpression )* ;
	[GrammarRule("andexpression")]
	private AstParserRuleReturnScope<object, IToken> andexpression()
	{
		EnterRule_andexpression();
		EnterRule("andexpression", 8);
		TraceIn("andexpression", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NOT24 = default(IToken);
		IToken SPACE26 = default(IToken);
		IToken NOT27 = default(IToken);
		IToken SPACE28 = default(IToken);
		AstParserRuleReturnScope<object, IToken> comparisonexpression25 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> comparisonexpression29 = default(AstParserRuleReturnScope<object, IToken>);

		object NOT24_tree = default(object);
		object SPACE26_tree = default(object);
		object NOT27_tree = default(object);
		object SPACE28_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "andexpression");
		DebugLocation(33, 74);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:2: ( ( NOT ^)* comparisonexpression ( SPACE ! NOT ^ SPACE ! comparisonexpression )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:4: ( NOT ^)* comparisonexpression ( SPACE ! NOT ^ SPACE ! comparisonexpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(34, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:4: ( NOT ^)*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==NOT))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:5: NOT ^
					{
					DebugLocation(34, 8);
					NOT24=(IToken)Match(input,NOT,Follow._NOT_in_andexpression187); 
					NOT24_tree = (object)adaptor.Create(NOT24);
					root_0 = (object)adaptor.BecomeRoot(NOT24_tree, root_0);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(34, 12);
			PushFollow(Follow._comparisonexpression_in_andexpression192);
			comparisonexpression25=comparisonexpression();
			PopFollow();

			adaptor.AddChild(root_0, comparisonexpression25.Tree);
			DebugLocation(34, 33);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:33: ( SPACE ! NOT ^ SPACE ! comparisonexpression )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==SPACE))
				{
					int LA9_2 = input.LA(2);

					if ((LA9_2==NOT))
					{
						alt9 = 1;
					}


				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:34: SPACE ! NOT ^ SPACE ! comparisonexpression
					{
					DebugLocation(34, 39);
					SPACE26=(IToken)Match(input,SPACE,Follow._SPACE_in_andexpression195); 
					DebugLocation(34, 44);
					NOT27=(IToken)Match(input,NOT,Follow._NOT_in_andexpression198); 
					NOT27_tree = (object)adaptor.Create(NOT27);
					root_0 = (object)adaptor.BecomeRoot(NOT27_tree, root_0);
					DebugLocation(34, 51);
					SPACE28=(IToken)Match(input,SPACE,Follow._SPACE_in_andexpression201); 
					DebugLocation(34, 53);
					PushFollow(Follow._comparisonexpression_in_andexpression204);
					comparisonexpression29=comparisonexpression();
					PopFollow();

					adaptor.AddChild(root_0, comparisonexpression29.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andexpression", 8);
			LeaveRule("andexpression", 8);
			LeaveRule_andexpression();
		}
		DebugLocation(34, 74);
		} finally { DebugExitRule(GrammarFileName, "andexpression"); }
		return retval;

	}
	// $ANTLR end "andexpression"

	partial void EnterRule_comparisonexpression();
	partial void LeaveRule_comparisonexpression();
	// $ANTLR start "comparisonexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:1: comparisonexpression : propertyname SPACE ! EQUALS ^ SPACE ! ( ( INT )+ | BOOL | STRING ) ;
	[GrammarRule("comparisonexpression")]
	private AstParserRuleReturnScope<object, IToken> comparisonexpression()
	{
		EnterRule_comparisonexpression();
		EnterRule("comparisonexpression", 9);
		TraceIn("comparisonexpression", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE31 = default(IToken);
		IToken EQUALS32 = default(IToken);
		IToken SPACE33 = default(IToken);
		IToken INT34 = default(IToken);
		IToken BOOL35 = default(IToken);
		IToken STRING36 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname30 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE31_tree = default(object);
		object EQUALS32_tree = default(object);
		object SPACE33_tree = default(object);
		object INT34_tree = default(object);
		object BOOL35_tree = default(object);
		object STRING36_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "comparisonexpression");
		DebugLocation(36, 60);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:37:2: ( propertyname SPACE ! EQUALS ^ SPACE ! ( ( INT )+ | BOOL | STRING ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:37:4: propertyname SPACE ! EQUALS ^ SPACE ! ( ( INT )+ | BOOL | STRING )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(37, 4);
			PushFollow(Follow._propertyname_in_comparisonexpression217);
			propertyname30=propertyname();
			PopFollow();

			adaptor.AddChild(root_0, propertyname30.Tree);
			DebugLocation(37, 22);
			SPACE31=(IToken)Match(input,SPACE,Follow._SPACE_in_comparisonexpression219); 
			DebugLocation(37, 30);
			EQUALS32=(IToken)Match(input,EQUALS,Follow._EQUALS_in_comparisonexpression222); 
			EQUALS32_tree = (object)adaptor.Create(EQUALS32);
			root_0 = (object)adaptor.BecomeRoot(EQUALS32_tree, root_0);
			DebugLocation(37, 37);
			SPACE33=(IToken)Match(input,SPACE,Follow._SPACE_in_comparisonexpression225); 
			DebugLocation(37, 39);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:37:39: ( ( INT )+ | BOOL | STRING )
			int alt11=3;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			switch (input.LA(1))
			{
			case INT:
				{
				alt11 = 1;
				}
				break;
			case BOOL:
				{
				alt11 = 2;
				}
				break;
			case STRING:
				{
				alt11 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:37:40: ( INT )+
				{
				DebugLocation(37, 40);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:37:40: ( INT )+
				int cnt10=0;
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_1 = input.LA(1);

					if ((LA10_1==INT))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch (alt10)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:37:40: INT
						{
						DebugLocation(37, 40);
						INT34=(IToken)Match(input,INT,Follow._INT_in_comparisonexpression229); 
						INT34_tree = (object)adaptor.Create(INT34);
						adaptor.AddChild(root_0, INT34_tree);

						}
						break;

					default:
						if (cnt10 >= 1)
							goto loop10;

						EarlyExitException eee10 = new EarlyExitException( 10, input );
						DebugRecognitionException(eee10);
						throw eee10;
					}
					cnt10++;
				}
				loop10:
					;

				} finally { DebugExitSubRule(10); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:37:47: BOOL
				{
				DebugLocation(37, 47);
				BOOL35=(IToken)Match(input,BOOL,Follow._BOOL_in_comparisonexpression234); 
				BOOL35_tree = (object)adaptor.Create(BOOL35);
				adaptor.AddChild(root_0, BOOL35_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:37:54: STRING
				{
				DebugLocation(37, 54);
				STRING36=(IToken)Match(input,STRING,Follow._STRING_in_comparisonexpression238); 
				STRING36_tree = (object)adaptor.Create(STRING36);
				adaptor.AddChild(root_0, STRING36_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("comparisonexpression", 9);
			LeaveRule("comparisonexpression", 9);
			LeaveRule_comparisonexpression();
		}
		DebugLocation(37, 60);
		} finally { DebugExitRule(GrammarFileName, "comparisonexpression"); }
		return retval;

	}
	// $ANTLR end "comparisonexpression"

	partial void EnterRule_orderby();
	partial void LeaveRule_orderby();
	// $ANTLR start "orderby"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:39:1: orderby : ORDERBY ^ orderbylist ;
	[GrammarRule("orderby")]
	private AstParserRuleReturnScope<object, IToken> orderby()
	{
		EnterRule_orderby();
		EnterRule("orderby", 10);
		TraceIn("orderby", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ORDERBY37 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderbylist38 = default(AstParserRuleReturnScope<object, IToken>);

		object ORDERBY37_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderby");
		DebugLocation(39, 23);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:40:2: ( ORDERBY ^ orderbylist )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:40:4: ORDERBY ^ orderbylist
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(40, 11);
			ORDERBY37=(IToken)Match(input,ORDERBY,Follow._ORDERBY_in_orderby248); 
			ORDERBY37_tree = (object)adaptor.Create(ORDERBY37);
			root_0 = (object)adaptor.BecomeRoot(ORDERBY37_tree, root_0);
			DebugLocation(40, 13);
			PushFollow(Follow._orderbylist_in_orderby251);
			orderbylist38=orderbylist();
			PopFollow();

			adaptor.AddChild(root_0, orderbylist38.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby", 10);
			LeaveRule("orderby", 10);
			LeaveRule_orderby();
		}
		DebugLocation(40, 23);
		} finally { DebugExitRule(GrammarFileName, "orderby"); }
		return retval;

	}
	// $ANTLR end "orderby"

	partial void EnterRule_orderbylist();
	partial void LeaveRule_orderbylist();
	// $ANTLR start "orderbylist"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:42:1: orderbylist : orderpropertyname ( ',' ! orderpropertyname )* ;
	[GrammarRule("orderbylist")]
	private AstParserRuleReturnScope<object, IToken> orderbylist()
	{
		EnterRule_orderbylist();
		EnterRule("orderbylist", 11);
		TraceIn("orderbylist", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal40 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderpropertyname39 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orderpropertyname41 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal40_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderbylist");
		DebugLocation(42, 46);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:43:2: ( orderpropertyname ( ',' ! orderpropertyname )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:43:4: orderpropertyname ( ',' ! orderpropertyname )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(43, 4);
			PushFollow(Follow._orderpropertyname_in_orderbylist261);
			orderpropertyname39=orderpropertyname();
			PopFollow();

			adaptor.AddChild(root_0, orderpropertyname39.Tree);
			DebugLocation(43, 22);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:43:22: ( ',' ! orderpropertyname )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1==23))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:43:23: ',' ! orderpropertyname
					{
					DebugLocation(43, 26);
					char_literal40=(IToken)Match(input,23,Follow._23_in_orderbylist264); 
					DebugLocation(43, 28);
					PushFollow(Follow._orderpropertyname_in_orderbylist267);
					orderpropertyname41=orderpropertyname();
					PopFollow();

					adaptor.AddChild(root_0, orderpropertyname41.Tree);

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderbylist", 11);
			LeaveRule("orderbylist", 11);
			LeaveRule_orderbylist();
		}
		DebugLocation(43, 46);
		} finally { DebugExitRule(GrammarFileName, "orderbylist"); }
		return retval;

	}
	// $ANTLR end "orderbylist"

	partial void EnterRule_orderpropertyname();
	partial void LeaveRule_orderpropertyname();
	// $ANTLR start "orderpropertyname"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:45:1: orderpropertyname : ( propertyname -> ^( ASC propertyname ) | propertyname ( SPACE ! ( ASC | DESC ) ^) );
	[GrammarRule("orderpropertyname")]
	private AstParserRuleReturnScope<object, IToken> orderpropertyname()
	{
		EnterRule_orderpropertyname();
		EnterRule("orderpropertyname", 12);
		TraceIn("orderpropertyname", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE44 = default(IToken);
		IToken set45 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname42 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname43 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE44_tree = default(object);
		object set45_tree = default(object);
		RewriteRuleSubtreeStream stream_propertyname=new RewriteRuleSubtreeStream(adaptor,"rule propertyname");
		try { DebugEnterRule(GrammarFileName, "orderpropertyname");
		DebugLocation(45, 39);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:46:2: ( propertyname -> ^( ASC propertyname ) | propertyname ( SPACE ! ( ASC | DESC ) ^) )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			try
			{
				alt13 = dfa13.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:46:4: propertyname
				{
				DebugLocation(46, 4);
				PushFollow(Follow._propertyname_in_orderpropertyname278);
				propertyname42=propertyname();
				PopFollow();

				stream_propertyname.Add(propertyname42.Tree);


				{
				// AST REWRITE
				// elements: propertyname
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 46:17: -> ^( ASC propertyname )
				{
					DebugLocation(46, 20);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:46:20: ^( ASC propertyname )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(46, 22);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ASC, "ASC"), root_1);

					DebugLocation(46, 26);
					adaptor.AddChild(root_1, stream_propertyname.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:47:5: propertyname ( SPACE ! ( ASC | DESC ) ^)
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(47, 5);
				PushFollow(Follow._propertyname_in_orderpropertyname292);
				propertyname43=propertyname();
				PopFollow();

				adaptor.AddChild(root_0, propertyname43.Tree);
				DebugLocation(47, 18);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:47:18: ( SPACE ! ( ASC | DESC ) ^)
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:47:19: SPACE ! ( ASC | DESC ) ^
				{
				DebugLocation(47, 24);
				SPACE44=(IToken)Match(input,SPACE,Follow._SPACE_in_orderpropertyname295); 
				DebugLocation(47, 38);

				set45=(IToken)input.LT(1);
				set45=(IToken)input.LT(1);
				if (input.LA(1)==ASC||input.LA(1)==DESC)
				{
					input.Consume();
					root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set45), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderpropertyname", 12);
			LeaveRule("orderpropertyname", 12);
			LeaveRule_orderpropertyname();
		}
		DebugLocation(47, 39);
		} finally { DebugExitRule(GrammarFileName, "orderpropertyname"); }
		return retval;

	}
	// $ANTLR end "orderpropertyname"

	partial void EnterRule_propertyname();
	partial void LeaveRule_propertyname();
	// $ANTLR start "propertyname"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:49:1: propertyname : IDENTIFIER ( '/' IDENTIFIER )* ;
	[GrammarRule("propertyname")]
	private AstParserRuleReturnScope<object, IToken> propertyname()
	{
		EnterRule_propertyname();
		EnterRule("propertyname", 13);
		TraceIn("propertyname", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken IDENTIFIER46 = default(IToken);
		IToken char_literal47 = default(IToken);
		IToken IDENTIFIER48 = default(IToken);

		object IDENTIFIER46_tree = default(object);
		object char_literal47_tree = default(object);
		object IDENTIFIER48_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "propertyname");
		DebugLocation(49, 32);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:50:2: ( IDENTIFIER ( '/' IDENTIFIER )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:50:4: IDENTIFIER ( '/' IDENTIFIER )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(50, 4);
			IDENTIFIER46=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_propertyname315); 
			IDENTIFIER46_tree = (object)adaptor.Create(IDENTIFIER46);
			adaptor.AddChild(root_0, IDENTIFIER46_tree);
			DebugLocation(50, 16);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:50:16: ( '/' IDENTIFIER )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==24))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:50:17: '/' IDENTIFIER
					{
					DebugLocation(50, 17);
					char_literal47=(IToken)Match(input,24,Follow._24_in_propertyname319); 
					char_literal47_tree = (object)adaptor.Create(char_literal47);
					adaptor.AddChild(root_0, char_literal47_tree);
					DebugLocation(50, 21);
					IDENTIFIER48=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_propertyname321); 
					IDENTIFIER48_tree = (object)adaptor.Create(IDENTIFIER48);
					adaptor.AddChild(root_0, IDENTIFIER48_tree);

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyname", 13);
			LeaveRule("propertyname", 13);
			LeaveRule_propertyname();
		}
		DebugLocation(50, 32);
		} finally { DebugExitRule(GrammarFileName, "propertyname"); }
		return retval;

	}
	// $ANTLR end "propertyname"
	#endregion Rules


	#region DFA
	private DFA13 dfa13;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa13 = new DFA13( this );
	}

	private class DFA13 : DFA
	{
		private const string DFA13_eotS =
			"\x6\xFFFF";
		private const string DFA13_eofS =
			"\x1\xFFFF\x1\x3\x3\xFFFF\x1\x3";
		private const string DFA13_minS =
			"\x1\xC\x1\xA\x1\xC\x2\xFFFF\x1\xA";
		private const string DFA13_maxS =
			"\x1\xC\x1\x18\x1\xC\x2\xFFFF\x1\x18";
		private const string DFA13_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA13_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA13_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x6\xFFFF\x2\x3\x1\x4\x1\xFFFF\x3\x3\x1\x2",
				"\x1\x5",
				"",
				"",
				"\x1\x3\x6\xFFFF\x2\x3\x1\x4\x1\xFFFF\x3\x3\x1\x2"
			};

		private static readonly short[] DFA13_eot = DFA.UnpackEncodedString(DFA13_eotS);
		private static readonly short[] DFA13_eof = DFA.UnpackEncodedString(DFA13_eofS);
		private static readonly char[] DFA13_min = DFA.UnpackEncodedStringToUnsignedChars(DFA13_minS);
		private static readonly char[] DFA13_max = DFA.UnpackEncodedStringToUnsignedChars(DFA13_maxS);
		private static readonly short[] DFA13_accept = DFA.UnpackEncodedString(DFA13_acceptS);
		private static readonly short[] DFA13_special = DFA.UnpackEncodedString(DFA13_specialS);
		private static readonly short[][] DFA13_transition;

		static DFA13()
		{
			int numStates = DFA13_transitionS.Length;
			DFA13_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA13_transition[i] = DFA.UnpackEncodedString(DFA13_transitionS[i]);
			}
		}

		public DFA13( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 13;
			this.eot = DFA13_eot;
			this.eof = DFA13_eof;
			this.min = DFA13_min;
			this.max = DFA13_max;
			this.accept = DFA13_accept;
			this.special = DFA13_special;
			this.transition = DFA13_transition;
		}

		public override string Description { get { return "45:1: orderpropertyname : ( propertyname -> ^( ASC propertyname ) | propertyname ( SPACE ! ( ASC | DESC ) ^) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _param_in_prog55 = new BitSet(new ulong[]{0x660402UL});
		public static readonly BitSet _22_in_prog58 = new BitSet(new ulong[]{0x260400UL});
		public static readonly BitSet _param_in_prog61 = new BitSet(new ulong[]{0x660402UL});
		public static readonly BitSet _orderby_in_param74 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _top_in_param78 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _skip_in_param82 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _filter_in_param86 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SKIP_in_skip97 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INT_in_skip100 = new BitSet(new ulong[]{0x2002UL});
		public static readonly BitSet _TOP_in_top111 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INT_in_top114 = new BitSet(new ulong[]{0x2002UL});
		public static readonly BitSet _FILTER_in_filter125 = new BitSet(new ulong[]{0x9000UL});
		public static readonly BitSet _filterexpression_in_filter128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orexpression_in_filterexpression138 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _SPACE_in_filterexpression141 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _OR_in_filterexpression144 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _SPACE_in_filterexpression147 = new BitSet(new ulong[]{0x9000UL});
		public static readonly BitSet _orexpression_in_filterexpression150 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _andexpression_in_orexpression162 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _SPACE_in_orexpression165 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _AND_in_orexpression168 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _SPACE_in_orexpression171 = new BitSet(new ulong[]{0x9000UL});
		public static readonly BitSet _andexpression_in_orexpression174 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _NOT_in_andexpression187 = new BitSet(new ulong[]{0x9000UL});
		public static readonly BitSet _comparisonexpression_in_andexpression192 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _SPACE_in_andexpression195 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _NOT_in_andexpression198 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _SPACE_in_andexpression201 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _comparisonexpression_in_andexpression204 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _propertyname_in_comparisonexpression217 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _SPACE_in_comparisonexpression219 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _EQUALS_in_comparisonexpression222 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _SPACE_in_comparisonexpression225 = new BitSet(new ulong[]{0x102080UL});
		public static readonly BitSet _INT_in_comparisonexpression229 = new BitSet(new ulong[]{0x2002UL});
		public static readonly BitSet _BOOL_in_comparisonexpression234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_comparisonexpression238 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDERBY_in_orderby248 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _orderbylist_in_orderby251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist261 = new BitSet(new ulong[]{0x800002UL});
		public static readonly BitSet _23_in_orderbylist264 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist267 = new BitSet(new ulong[]{0x800002UL});
		public static readonly BitSet _propertyname_in_orderpropertyname278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_orderpropertyname292 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _SPACE_in_orderpropertyname295 = new BitSet(new ulong[]{0x120UL});
		public static readonly BitSet _set_in_orderpropertyname298 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_propertyname315 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _24_in_propertyname319 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _IDENTIFIER_in_propertyname321 = new BitSet(new ulong[]{0x1000002UL});
	}
	#endregion Follow sets
}

} // namespace  LinqToQuerystring 
