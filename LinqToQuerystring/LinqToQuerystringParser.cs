//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g 2013-05-28 18:52:07

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  LinqToQuerystring 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class LinqToQuerystringParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALLPAGES", "AND", "ASC", "ASSIGN", "BOOL", "DATETIME", "DESC", "DYNAMICIDENTIFIER", "ENDSWITH", "EQUALS", "ESC_SEQ", "FILTER", "GREATERTHAN", "GREATERTHANOREQUAL", "HEX_DIGIT", "IDENTIFIER", "INLINECOUNT", "INT", "LESSTHAN", "LESSTHANOREQUAL", "NEWLINE", "NONE", "NOT", "NOTEQUALS", "OCTAL_ESC", "OR", "ORDERBY", "SELECT", "SKIP", "SPACE", "STARTSWITH", "STRING", "SUBSTRINGOF", "TOLOWER", "TOP", "UNICODE_ESC", "'&'", "'('", "')'", "','", "'/'"
	};
	public const int EOF=-1;
	public const int ALLPAGES=4;
	public const int AND=5;
	public const int ASC=6;
	public const int ASSIGN=7;
	public const int BOOL=8;
	public const int DATETIME=9;
	public const int DESC=10;
	public const int DYNAMICIDENTIFIER=11;
	public const int ENDSWITH=12;
	public const int EQUALS=13;
	public const int ESC_SEQ=14;
	public const int FILTER=15;
	public const int GREATERTHAN=16;
	public const int GREATERTHANOREQUAL=17;
	public const int HEX_DIGIT=18;
	public const int IDENTIFIER=19;
	public const int INLINECOUNT=20;
	public const int INT=21;
	public const int LESSTHAN=22;
	public const int LESSTHANOREQUAL=23;
	public const int NEWLINE=24;
	public const int NONE=25;
	public const int NOT=26;
	public const int NOTEQUALS=27;
	public const int OCTAL_ESC=28;
	public const int OR=29;
	public const int ORDERBY=30;
	public const int SELECT=31;
	public const int SKIP=32;
	public const int SPACE=33;
	public const int STARTSWITH=34;
	public const int STRING=35;
	public const int SUBSTRINGOF=36;
	public const int TOLOWER=37;
	public const int TOP=38;
	public const int UNICODE_ESC=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;

	public LinqToQuerystringParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public LinqToQuerystringParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return LinqToQuerystringParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:29:8: public prog : ( param ( '&' ! param )* )* ;
	[GrammarRule("prog")]
	public AstParserRuleReturnScope<object, IToken> prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		TraceIn("prog", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal2 = default(IToken);
		AstParserRuleReturnScope<object, IToken> param1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> param3 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal2_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(29, 25);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:30:2: ( ( param ( '&' ! param )* )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:30:4: ( param ( '&' ! param )* )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(30, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:30:4: ( param ( '&' ! param )* )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==FILTER||LA2_1==INLINECOUNT||(LA2_1>=ORDERBY && LA2_1<=SKIP)||LA2_1==TOP))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:30:5: param ( '&' ! param )*
					{
					DebugLocation(30, 5);
					PushFollow(Follow._param_in_prog73);
					param1=param();
					PopFollow();

					adaptor.AddChild(root_0, param1.Tree);
					DebugLocation(30, 11);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:30:11: ( '&' ! param )*
					try { DebugEnterSubRule(1);
					while (true)
					{
						int alt1=2;
						try { DebugEnterDecision(1, false);
						int LA1_1 = input.LA(1);

						if ((LA1_1==40))
						{
							alt1 = 1;
						}


						} finally { DebugExitDecision(1); }
						switch ( alt1 )
						{
						case 1:
							DebugEnterAlt(1);
							// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:30:12: '&' ! param
							{
							DebugLocation(30, 15);
							char_literal2=(IToken)Match(input,40,Follow._40_in_prog76); 
							DebugLocation(30, 17);
							PushFollow(Follow._param_in_prog79);
							param3=param();
							PopFollow();

							adaptor.AddChild(root_0, param3.Tree);

							}
							break;

						default:
							goto loop1;
						}
					}

					loop1:
						;

					} finally { DebugExitSubRule(1); }


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
		}
		DebugLocation(30, 25);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	partial void EnterRule_param();
	partial void LeaveRule_param();
	// $ANTLR start "param"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:32:1: param : ( orderby | top | skip | filter | select | inlinecount ) ;
	[GrammarRule("param")]
	private AstParserRuleReturnScope<object, IToken> param()
	{
		EnterRule_param();
		EnterRule("param", 2);
		TraceIn("param", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> orderby4 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> top5 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> skip6 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filter7 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> select8 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> inlinecount9 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "param");
		DebugLocation(32, 62);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:32:7: ( ( orderby | top | skip | filter | select | inlinecount ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:32:9: ( orderby | top | skip | filter | select | inlinecount )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(32, 9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:32:9: ( orderby | top | skip | filter | select | inlinecount )
			int alt3=6;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case ORDERBY:
				{
				alt3 = 1;
				}
				break;
			case TOP:
				{
				alt3 = 2;
				}
				break;
			case SKIP:
				{
				alt3 = 3;
				}
				break;
			case FILTER:
				{
				alt3 = 4;
				}
				break;
			case SELECT:
				{
				alt3 = 5;
				}
				break;
			case INLINECOUNT:
				{
				alt3 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:32:10: orderby
				{
				DebugLocation(32, 10);
				PushFollow(Follow._orderby_in_param92);
				orderby4=orderby();
				PopFollow();

				adaptor.AddChild(root_0, orderby4.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:32:20: top
				{
				DebugLocation(32, 20);
				PushFollow(Follow._top_in_param96);
				top5=top();
				PopFollow();

				adaptor.AddChild(root_0, top5.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:32:26: skip
				{
				DebugLocation(32, 26);
				PushFollow(Follow._skip_in_param100);
				skip6=skip();
				PopFollow();

				adaptor.AddChild(root_0, skip6.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:32:33: filter
				{
				DebugLocation(32, 33);
				PushFollow(Follow._filter_in_param104);
				filter7=filter();
				PopFollow();

				adaptor.AddChild(root_0, filter7.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:32:42: select
				{
				DebugLocation(32, 42);
				PushFollow(Follow._select_in_param108);
				select8=select();
				PopFollow();

				adaptor.AddChild(root_0, select8.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:32:51: inlinecount
				{
				DebugLocation(32, 51);
				PushFollow(Follow._inlinecount_in_param112);
				inlinecount9=inlinecount();
				PopFollow();

				adaptor.AddChild(root_0, inlinecount9.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("param", 2);
			LeaveRule("param", 2);
			LeaveRule_param();
		}
		DebugLocation(32, 62);
		} finally { DebugExitRule(GrammarFileName, "param"); }
		return retval;

	}
	// $ANTLR end "param"

	partial void EnterRule_skip();
	partial void LeaveRule_skip();
	// $ANTLR start "skip"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:1: skip : SKIP ^ ( INT )+ ;
	[GrammarRule("skip")]
	private AstParserRuleReturnScope<object, IToken> skip()
	{
		EnterRule_skip();
		EnterRule("skip", 3);
		TraceIn("skip", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SKIP10 = default(IToken);
		IToken INT11 = default(IToken);

		object SKIP10_tree = default(object);
		object INT11_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "skip");
		DebugLocation(34, 13);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:35:2: ( SKIP ^ ( INT )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:35:4: SKIP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(35, 8);
			SKIP10=(IToken)Match(input,SKIP,Follow._SKIP_in_skip123); 
			SKIP10_tree = (object)adaptor.Create(SKIP10);
			root_0 = (object)adaptor.BecomeRoot(SKIP10_tree, root_0);
			DebugLocation(35, 10);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:35:10: ( INT )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==INT))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:35:10: INT
					{
					DebugLocation(35, 10);
					INT11=(IToken)Match(input,INT,Follow._INT_in_skip126); 
					INT11_tree = (object)adaptor.Create(INT11);
					adaptor.AddChild(root_0, INT11_tree);

					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("skip", 3);
			LeaveRule("skip", 3);
			LeaveRule_skip();
		}
		DebugLocation(35, 13);
		} finally { DebugExitRule(GrammarFileName, "skip"); }
		return retval;

	}
	// $ANTLR end "skip"

	partial void EnterRule_top();
	partial void LeaveRule_top();
	// $ANTLR start "top"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:37:1: top : TOP ^ ( INT )+ ;
	[GrammarRule("top")]
	private AstParserRuleReturnScope<object, IToken> top()
	{
		EnterRule_top();
		EnterRule("top", 4);
		TraceIn("top", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken TOP12 = default(IToken);
		IToken INT13 = default(IToken);

		object TOP12_tree = default(object);
		object INT13_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "top");
		DebugLocation(37, 12);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:38:2: ( TOP ^ ( INT )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:38:4: TOP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(38, 7);
			TOP12=(IToken)Match(input,TOP,Follow._TOP_in_top137); 
			TOP12_tree = (object)adaptor.Create(TOP12);
			root_0 = (object)adaptor.BecomeRoot(TOP12_tree, root_0);
			DebugLocation(38, 9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:38:9: ( INT )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==INT))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:38:9: INT
					{
					DebugLocation(38, 9);
					INT13=(IToken)Match(input,INT,Follow._INT_in_top140); 
					INT13_tree = (object)adaptor.Create(INT13);
					adaptor.AddChild(root_0, INT13_tree);

					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top", 4);
			LeaveRule("top", 4);
			LeaveRule_top();
		}
		DebugLocation(38, 12);
		} finally { DebugExitRule(GrammarFileName, "top"); }
		return retval;

	}
	// $ANTLR end "top"

	partial void EnterRule_filter();
	partial void LeaveRule_filter();
	// $ANTLR start "filter"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:40:1: filter : FILTER ^ filterexpression ;
	[GrammarRule("filter")]
	private AstParserRuleReturnScope<object, IToken> filter()
	{
		EnterRule_filter();
		EnterRule("filter", 5);
		TraceIn("filter", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken FILTER14 = default(IToken);
		AstParserRuleReturnScope<object, IToken> filterexpression15 = default(AstParserRuleReturnScope<object, IToken>);

		object FILTER14_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filter");
		DebugLocation(40, 27);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:41:2: ( FILTER ^ filterexpression )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:41:4: FILTER ^ filterexpression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(41, 10);
			FILTER14=(IToken)Match(input,FILTER,Follow._FILTER_in_filter151); 
			FILTER14_tree = (object)adaptor.Create(FILTER14);
			root_0 = (object)adaptor.BecomeRoot(FILTER14_tree, root_0);
			DebugLocation(41, 12);
			PushFollow(Follow._filterexpression_in_filter154);
			filterexpression15=filterexpression();
			PopFollow();

			adaptor.AddChild(root_0, filterexpression15.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filter", 5);
			LeaveRule("filter", 5);
			LeaveRule_filter();
		}
		DebugLocation(41, 27);
		} finally { DebugExitRule(GrammarFileName, "filter"); }
		return retval;

	}
	// $ANTLR end "filter"

	partial void EnterRule_select();
	partial void LeaveRule_select();
	// $ANTLR start "select"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:43:1: select : SELECT ^ propertyname ( ',' ! propertyname )* ;
	[GrammarRule("select")]
	private AstParserRuleReturnScope<object, IToken> select()
	{
		EnterRule_select();
		EnterRule("select", 6);
		TraceIn("select", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SELECT16 = default(IToken);
		IToken char_literal18 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname17 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname19 = default(AstParserRuleReturnScope<object, IToken>);

		object SELECT16_tree = default(object);
		object char_literal18_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "select");
		DebugLocation(43, 44);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:2: ( SELECT ^ propertyname ( ',' ! propertyname )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:4: SELECT ^ propertyname ( ',' ! propertyname )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(44, 10);
			SELECT16=(IToken)Match(input,SELECT,Follow._SELECT_in_select164); 
			SELECT16_tree = (object)adaptor.Create(SELECT16);
			root_0 = (object)adaptor.BecomeRoot(SELECT16_tree, root_0);
			DebugLocation(44, 12);
			PushFollow(Follow._propertyname_in_select167);
			propertyname17=propertyname();
			PopFollow();

			adaptor.AddChild(root_0, propertyname17.Tree);
			DebugLocation(44, 25);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:25: ( ',' ! propertyname )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==43))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:26: ',' ! propertyname
					{
					DebugLocation(44, 29);
					char_literal18=(IToken)Match(input,43,Follow._43_in_select170); 
					DebugLocation(44, 31);
					PushFollow(Follow._propertyname_in_select173);
					propertyname19=propertyname();
					PopFollow();

					adaptor.AddChild(root_0, propertyname19.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select", 6);
			LeaveRule("select", 6);
			LeaveRule_select();
		}
		DebugLocation(44, 44);
		} finally { DebugExitRule(GrammarFileName, "select"); }
		return retval;

	}
	// $ANTLR end "select"

	partial void EnterRule_inlinecount();
	partial void LeaveRule_inlinecount();
	// $ANTLR start "inlinecount"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:46:1: inlinecount : ( INLINECOUNT ^ ALLPAGES | INLINECOUNT NONE ->);
	[GrammarRule("inlinecount")]
	private AstParserRuleReturnScope<object, IToken> inlinecount()
	{
		EnterRule_inlinecount();
		EnterRule("inlinecount", 7);
		TraceIn("inlinecount", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken INLINECOUNT20 = default(IToken);
		IToken ALLPAGES21 = default(IToken);
		IToken INLINECOUNT22 = default(IToken);
		IToken NONE23 = default(IToken);

		object INLINECOUNT20_tree = default(object);
		object ALLPAGES21_tree = default(object);
		object INLINECOUNT22_tree = default(object);
		object NONE23_tree = default(object);
		RewriteRuleITokenStream stream_INLINECOUNT=new RewriteRuleITokenStream(adaptor,"token INLINECOUNT");
		RewriteRuleITokenStream stream_NONE=new RewriteRuleITokenStream(adaptor,"token NONE");
		try { DebugEnterRule(GrammarFileName, "inlinecount");
		DebugLocation(46, 22);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:47:2: ( INLINECOUNT ^ ALLPAGES | INLINECOUNT NONE ->)
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1==INLINECOUNT))
			{
				int LA7_2 = input.LA(2);

				if ((LA7_2==ALLPAGES))
				{
					alt7 = 1;
				}
				else if ((LA7_2==NONE))
				{
					alt7 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:47:4: INLINECOUNT ^ ALLPAGES
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(47, 15);
				INLINECOUNT20=(IToken)Match(input,INLINECOUNT,Follow._INLINECOUNT_in_inlinecount185); 
				INLINECOUNT20_tree = (object)adaptor.Create(INLINECOUNT20);
				root_0 = (object)adaptor.BecomeRoot(INLINECOUNT20_tree, root_0);
				DebugLocation(47, 17);
				ALLPAGES21=(IToken)Match(input,ALLPAGES,Follow._ALLPAGES_in_inlinecount188); 
				ALLPAGES21_tree = (object)adaptor.Create(ALLPAGES21);
				adaptor.AddChild(root_0, ALLPAGES21_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:4: INLINECOUNT NONE
				{
				DebugLocation(48, 4);
				INLINECOUNT22=(IToken)Match(input,INLINECOUNT,Follow._INLINECOUNT_in_inlinecount193);  
				stream_INLINECOUNT.Add(INLINECOUNT22);

				DebugLocation(48, 16);
				NONE23=(IToken)Match(input,NONE,Follow._NONE_in_inlinecount195);  
				stream_NONE.Add(NONE23);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 48:21: ->
				{
					DebugLocation(48, 23);
					root_0 = null;
				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inlinecount", 7);
			LeaveRule("inlinecount", 7);
			LeaveRule_inlinecount();
		}
		DebugLocation(48, 22);
		} finally { DebugExitRule(GrammarFileName, "inlinecount"); }
		return retval;

	}
	// $ANTLR end "inlinecount"

	partial void EnterRule_filterexpression();
	partial void LeaveRule_filterexpression();
	// $ANTLR start "filterexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:50:1: filterexpression : orexpression ( SPACE ! OR ^ SPACE ! orexpression )* ;
	[GrammarRule("filterexpression")]
	private AstParserRuleReturnScope<object, IToken> filterexpression()
	{
		EnterRule_filterexpression();
		EnterRule("filterexpression", 8);
		TraceIn("filterexpression", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE25 = default(IToken);
		IToken OR26 = default(IToken);
		IToken SPACE27 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orexpression24 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orexpression28 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE25_tree = default(object);
		object OR26_tree = default(object);
		object SPACE27_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filterexpression");
		DebugLocation(50, 49);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:2: ( orexpression ( SPACE ! OR ^ SPACE ! orexpression )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:4: orexpression ( SPACE ! OR ^ SPACE ! orexpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(51, 4);
			PushFollow(Follow._orexpression_in_filterexpression207);
			orexpression24=orexpression();
			PopFollow();

			adaptor.AddChild(root_0, orexpression24.Tree);
			DebugLocation(51, 17);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:17: ( SPACE ! OR ^ SPACE ! orexpression )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==SPACE))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:18: SPACE ! OR ^ SPACE ! orexpression
					{
					DebugLocation(51, 23);
					SPACE25=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression210); 
					DebugLocation(51, 27);
					OR26=(IToken)Match(input,OR,Follow._OR_in_filterexpression213); 
					OR26_tree = (object)adaptor.Create(OR26);
					root_0 = (object)adaptor.BecomeRoot(OR26_tree, root_0);
					DebugLocation(51, 34);
					SPACE27=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression216); 
					DebugLocation(51, 36);
					PushFollow(Follow._orexpression_in_filterexpression219);
					orexpression28=orexpression();
					PopFollow();

					adaptor.AddChild(root_0, orexpression28.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filterexpression", 8);
			LeaveRule("filterexpression", 8);
			LeaveRule_filterexpression();
		}
		DebugLocation(51, 49);
		} finally { DebugExitRule(GrammarFileName, "filterexpression"); }
		return retval;

	}
	// $ANTLR end "filterexpression"

	partial void EnterRule_orexpression();
	partial void LeaveRule_orexpression();
	// $ANTLR start "orexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:53:1: orexpression : andexpression ( SPACE ! AND ^ SPACE ! andexpression )* ;
	[GrammarRule("orexpression")]
	private AstParserRuleReturnScope<object, IToken> orexpression()
	{
		EnterRule_orexpression();
		EnterRule("orexpression", 9);
		TraceIn("orexpression", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE30 = default(IToken);
		IToken AND31 = default(IToken);
		IToken SPACE32 = default(IToken);
		AstParserRuleReturnScope<object, IToken> andexpression29 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> andexpression33 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE30_tree = default(object);
		object AND31_tree = default(object);
		object SPACE32_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orexpression");
		DebugLocation(53, 52);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:54:2: ( andexpression ( SPACE ! AND ^ SPACE ! andexpression )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:54:4: andexpression ( SPACE ! AND ^ SPACE ! andexpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(54, 4);
			PushFollow(Follow._andexpression_in_orexpression231);
			andexpression29=andexpression();
			PopFollow();

			adaptor.AddChild(root_0, andexpression29.Tree);
			DebugLocation(54, 18);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:54:18: ( SPACE ! AND ^ SPACE ! andexpression )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==SPACE))
				{
					int LA9_2 = input.LA(2);

					if ((LA9_2==AND))
					{
						alt9 = 1;
					}


				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:54:19: SPACE ! AND ^ SPACE ! andexpression
					{
					DebugLocation(54, 24);
					SPACE30=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression234); 
					DebugLocation(54, 29);
					AND31=(IToken)Match(input,AND,Follow._AND_in_orexpression237); 
					AND31_tree = (object)adaptor.Create(AND31);
					root_0 = (object)adaptor.BecomeRoot(AND31_tree, root_0);
					DebugLocation(54, 36);
					SPACE32=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression240); 
					DebugLocation(54, 38);
					PushFollow(Follow._andexpression_in_orexpression243);
					andexpression33=andexpression();
					PopFollow();

					adaptor.AddChild(root_0, andexpression33.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orexpression", 9);
			LeaveRule("orexpression", 9);
			LeaveRule_orexpression();
		}
		DebugLocation(54, 52);
		} finally { DebugExitRule(GrammarFileName, "orexpression"); }
		return retval;

	}
	// $ANTLR end "orexpression"

	partial void EnterRule_andexpression();
	partial void LeaveRule_andexpression();
	// $ANTLR start "andexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:56:1: andexpression : ( NOT ^ SPACE ( '(' filterexpression ')' | booleanexpression ) | ( '(' filterexpression ')' | booleanexpression ) );
	[GrammarRule("andexpression")]
	private AstParserRuleReturnScope<object, IToken> andexpression()
	{
		EnterRule_andexpression();
		EnterRule("andexpression", 10);
		TraceIn("andexpression", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NOT34 = default(IToken);
		IToken SPACE35 = default(IToken);
		IToken char_literal36 = default(IToken);
		IToken char_literal38 = default(IToken);
		IToken char_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		AstParserRuleReturnScope<object, IToken> filterexpression37 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> booleanexpression39 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filterexpression41 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> booleanexpression43 = default(AstParserRuleReturnScope<object, IToken>);

		object NOT34_tree = default(object);
		object SPACE35_tree = default(object);
		object char_literal36_tree = default(object);
		object char_literal38_tree = default(object);
		object char_literal40_tree = default(object);
		object char_literal42_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "andexpression");
		DebugLocation(56, 49);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:57:2: ( NOT ^ SPACE ( '(' filterexpression ')' | booleanexpression ) | ( '(' filterexpression ')' | booleanexpression ) )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==NOT))
			{
				alt12 = 1;
			}
			else if (((LA12_1>=BOOL && LA12_1<=DATETIME)||(LA12_1>=DYNAMICIDENTIFIER && LA12_1<=ENDSWITH)||LA12_1==IDENTIFIER||LA12_1==INT||(LA12_1>=STARTSWITH && LA12_1<=TOLOWER)||LA12_1==41))
			{
				alt12 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:57:4: NOT ^ SPACE ( '(' filterexpression ')' | booleanexpression )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(57, 7);
				NOT34=(IToken)Match(input,NOT,Follow._NOT_in_andexpression255); 
				NOT34_tree = (object)adaptor.Create(NOT34);
				root_0 = (object)adaptor.BecomeRoot(NOT34_tree, root_0);
				DebugLocation(57, 9);
				SPACE35=(IToken)Match(input,SPACE,Follow._SPACE_in_andexpression258); 
				SPACE35_tree = (object)adaptor.Create(SPACE35);
				adaptor.AddChild(root_0, SPACE35_tree);
				DebugLocation(57, 15);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:57:15: ( '(' filterexpression ')' | booleanexpression )
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==41))
				{
					alt10 = 1;
				}
				else if (((LA10_1>=BOOL && LA10_1<=DATETIME)||(LA10_1>=DYNAMICIDENTIFIER && LA10_1<=ENDSWITH)||LA10_1==IDENTIFIER||LA10_1==INT||(LA10_1>=STARTSWITH && LA10_1<=TOLOWER)))
				{
					alt10 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:57:16: '(' filterexpression ')'
					{
					DebugLocation(57, 16);
					char_literal36=(IToken)Match(input,41,Follow._41_in_andexpression261); 
					char_literal36_tree = (object)adaptor.Create(char_literal36);
					adaptor.AddChild(root_0, char_literal36_tree);
					DebugLocation(57, 20);
					PushFollow(Follow._filterexpression_in_andexpression263);
					filterexpression37=filterexpression();
					PopFollow();

					adaptor.AddChild(root_0, filterexpression37.Tree);
					DebugLocation(57, 37);
					char_literal38=(IToken)Match(input,42,Follow._42_in_andexpression265); 
					char_literal38_tree = (object)adaptor.Create(char_literal38);
					adaptor.AddChild(root_0, char_literal38_tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:57:43: booleanexpression
					{
					DebugLocation(57, 43);
					PushFollow(Follow._booleanexpression_in_andexpression269);
					booleanexpression39=booleanexpression();
					PopFollow();

					adaptor.AddChild(root_0, booleanexpression39.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(10); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:4: ( '(' filterexpression ')' | booleanexpression )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(58, 4);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:4: ( '(' filterexpression ')' | booleanexpression )
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==41))
				{
					alt11 = 1;
				}
				else if (((LA11_1>=BOOL && LA11_1<=DATETIME)||(LA11_1>=DYNAMICIDENTIFIER && LA11_1<=ENDSWITH)||LA11_1==IDENTIFIER||LA11_1==INT||(LA11_1>=STARTSWITH && LA11_1<=TOLOWER)))
				{
					alt11 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:5: '(' filterexpression ')'
					{
					DebugLocation(58, 5);
					char_literal40=(IToken)Match(input,41,Follow._41_in_andexpression276); 
					char_literal40_tree = (object)adaptor.Create(char_literal40);
					adaptor.AddChild(root_0, char_literal40_tree);
					DebugLocation(58, 9);
					PushFollow(Follow._filterexpression_in_andexpression278);
					filterexpression41=filterexpression();
					PopFollow();

					adaptor.AddChild(root_0, filterexpression41.Tree);
					DebugLocation(58, 26);
					char_literal42=(IToken)Match(input,42,Follow._42_in_andexpression280); 
					char_literal42_tree = (object)adaptor.Create(char_literal42);
					adaptor.AddChild(root_0, char_literal42_tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:32: booleanexpression
					{
					DebugLocation(58, 32);
					PushFollow(Follow._booleanexpression_in_andexpression284);
					booleanexpression43=booleanexpression();
					PopFollow();

					adaptor.AddChild(root_0, booleanexpression43.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(11); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andexpression", 10);
			LeaveRule("andexpression", 10);
			LeaveRule_andexpression();
		}
		DebugLocation(58, 49);
		} finally { DebugExitRule(GrammarFileName, "andexpression"); }
		return retval;

	}
	// $ANTLR end "andexpression"

	partial void EnterRule_booleanexpression();
	partial void LeaveRule_booleanexpression();
	// $ANTLR start "booleanexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:60:1: booleanexpression : atom1= atom ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) ) ;
	[GrammarRule("booleanexpression")]
	private AstParserRuleReturnScope<object, IToken> booleanexpression()
	{
		EnterRule_booleanexpression();
		EnterRule("booleanexpression", 11);
		TraceIn("booleanexpression", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		IToken SPACE44 = default(IToken);
		IToken SPACE45 = default(IToken);
		AstParserRuleReturnScope<object, IToken> atom1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom2 = default(AstParserRuleReturnScope<object, IToken>);

		object op_tree = default(object);
		object SPACE44_tree = default(object);
		object SPACE45_tree = default(object);
		RewriteRuleITokenStream stream_SPACE=new RewriteRuleITokenStream(adaptor,"token SPACE");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_NOTEQUALS=new RewriteRuleITokenStream(adaptor,"token NOTEQUALS");
		RewriteRuleITokenStream stream_GREATERTHAN=new RewriteRuleITokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleITokenStream stream_GREATERTHANOREQUAL=new RewriteRuleITokenStream(adaptor,"token GREATERTHANOREQUAL");
		RewriteRuleITokenStream stream_LESSTHAN=new RewriteRuleITokenStream(adaptor,"token LESSTHAN");
		RewriteRuleITokenStream stream_LESSTHANOREQUAL=new RewriteRuleITokenStream(adaptor,"token LESSTHANOREQUAL");
		RewriteRuleSubtreeStream stream_atom=new RewriteRuleSubtreeStream(adaptor,"rule atom");
		try { DebugEnterRule(GrammarFileName, "booleanexpression");
		DebugLocation(60, 3);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:61:2: (atom1= atom ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:61:4: atom1= atom ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) )
			{
			DebugLocation(61, 9);
			PushFollow(Follow._atom_in_booleanexpression298);
			atom1=atom();
			PopFollow();

			stream_atom.Add(atom1.Tree);
			DebugLocation(61, 15);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:61:15: ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) )
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1==SPACE))
			{
				int LA14_2 = input.LA(2);

				if ((LA14_2==AND||LA14_2==OR))
				{
					alt14 = 2;
				}
				else if ((LA14_2==EQUALS||(LA14_2>=GREATERTHAN && LA14_2<=GREATERTHANOREQUAL)||(LA14_2>=LESSTHAN && LA14_2<=LESSTHANOREQUAL)||LA14_2==NOTEQUALS))
				{
					alt14 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA14_1==EOF||LA14_1==FILTER||LA14_1==INLINECOUNT||(LA14_1>=ORDERBY && LA14_1<=SKIP)||LA14_1==TOP||LA14_1==40||LA14_1==42))
			{
				alt14 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:62:4: SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom
				{
				DebugLocation(62, 4);
				SPACE44=(IToken)Match(input,SPACE,Follow._SPACE_in_booleanexpression305);  
				stream_SPACE.Add(SPACE44);

				DebugLocation(62, 10);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:62:10: (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL )
				int alt13=6;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				switch (input.LA(1))
				{
				case EQUALS:
					{
					alt13 = 1;
					}
					break;
				case NOTEQUALS:
					{
					alt13 = 2;
					}
					break;
				case GREATERTHAN:
					{
					alt13 = 3;
					}
					break;
				case GREATERTHANOREQUAL:
					{
					alt13 = 4;
					}
					break;
				case LESSTHAN:
					{
					alt13 = 5;
					}
					break;
				case LESSTHANOREQUAL:
					{
					alt13 = 6;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:62:11: op= EQUALS
					{
					DebugLocation(62, 13);
					op=(IToken)Match(input,EQUALS,Follow._EQUALS_in_booleanexpression310);  
					stream_EQUALS.Add(op);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:62:23: op= NOTEQUALS
					{
					DebugLocation(62, 25);
					op=(IToken)Match(input,NOTEQUALS,Follow._NOTEQUALS_in_booleanexpression316);  
					stream_NOTEQUALS.Add(op);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:62:38: op= GREATERTHAN
					{
					DebugLocation(62, 40);
					op=(IToken)Match(input,GREATERTHAN,Follow._GREATERTHAN_in_booleanexpression322);  
					stream_GREATERTHAN.Add(op);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:62:55: op= GREATERTHANOREQUAL
					{
					DebugLocation(62, 57);
					op=(IToken)Match(input,GREATERTHANOREQUAL,Follow._GREATERTHANOREQUAL_in_booleanexpression328);  
					stream_GREATERTHANOREQUAL.Add(op);


					}
					break;
				case 5:
					DebugEnterAlt(5);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:62:79: op= LESSTHAN
					{
					DebugLocation(62, 81);
					op=(IToken)Match(input,LESSTHAN,Follow._LESSTHAN_in_booleanexpression334);  
					stream_LESSTHAN.Add(op);


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:62:93: op= LESSTHANOREQUAL
					{
					DebugLocation(62, 95);
					op=(IToken)Match(input,LESSTHANOREQUAL,Follow._LESSTHANOREQUAL_in_booleanexpression340);  
					stream_LESSTHANOREQUAL.Add(op);


					}
					break;

				}
				} finally { DebugExitSubRule(13); }

				DebugLocation(62, 113);
				SPACE45=(IToken)Match(input,SPACE,Follow._SPACE_in_booleanexpression343);  
				stream_SPACE.Add(SPACE45);

				DebugLocation(62, 124);
				PushFollow(Follow._atom_in_booleanexpression347);
				atom2=atom();
				PopFollow();

				stream_atom.Add(atom2.Tree);


				{
				// AST REWRITE
				// elements: op, atom1, atom2
				// token labels: op
				// rule labels: atom1, atom2, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_op=new RewriteRuleITokenStream(adaptor,"token op",op);
				RewriteRuleSubtreeStream stream_atom1=new RewriteRuleSubtreeStream(adaptor,"rule atom1",atom1!=null?atom1.Tree:null);
				RewriteRuleSubtreeStream stream_atom2=new RewriteRuleSubtreeStream(adaptor,"rule atom2",atom2!=null?atom2.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 63:4: -> ^( $op $atom1 $atom2)
				{
					DebugLocation(63, 7);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:63:7: ^( $op $atom1 $atom2)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(63, 10);
					root_1 = (object)adaptor.BecomeRoot(stream_op.NextNode(), root_1);

					DebugLocation(63, 14);
					adaptor.AddChild(root_1, stream_atom1.NextTree());
					DebugLocation(63, 21);
					adaptor.AddChild(root_1, stream_atom2.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:64:5: 
				{

				{
				// AST REWRITE
				// elements: EQUALS, atom1
				// token labels: 
				// rule labels: atom1, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_atom1=new RewriteRuleSubtreeStream(adaptor,"rule atom1",atom1!=null?atom1.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 64:5: -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] )
				{
					DebugLocation(64, 8);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:64:8: ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(64, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(EQUALS, "eq"), root_1);

					DebugLocation(64, 24);
					adaptor.AddChild(root_1, stream_atom1.NextTree());
					DebugLocation(64, 30);
					adaptor.AddChild(root_1, (object)adaptor.Create(BOOL, "true"));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("booleanexpression", 11);
			LeaveRule("booleanexpression", 11);
			LeaveRule_booleanexpression();
		}
		DebugLocation(65, 3);
		} finally { DebugExitRule(GrammarFileName, "booleanexpression"); }
		return retval;

	}
	// $ANTLR end "booleanexpression"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:67:1: atom : ( functioncall | constant | propertyname );
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<object, IToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 12);
		TraceIn("atom", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> functioncall46 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> constant47 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname48 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(67, 15);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:67:6: ( functioncall | constant | propertyname )
			int alt15=3;
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case ENDSWITH:
			case STARTSWITH:
			case SUBSTRINGOF:
			case TOLOWER:
				{
				alt15 = 1;
				}
				break;
			case BOOL:
			case DATETIME:
			case INT:
			case STRING:
				{
				alt15 = 2;
				}
				break;
			case DYNAMICIDENTIFIER:
			case IDENTIFIER:
				{
				alt15 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:67:8: functioncall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(67, 8);
				PushFollow(Follow._functioncall_in_atom396);
				functioncall46=functioncall();
				PopFollow();

				adaptor.AddChild(root_0, functioncall46.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:68:4: constant
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(68, 4);
				PushFollow(Follow._constant_in_atom402);
				constant47=constant();
				PopFollow();

				adaptor.AddChild(root_0, constant47.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:69:4: propertyname
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(69, 4);
				PushFollow(Follow._propertyname_in_atom407);
				propertyname48=propertyname();
				PopFollow();

				adaptor.AddChild(root_0, propertyname48.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 12);
			LeaveRule("atom", 12);
			LeaveRule_atom();
		}
		DebugLocation(69, 15);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_functioncall();
	partial void LeaveRule_functioncall();
	// $ANTLR start "functioncall"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:71:1: functioncall : function ^ '(' atom ( ',' atom )* ')' ;
	[GrammarRule("functioncall")]
	private AstParserRuleReturnScope<object, IToken> functioncall()
	{
		EnterRule_functioncall();
		EnterRule("functioncall", 13);
		TraceIn("functioncall", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal50 = default(IToken);
		IToken char_literal52 = default(IToken);
		IToken char_literal54 = default(IToken);
		AstParserRuleReturnScope<object, IToken> function49 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom51 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom53 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal50_tree = default(object);
		object char_literal52_tree = default(object);
		object char_literal54_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functioncall");
		DebugLocation(71, 37);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:72:2: ( function ^ '(' atom ( ',' atom )* ')' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:72:4: function ^ '(' atom ( ',' atom )* ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(72, 12);
			PushFollow(Follow._function_in_functioncall417);
			function49=function();
			PopFollow();

			root_0 = (object)adaptor.BecomeRoot(function49.Tree, root_0);
			DebugLocation(72, 14);
			char_literal50=(IToken)Match(input,41,Follow._41_in_functioncall420); 
			char_literal50_tree = (object)adaptor.Create(char_literal50);
			adaptor.AddChild(root_0, char_literal50_tree);
			DebugLocation(72, 18);
			PushFollow(Follow._atom_in_functioncall422);
			atom51=atom();
			PopFollow();

			adaptor.AddChild(root_0, atom51.Tree);
			DebugLocation(72, 23);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:72:23: ( ',' atom )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==43))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:72:24: ',' atom
					{
					DebugLocation(72, 24);
					char_literal52=(IToken)Match(input,43,Follow._43_in_functioncall425); 
					char_literal52_tree = (object)adaptor.Create(char_literal52);
					adaptor.AddChild(root_0, char_literal52_tree);
					DebugLocation(72, 28);
					PushFollow(Follow._atom_in_functioncall427);
					atom53=atom();
					PopFollow();

					adaptor.AddChild(root_0, atom53.Tree);

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(72, 35);
			char_literal54=(IToken)Match(input,42,Follow._42_in_functioncall431); 
			char_literal54_tree = (object)adaptor.Create(char_literal54);
			adaptor.AddChild(root_0, char_literal54_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall", 13);
			LeaveRule("functioncall", 13);
			LeaveRule_functioncall();
		}
		DebugLocation(72, 37);
		} finally { DebugExitRule(GrammarFileName, "functioncall"); }
		return retval;

	}
	// $ANTLR end "functioncall"

	partial void EnterRule_function();
	partial void LeaveRule_function();
	// $ANTLR start "function"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:74:1: function : ( STARTSWITH | ENDSWITH | SUBSTRINGOF | TOLOWER );
	[GrammarRule("function")]
	private AstParserRuleReturnScope<object, IToken> function()
	{
		EnterRule_function();
		EnterRule("function", 14);
		TraceIn("function", 14);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set55 = default(IToken);

		object set55_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "function");
		DebugLocation(74, 48);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:75:2: ( STARTSWITH | ENDSWITH | SUBSTRINGOF | TOLOWER )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(75, 2);

			set55=(IToken)input.LT(1);
			if (input.LA(1)==ENDSWITH||input.LA(1)==STARTSWITH||(input.LA(1)>=SUBSTRINGOF && input.LA(1)<=TOLOWER))
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set55));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function", 14);
			LeaveRule("function", 14);
			LeaveRule_function();
		}
		DebugLocation(75, 48);
		} finally { DebugExitRule(GrammarFileName, "function"); }
		return retval;

	}
	// $ANTLR end "function"

	partial void EnterRule_orderby();
	partial void LeaveRule_orderby();
	// $ANTLR start "orderby"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:77:1: orderby : ORDERBY ^ orderbylist ;
	[GrammarRule("orderby")]
	private AstParserRuleReturnScope<object, IToken> orderby()
	{
		EnterRule_orderby();
		EnterRule("orderby", 15);
		TraceIn("orderby", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ORDERBY56 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderbylist57 = default(AstParserRuleReturnScope<object, IToken>);

		object ORDERBY56_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderby");
		DebugLocation(77, 23);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:78:2: ( ORDERBY ^ orderbylist )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:78:4: ORDERBY ^ orderbylist
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(78, 11);
			ORDERBY56=(IToken)Match(input,ORDERBY,Follow._ORDERBY_in_orderby462); 
			ORDERBY56_tree = (object)adaptor.Create(ORDERBY56);
			root_0 = (object)adaptor.BecomeRoot(ORDERBY56_tree, root_0);
			DebugLocation(78, 13);
			PushFollow(Follow._orderbylist_in_orderby465);
			orderbylist57=orderbylist();
			PopFollow();

			adaptor.AddChild(root_0, orderbylist57.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby", 15);
			LeaveRule("orderby", 15);
			LeaveRule_orderby();
		}
		DebugLocation(78, 23);
		} finally { DebugExitRule(GrammarFileName, "orderby"); }
		return retval;

	}
	// $ANTLR end "orderby"

	partial void EnterRule_orderbylist();
	partial void LeaveRule_orderbylist();
	// $ANTLR start "orderbylist"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:80:1: orderbylist : orderpropertyname ( ',' ! orderpropertyname )* ;
	[GrammarRule("orderbylist")]
	private AstParserRuleReturnScope<object, IToken> orderbylist()
	{
		EnterRule_orderbylist();
		EnterRule("orderbylist", 16);
		TraceIn("orderbylist", 16);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal59 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderpropertyname58 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orderpropertyname60 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal59_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderbylist");
		DebugLocation(80, 46);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:81:2: ( orderpropertyname ( ',' ! orderpropertyname )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:81:4: orderpropertyname ( ',' ! orderpropertyname )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(81, 4);
			PushFollow(Follow._orderpropertyname_in_orderbylist475);
			orderpropertyname58=orderpropertyname();
			PopFollow();

			adaptor.AddChild(root_0, orderpropertyname58.Tree);
			DebugLocation(81, 22);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:81:22: ( ',' ! orderpropertyname )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1==43))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:81:23: ',' ! orderpropertyname
					{
					DebugLocation(81, 26);
					char_literal59=(IToken)Match(input,43,Follow._43_in_orderbylist478); 
					DebugLocation(81, 28);
					PushFollow(Follow._orderpropertyname_in_orderbylist481);
					orderpropertyname60=orderpropertyname();
					PopFollow();

					adaptor.AddChild(root_0, orderpropertyname60.Tree);

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderbylist", 16);
			LeaveRule("orderbylist", 16);
			LeaveRule_orderbylist();
		}
		DebugLocation(81, 46);
		} finally { DebugExitRule(GrammarFileName, "orderbylist"); }
		return retval;

	}
	// $ANTLR end "orderbylist"

	partial void EnterRule_orderpropertyname();
	partial void LeaveRule_orderpropertyname();
	// $ANTLR start "orderpropertyname"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:83:1: orderpropertyname : ( propertyname -> ^( ASC propertyname ) | propertyname ( SPACE ! ( ASC | DESC ) ^) );
	[GrammarRule("orderpropertyname")]
	private AstParserRuleReturnScope<object, IToken> orderpropertyname()
	{
		EnterRule_orderpropertyname();
		EnterRule("orderpropertyname", 17);
		TraceIn("orderpropertyname", 17);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE63 = default(IToken);
		IToken set64 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname61 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname62 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE63_tree = default(object);
		object set64_tree = default(object);
		RewriteRuleSubtreeStream stream_propertyname=new RewriteRuleSubtreeStream(adaptor,"rule propertyname");
		try { DebugEnterRule(GrammarFileName, "orderpropertyname");
		DebugLocation(83, 39);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:2: ( propertyname -> ^( ASC propertyname ) | propertyname ( SPACE ! ( ASC | DESC ) ^) )
			int alt18=2;
			try { DebugEnterDecision(18, false);
			try
			{
				alt18 = dfa18.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:4: propertyname
				{
				DebugLocation(84, 4);
				PushFollow(Follow._propertyname_in_orderpropertyname492);
				propertyname61=propertyname();
				PopFollow();

				stream_propertyname.Add(propertyname61.Tree);


				{
				// AST REWRITE
				// elements: propertyname
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 84:17: -> ^( ASC propertyname )
				{
					DebugLocation(84, 20);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:20: ^( ASC propertyname )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(84, 22);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ASC, "ASC"), root_1);

					DebugLocation(84, 26);
					adaptor.AddChild(root_1, stream_propertyname.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:85:5: propertyname ( SPACE ! ( ASC | DESC ) ^)
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(85, 5);
				PushFollow(Follow._propertyname_in_orderpropertyname506);
				propertyname62=propertyname();
				PopFollow();

				adaptor.AddChild(root_0, propertyname62.Tree);
				DebugLocation(85, 18);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:85:18: ( SPACE ! ( ASC | DESC ) ^)
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:85:19: SPACE ! ( ASC | DESC ) ^
				{
				DebugLocation(85, 24);
				SPACE63=(IToken)Match(input,SPACE,Follow._SPACE_in_orderpropertyname509); 
				DebugLocation(85, 38);

				set64=(IToken)input.LT(1);
				set64=(IToken)input.LT(1);
				if (input.LA(1)==ASC||input.LA(1)==DESC)
				{
					input.Consume();
					root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set64), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderpropertyname", 17);
			LeaveRule("orderpropertyname", 17);
			LeaveRule_orderpropertyname();
		}
		DebugLocation(85, 39);
		} finally { DebugExitRule(GrammarFileName, "orderpropertyname"); }
		return retval;

	}
	// $ANTLR end "orderpropertyname"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();
	// $ANTLR start "constant"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:87:1: constant : ( ( INT )+ | BOOL | STRING | DATETIME ) ;
	[GrammarRule("constant")]
	private AstParserRuleReturnScope<object, IToken> constant()
	{
		EnterRule_constant();
		EnterRule("constant", 18);
		TraceIn("constant", 18);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken INT65 = default(IToken);
		IToken BOOL66 = default(IToken);
		IToken STRING67 = default(IToken);
		IToken DATETIME68 = default(IToken);

		object INT65_tree = default(object);
		object BOOL66_tree = default(object);
		object STRING67_tree = default(object);
		object DATETIME68_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(87, 43);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:87:9: ( ( ( INT )+ | BOOL | STRING | DATETIME ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:87:11: ( ( INT )+ | BOOL | STRING | DATETIME )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(87, 11);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:87:11: ( ( INT )+ | BOOL | STRING | DATETIME )
			int alt20=4;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			switch (input.LA(1))
			{
			case INT:
				{
				alt20 = 1;
				}
				break;
			case BOOL:
				{
				alt20 = 2;
				}
				break;
			case STRING:
				{
				alt20 = 3;
				}
				break;
			case DATETIME:
				{
				alt20 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 20, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:87:12: ( INT )+
				{
				DebugLocation(87, 12);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:87:12: ( INT )+
				int cnt19=0;
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_1 = input.LA(1);

					if ((LA19_1==INT))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch (alt19)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:87:12: INT
						{
						DebugLocation(87, 12);
						INT65=(IToken)Match(input,INT,Follow._INT_in_constant529); 
						INT65_tree = (object)adaptor.Create(INT65);
						adaptor.AddChild(root_0, INT65_tree);

						}
						break;

					default:
						if (cnt19 >= 1)
							goto loop19;

						EarlyExitException eee19 = new EarlyExitException( 19, input );
						DebugRecognitionException(eee19);
						throw eee19;
					}
					cnt19++;
				}
				loop19:
					;

				} finally { DebugExitSubRule(19); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:87:19: BOOL
				{
				DebugLocation(87, 19);
				BOOL66=(IToken)Match(input,BOOL,Follow._BOOL_in_constant534); 
				BOOL66_tree = (object)adaptor.Create(BOOL66);
				adaptor.AddChild(root_0, BOOL66_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:87:26: STRING
				{
				DebugLocation(87, 26);
				STRING67=(IToken)Match(input,STRING,Follow._STRING_in_constant538); 
				STRING67_tree = (object)adaptor.Create(STRING67);
				adaptor.AddChild(root_0, STRING67_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:87:35: DATETIME
				{
				DebugLocation(87, 35);
				DATETIME68=(IToken)Match(input,DATETIME,Follow._DATETIME_in_constant542); 
				DATETIME68_tree = (object)adaptor.Create(DATETIME68);
				adaptor.AddChild(root_0, DATETIME68_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant", 18);
			LeaveRule("constant", 18);
			LeaveRule_constant();
		}
		DebugLocation(87, 43);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_propertyname();
	partial void LeaveRule_propertyname();
	// $ANTLR start "propertyname"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:89:1: propertyname : ( IDENTIFIER | DYNAMICIDENTIFIER ) ( '/' ( IDENTIFIER | DYNAMICIDENTIFIER ) )* ;
	[GrammarRule("propertyname")]
	private AstParserRuleReturnScope<object, IToken> propertyname()
	{
		EnterRule_propertyname();
		EnterRule("propertyname", 19);
		TraceIn("propertyname", 19);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set69 = default(IToken);
		IToken char_literal70 = default(IToken);
		IToken set71 = default(IToken);

		object set69_tree = default(object);
		object char_literal70_tree = default(object);
		object set71_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "propertyname");
		DebugLocation(89, 71);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:90:2: ( ( IDENTIFIER | DYNAMICIDENTIFIER ) ( '/' ( IDENTIFIER | DYNAMICIDENTIFIER ) )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:90:4: ( IDENTIFIER | DYNAMICIDENTIFIER ) ( '/' ( IDENTIFIER | DYNAMICIDENTIFIER ) )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(90, 4);

			set69=(IToken)input.LT(1);
			if (input.LA(1)==DYNAMICIDENTIFIER||input.LA(1)==IDENTIFIER)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set69));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(90, 35);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:90:35: ( '/' ( IDENTIFIER | DYNAMICIDENTIFIER ) )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==44))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:90:36: '/' ( IDENTIFIER | DYNAMICIDENTIFIER )
					{
					DebugLocation(90, 36);
					char_literal70=(IToken)Match(input,44,Follow._44_in_propertyname559); 
					char_literal70_tree = (object)adaptor.Create(char_literal70);
					adaptor.AddChild(root_0, char_literal70_tree);
					DebugLocation(90, 40);

					set71=(IToken)input.LT(1);
					if (input.LA(1)==DYNAMICIDENTIFIER||input.LA(1)==IDENTIFIER)
					{
						input.Consume();
						adaptor.AddChild(root_0, (object)adaptor.Create(set71));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyname", 19);
			LeaveRule("propertyname", 19);
			LeaveRule_propertyname();
		}
		DebugLocation(90, 71);
		} finally { DebugExitRule(GrammarFileName, "propertyname"); }
		return retval;

	}
	// $ANTLR end "propertyname"

	partial void EnterRule_filteroperator();
	partial void LeaveRule_filteroperator();
	// $ANTLR start "filteroperator"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:92:1: filteroperator : ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL );
	[GrammarRule("filteroperator")]
	private AstParserRuleReturnScope<object, IToken> filteroperator()
	{
		EnterRule_filteroperator();
		EnterRule("filteroperator", 20);
		TraceIn("filteroperator", 20);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set72 = default(IToken);

		object set72_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filteroperator");
		DebugLocation(92, 85);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:93:2: ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(93, 2);

			set72=(IToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATERTHAN && input.LA(1)<=GREATERTHANOREQUAL)||(input.LA(1)>=LESSTHAN && input.LA(1)<=LESSTHANOREQUAL)||input.LA(1)==NOTEQUALS)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set72));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filteroperator", 20);
			LeaveRule("filteroperator", 20);
			LeaveRule_filteroperator();
		}
		DebugLocation(93, 85);
		} finally { DebugExitRule(GrammarFileName, "filteroperator"); }
		return retval;

	}
	// $ANTLR end "filteroperator"
	#endregion Rules


	#region DFA
	private DFA18 dfa18;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa18 = new DFA18( this );
	}

	private class DFA18 : DFA
	{
		private const string DFA18_eotS =
			"\x6\xFFFF";
		private const string DFA18_eofS =
			"\x1\xFFFF\x1\x3\x3\xFFFF\x1\x3";
		private const string DFA18_minS =
			"\x1\xB\x1\xF\x1\xB\x2\xFFFF\x1\xF";
		private const string DFA18_maxS =
			"\x1\x13\x1\x2C\x1\x13\x2\xFFFF\x1\x2C";
		private const string DFA18_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA18_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA18_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x1",
				"\x1\x3\x4\xFFFF\x1\x3\x9\xFFFF\x3\x3\x1\x4\x4\xFFFF\x1\x3\x1\xFFFF\x1"+
				"\x3\x2\xFFFF\x1\x3\x1\x2",
				"\x1\x5\x7\xFFFF\x1\x5",
				"",
				"",
				"\x1\x3\x4\xFFFF\x1\x3\x9\xFFFF\x3\x3\x1\x4\x4\xFFFF\x1\x3\x1\xFFFF\x1"+
				"\x3\x2\xFFFF\x1\x3\x1\x2"
			};

		private static readonly short[] DFA18_eot = DFA.UnpackEncodedString(DFA18_eotS);
		private static readonly short[] DFA18_eof = DFA.UnpackEncodedString(DFA18_eofS);
		private static readonly char[] DFA18_min = DFA.UnpackEncodedStringToUnsignedChars(DFA18_minS);
		private static readonly char[] DFA18_max = DFA.UnpackEncodedStringToUnsignedChars(DFA18_maxS);
		private static readonly short[] DFA18_accept = DFA.UnpackEncodedString(DFA18_acceptS);
		private static readonly short[] DFA18_special = DFA.UnpackEncodedString(DFA18_specialS);
		private static readonly short[][] DFA18_transition;

		static DFA18()
		{
			int numStates = DFA18_transitionS.Length;
			DFA18_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA18_transition[i] = DFA.UnpackEncodedString(DFA18_transitionS[i]);
			}
		}

		public DFA18( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 18;
			this.eot = DFA18_eot;
			this.eof = DFA18_eof;
			this.min = DFA18_min;
			this.max = DFA18_max;
			this.accept = DFA18_accept;
			this.special = DFA18_special;
			this.transition = DFA18_transition;
		}

		public override string Description { get { return "83:1: orderpropertyname : ( propertyname -> ^( ASC propertyname ) | propertyname ( SPACE ! ( ASC | DESC ) ^) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _param_in_prog73 = new BitSet(new ulong[]{0x141C0108002UL});
		public static readonly BitSet _40_in_prog76 = new BitSet(new ulong[]{0x41C0108000UL});
		public static readonly BitSet _param_in_prog79 = new BitSet(new ulong[]{0x141C0108002UL});
		public static readonly BitSet _orderby_in_param92 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _top_in_param96 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _skip_in_param100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _filter_in_param104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_in_param108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _inlinecount_in_param112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SKIP_in_skip123 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_skip126 = new BitSet(new ulong[]{0x200002UL});
		public static readonly BitSet _TOP_in_top137 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_top140 = new BitSet(new ulong[]{0x200002UL});
		public static readonly BitSet _FILTER_in_filter151 = new BitSet(new ulong[]{0x23C04281B00UL});
		public static readonly BitSet _filterexpression_in_filter154 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select164 = new BitSet(new ulong[]{0x80800UL});
		public static readonly BitSet _propertyname_in_select167 = new BitSet(new ulong[]{0x80000000002UL});
		public static readonly BitSet _43_in_select170 = new BitSet(new ulong[]{0x80800UL});
		public static readonly BitSet _propertyname_in_select173 = new BitSet(new ulong[]{0x80000000002UL});
		public static readonly BitSet _INLINECOUNT_in_inlinecount185 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ALLPAGES_in_inlinecount188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INLINECOUNT_in_inlinecount193 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _NONE_in_inlinecount195 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orexpression_in_filterexpression207 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _SPACE_in_filterexpression210 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _OR_in_filterexpression213 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SPACE_in_filterexpression216 = new BitSet(new ulong[]{0x23C04281B00UL});
		public static readonly BitSet _orexpression_in_filterexpression219 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _andexpression_in_orexpression231 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _SPACE_in_orexpression234 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _AND_in_orexpression237 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SPACE_in_orexpression240 = new BitSet(new ulong[]{0x23C04281B00UL});
		public static readonly BitSet _andexpression_in_orexpression243 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _NOT_in_andexpression255 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SPACE_in_andexpression258 = new BitSet(new ulong[]{0x23C00281B00UL});
		public static readonly BitSet _41_in_andexpression261 = new BitSet(new ulong[]{0x23C04281B00UL});
		public static readonly BitSet _filterexpression_in_andexpression263 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_andexpression265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanexpression_in_andexpression269 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _41_in_andexpression276 = new BitSet(new ulong[]{0x23C04281B00UL});
		public static readonly BitSet _filterexpression_in_andexpression278 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_andexpression280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanexpression_in_andexpression284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_booleanexpression298 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _SPACE_in_booleanexpression305 = new BitSet(new ulong[]{0x8C32000UL});
		public static readonly BitSet _EQUALS_in_booleanexpression310 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _NOTEQUALS_in_booleanexpression316 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _GREATERTHAN_in_booleanexpression322 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _GREATERTHANOREQUAL_in_booleanexpression328 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _LESSTHAN_in_booleanexpression334 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _LESSTHANOREQUAL_in_booleanexpression340 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SPACE_in_booleanexpression343 = new BitSet(new ulong[]{0x3C00281B00UL});
		public static readonly BitSet _atom_in_booleanexpression347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_in_atom396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_atom402 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_atom407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_in_functioncall417 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_functioncall420 = new BitSet(new ulong[]{0x3C00281B00UL});
		public static readonly BitSet _atom_in_functioncall422 = new BitSet(new ulong[]{0xC0000000000UL});
		public static readonly BitSet _43_in_functioncall425 = new BitSet(new ulong[]{0x3C00281B00UL});
		public static readonly BitSet _atom_in_functioncall427 = new BitSet(new ulong[]{0xC0000000000UL});
		public static readonly BitSet _42_in_functioncall431 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDERBY_in_orderby462 = new BitSet(new ulong[]{0x80800UL});
		public static readonly BitSet _orderbylist_in_orderby465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist475 = new BitSet(new ulong[]{0x80000000002UL});
		public static readonly BitSet _43_in_orderbylist478 = new BitSet(new ulong[]{0x80800UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist481 = new BitSet(new ulong[]{0x80000000002UL});
		public static readonly BitSet _propertyname_in_orderpropertyname492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_orderpropertyname506 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SPACE_in_orderpropertyname509 = new BitSet(new ulong[]{0x440UL});
		public static readonly BitSet _set_in_orderpropertyname512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_constant529 = new BitSet(new ulong[]{0x200002UL});
		public static readonly BitSet _BOOL_in_constant534 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_constant538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATETIME_in_constant542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_propertyname552 = new BitSet(new ulong[]{0x100000000002UL});
		public static readonly BitSet _44_in_propertyname559 = new BitSet(new ulong[]{0x80800UL});
		public static readonly BitSet _set_in_propertyname561 = new BitSet(new ulong[]{0x100000000002UL});
	}
	#endregion Follow sets
}

} // namespace  LinqToQuerystring 
