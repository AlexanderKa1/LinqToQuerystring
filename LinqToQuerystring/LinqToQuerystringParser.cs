//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g 2013-04-01 17:16:42

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  LinqToQuerystring 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class LinqToQuerystringParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "ASC", "ASSIGN", "BOOL", "DATETIME", "DESC", "EQUALS", "FILTER", "GREATERTHAN", "GREATERTHANOREQUAL", "IDENTIFIER", "INT", "LESSTHAN", "LESSTHANOREQUAL", "NEWLINE", "NOT", "NOTEQUALS", "OR", "ORDERBY", "SELECT", "SKIP", "SPACE", "STRING", "TOP", "'&'", "'('", "')'", "','", "'/'"
	};
	public const int EOF=-1;
	public const int AND=4;
	public const int ASC=5;
	public const int ASSIGN=6;
	public const int BOOL=7;
	public const int DATETIME=8;
	public const int DESC=9;
	public const int EQUALS=10;
	public const int FILTER=11;
	public const int GREATERTHAN=12;
	public const int GREATERTHANOREQUAL=13;
	public const int IDENTIFIER=14;
	public const int INT=15;
	public const int LESSTHAN=16;
	public const int LESSTHANOREQUAL=17;
	public const int NEWLINE=18;
	public const int NOT=19;
	public const int NOTEQUALS=20;
	public const int OR=21;
	public const int ORDERBY=22;
	public const int SELECT=23;
	public const int SKIP=24;
	public const int SPACE=25;
	public const int STRING=26;
	public const int TOP=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;

	public LinqToQuerystringParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public LinqToQuerystringParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return LinqToQuerystringParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:13:8: public prog : ( param ( '&' ! param )* )* ;
	[GrammarRule("prog")]
	public AstParserRuleReturnScope<object, IToken> prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		TraceIn("prog", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal2 = default(IToken);
		AstParserRuleReturnScope<object, IToken> param1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> param3 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal2_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(13, 25);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:2: ( ( param ( '&' ! param )* )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:4: ( param ( '&' ! param )* )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(14, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:4: ( param ( '&' ! param )* )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==FILTER||(LA2_1>=ORDERBY && LA2_1<=SKIP)||LA2_1==TOP))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:5: param ( '&' ! param )*
					{
					DebugLocation(14, 5);
					PushFollow(Follow._param_in_prog55);
					param1=param();
					PopFollow();

					adaptor.AddChild(root_0, param1.Tree);
					DebugLocation(14, 11);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:11: ( '&' ! param )*
					try { DebugEnterSubRule(1);
					while (true)
					{
						int alt1=2;
						try { DebugEnterDecision(1, false);
						int LA1_1 = input.LA(1);

						if ((LA1_1==28))
						{
							alt1 = 1;
						}


						} finally { DebugExitDecision(1); }
						switch ( alt1 )
						{
						case 1:
							DebugEnterAlt(1);
							// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:12: '&' ! param
							{
							DebugLocation(14, 15);
							char_literal2=(IToken)Match(input,28,Follow._28_in_prog58); 
							DebugLocation(14, 17);
							PushFollow(Follow._param_in_prog61);
							param3=param();
							PopFollow();

							adaptor.AddChild(root_0, param3.Tree);

							}
							break;

						default:
							goto loop1;
						}
					}

					loop1:
						;

					} finally { DebugExitSubRule(1); }


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
		}
		DebugLocation(14, 25);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	partial void EnterRule_param();
	partial void LeaveRule_param();
	// $ANTLR start "param"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:1: param : ( orderby | top | skip | filter | select ) ;
	[GrammarRule("param")]
	private AstParserRuleReturnScope<object, IToken> param()
	{
		EnterRule_param();
		EnterRule("param", 2);
		TraceIn("param", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> orderby4 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> top5 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> skip6 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filter7 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> select8 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "param");
		DebugLocation(16, 48);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:7: ( ( orderby | top | skip | filter | select ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:9: ( orderby | top | skip | filter | select )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(16, 9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:9: ( orderby | top | skip | filter | select )
			int alt3=5;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case ORDERBY:
				{
				alt3 = 1;
				}
				break;
			case TOP:
				{
				alt3 = 2;
				}
				break;
			case SKIP:
				{
				alt3 = 3;
				}
				break;
			case FILTER:
				{
				alt3 = 4;
				}
				break;
			case SELECT:
				{
				alt3 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:10: orderby
				{
				DebugLocation(16, 10);
				PushFollow(Follow._orderby_in_param74);
				orderby4=orderby();
				PopFollow();

				adaptor.AddChild(root_0, orderby4.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:20: top
				{
				DebugLocation(16, 20);
				PushFollow(Follow._top_in_param78);
				top5=top();
				PopFollow();

				adaptor.AddChild(root_0, top5.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:26: skip
				{
				DebugLocation(16, 26);
				PushFollow(Follow._skip_in_param82);
				skip6=skip();
				PopFollow();

				adaptor.AddChild(root_0, skip6.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:33: filter
				{
				DebugLocation(16, 33);
				PushFollow(Follow._filter_in_param86);
				filter7=filter();
				PopFollow();

				adaptor.AddChild(root_0, filter7.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:42: select
				{
				DebugLocation(16, 42);
				PushFollow(Follow._select_in_param90);
				select8=select();
				PopFollow();

				adaptor.AddChild(root_0, select8.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("param", 2);
			LeaveRule("param", 2);
			LeaveRule_param();
		}
		DebugLocation(16, 48);
		} finally { DebugExitRule(GrammarFileName, "param"); }
		return retval;

	}
	// $ANTLR end "param"

	partial void EnterRule_skip();
	partial void LeaveRule_skip();
	// $ANTLR start "skip"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:18:1: skip : SKIP ^ ( INT )+ ;
	[GrammarRule("skip")]
	private AstParserRuleReturnScope<object, IToken> skip()
	{
		EnterRule_skip();
		EnterRule("skip", 3);
		TraceIn("skip", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SKIP9 = default(IToken);
		IToken INT10 = default(IToken);

		object SKIP9_tree = default(object);
		object INT10_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "skip");
		DebugLocation(18, 13);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:19:2: ( SKIP ^ ( INT )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:19:4: SKIP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(19, 8);
			SKIP9=(IToken)Match(input,SKIP,Follow._SKIP_in_skip101); 
			SKIP9_tree = (object)adaptor.Create(SKIP9);
			root_0 = (object)adaptor.BecomeRoot(SKIP9_tree, root_0);
			DebugLocation(19, 10);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:19:10: ( INT )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==INT))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:19:10: INT
					{
					DebugLocation(19, 10);
					INT10=(IToken)Match(input,INT,Follow._INT_in_skip104); 
					INT10_tree = (object)adaptor.Create(INT10);
					adaptor.AddChild(root_0, INT10_tree);

					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("skip", 3);
			LeaveRule("skip", 3);
			LeaveRule_skip();
		}
		DebugLocation(19, 13);
		} finally { DebugExitRule(GrammarFileName, "skip"); }
		return retval;

	}
	// $ANTLR end "skip"

	partial void EnterRule_top();
	partial void LeaveRule_top();
	// $ANTLR start "top"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:21:1: top : TOP ^ ( INT )+ ;
	[GrammarRule("top")]
	private AstParserRuleReturnScope<object, IToken> top()
	{
		EnterRule_top();
		EnterRule("top", 4);
		TraceIn("top", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken TOP11 = default(IToken);
		IToken INT12 = default(IToken);

		object TOP11_tree = default(object);
		object INT12_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "top");
		DebugLocation(21, 12);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:22:2: ( TOP ^ ( INT )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:22:4: TOP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(22, 7);
			TOP11=(IToken)Match(input,TOP,Follow._TOP_in_top115); 
			TOP11_tree = (object)adaptor.Create(TOP11);
			root_0 = (object)adaptor.BecomeRoot(TOP11_tree, root_0);
			DebugLocation(22, 9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:22:9: ( INT )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==INT))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:22:9: INT
					{
					DebugLocation(22, 9);
					INT12=(IToken)Match(input,INT,Follow._INT_in_top118); 
					INT12_tree = (object)adaptor.Create(INT12);
					adaptor.AddChild(root_0, INT12_tree);

					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top", 4);
			LeaveRule("top", 4);
			LeaveRule_top();
		}
		DebugLocation(22, 12);
		} finally { DebugExitRule(GrammarFileName, "top"); }
		return retval;

	}
	// $ANTLR end "top"

	partial void EnterRule_filter();
	partial void LeaveRule_filter();
	// $ANTLR start "filter"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:24:1: filter : FILTER ^ filterexpression ;
	[GrammarRule("filter")]
	private AstParserRuleReturnScope<object, IToken> filter()
	{
		EnterRule_filter();
		EnterRule("filter", 5);
		TraceIn("filter", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken FILTER13 = default(IToken);
		AstParserRuleReturnScope<object, IToken> filterexpression14 = default(AstParserRuleReturnScope<object, IToken>);

		object FILTER13_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filter");
		DebugLocation(24, 27);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:25:2: ( FILTER ^ filterexpression )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:25:4: FILTER ^ filterexpression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(25, 10);
			FILTER13=(IToken)Match(input,FILTER,Follow._FILTER_in_filter129); 
			FILTER13_tree = (object)adaptor.Create(FILTER13);
			root_0 = (object)adaptor.BecomeRoot(FILTER13_tree, root_0);
			DebugLocation(25, 12);
			PushFollow(Follow._filterexpression_in_filter132);
			filterexpression14=filterexpression();
			PopFollow();

			adaptor.AddChild(root_0, filterexpression14.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filter", 5);
			LeaveRule("filter", 5);
			LeaveRule_filter();
		}
		DebugLocation(25, 27);
		} finally { DebugExitRule(GrammarFileName, "filter"); }
		return retval;

	}
	// $ANTLR end "filter"

	partial void EnterRule_select();
	partial void LeaveRule_select();
	// $ANTLR start "select"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:27:1: select : SELECT ^ propertyname ( ',' ! propertyname )* ;
	[GrammarRule("select")]
	private AstParserRuleReturnScope<object, IToken> select()
	{
		EnterRule_select();
		EnterRule("select", 6);
		TraceIn("select", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SELECT15 = default(IToken);
		IToken char_literal17 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname16 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname18 = default(AstParserRuleReturnScope<object, IToken>);

		object SELECT15_tree = default(object);
		object char_literal17_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "select");
		DebugLocation(27, 44);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:28:2: ( SELECT ^ propertyname ( ',' ! propertyname )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:28:4: SELECT ^ propertyname ( ',' ! propertyname )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(28, 10);
			SELECT15=(IToken)Match(input,SELECT,Follow._SELECT_in_select142); 
			SELECT15_tree = (object)adaptor.Create(SELECT15);
			root_0 = (object)adaptor.BecomeRoot(SELECT15_tree, root_0);
			DebugLocation(28, 12);
			PushFollow(Follow._propertyname_in_select145);
			propertyname16=propertyname();
			PopFollow();

			adaptor.AddChild(root_0, propertyname16.Tree);
			DebugLocation(28, 25);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:28:25: ( ',' ! propertyname )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==31))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:28:26: ',' ! propertyname
					{
					DebugLocation(28, 29);
					char_literal17=(IToken)Match(input,31,Follow._31_in_select148); 
					DebugLocation(28, 31);
					PushFollow(Follow._propertyname_in_select151);
					propertyname18=propertyname();
					PopFollow();

					adaptor.AddChild(root_0, propertyname18.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select", 6);
			LeaveRule("select", 6);
			LeaveRule_select();
		}
		DebugLocation(28, 44);
		} finally { DebugExitRule(GrammarFileName, "select"); }
		return retval;

	}
	// $ANTLR end "select"

	partial void EnterRule_filterexpression();
	partial void LeaveRule_filterexpression();
	// $ANTLR start "filterexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:30:1: filterexpression : orexpression ( SPACE ! OR ^ SPACE ! orexpression )* ;
	[GrammarRule("filterexpression")]
	private AstParserRuleReturnScope<object, IToken> filterexpression()
	{
		EnterRule_filterexpression();
		EnterRule("filterexpression", 7);
		TraceIn("filterexpression", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE20 = default(IToken);
		IToken OR21 = default(IToken);
		IToken SPACE22 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orexpression19 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orexpression23 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE20_tree = default(object);
		object OR21_tree = default(object);
		object SPACE22_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filterexpression");
		DebugLocation(30, 49);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:31:2: ( orexpression ( SPACE ! OR ^ SPACE ! orexpression )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:31:4: orexpression ( SPACE ! OR ^ SPACE ! orexpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(31, 4);
			PushFollow(Follow._orexpression_in_filterexpression163);
			orexpression19=orexpression();
			PopFollow();

			adaptor.AddChild(root_0, orexpression19.Tree);
			DebugLocation(31, 17);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:31:17: ( SPACE ! OR ^ SPACE ! orexpression )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==SPACE))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:31:18: SPACE ! OR ^ SPACE ! orexpression
					{
					DebugLocation(31, 23);
					SPACE20=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression166); 
					DebugLocation(31, 27);
					OR21=(IToken)Match(input,OR,Follow._OR_in_filterexpression169); 
					OR21_tree = (object)adaptor.Create(OR21);
					root_0 = (object)adaptor.BecomeRoot(OR21_tree, root_0);
					DebugLocation(31, 34);
					SPACE22=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression172); 
					DebugLocation(31, 36);
					PushFollow(Follow._orexpression_in_filterexpression175);
					orexpression23=orexpression();
					PopFollow();

					adaptor.AddChild(root_0, orexpression23.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filterexpression", 7);
			LeaveRule("filterexpression", 7);
			LeaveRule_filterexpression();
		}
		DebugLocation(31, 49);
		} finally { DebugExitRule(GrammarFileName, "filterexpression"); }
		return retval;

	}
	// $ANTLR end "filterexpression"

	partial void EnterRule_orexpression();
	partial void LeaveRule_orexpression();
	// $ANTLR start "orexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:33:1: orexpression : andexpression ( SPACE ! AND ^ SPACE ! andexpression )* ;
	[GrammarRule("orexpression")]
	private AstParserRuleReturnScope<object, IToken> orexpression()
	{
		EnterRule_orexpression();
		EnterRule("orexpression", 8);
		TraceIn("orexpression", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE25 = default(IToken);
		IToken AND26 = default(IToken);
		IToken SPACE27 = default(IToken);
		AstParserRuleReturnScope<object, IToken> andexpression24 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> andexpression28 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE25_tree = default(object);
		object AND26_tree = default(object);
		object SPACE27_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orexpression");
		DebugLocation(33, 52);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:2: ( andexpression ( SPACE ! AND ^ SPACE ! andexpression )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:4: andexpression ( SPACE ! AND ^ SPACE ! andexpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(34, 4);
			PushFollow(Follow._andexpression_in_orexpression187);
			andexpression24=andexpression();
			PopFollow();

			adaptor.AddChild(root_0, andexpression24.Tree);
			DebugLocation(34, 18);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:18: ( SPACE ! AND ^ SPACE ! andexpression )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==SPACE))
				{
					int LA8_2 = input.LA(2);

					if ((LA8_2==AND))
					{
						alt8 = 1;
					}


				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:19: SPACE ! AND ^ SPACE ! andexpression
					{
					DebugLocation(34, 24);
					SPACE25=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression190); 
					DebugLocation(34, 29);
					AND26=(IToken)Match(input,AND,Follow._AND_in_orexpression193); 
					AND26_tree = (object)adaptor.Create(AND26);
					root_0 = (object)adaptor.BecomeRoot(AND26_tree, root_0);
					DebugLocation(34, 36);
					SPACE27=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression196); 
					DebugLocation(34, 38);
					PushFollow(Follow._andexpression_in_orexpression199);
					andexpression28=andexpression();
					PopFollow();

					adaptor.AddChild(root_0, andexpression28.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orexpression", 8);
			LeaveRule("orexpression", 8);
			LeaveRule_orexpression();
		}
		DebugLocation(34, 52);
		} finally { DebugExitRule(GrammarFileName, "orexpression"); }
		return retval;

	}
	// $ANTLR end "orexpression"

	partial void EnterRule_andexpression();
	partial void LeaveRule_andexpression();
	// $ANTLR start "andexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:1: andexpression : ( NOT ^ SPACE comparisonexpression | comparisonexpression );
	[GrammarRule("andexpression")]
	private AstParserRuleReturnScope<object, IToken> andexpression()
	{
		EnterRule_andexpression();
		EnterRule("andexpression", 9);
		TraceIn("andexpression", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NOT29 = default(IToken);
		IToken SPACE30 = default(IToken);
		AstParserRuleReturnScope<object, IToken> comparisonexpression31 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> comparisonexpression32 = default(AstParserRuleReturnScope<object, IToken>);

		object NOT29_tree = default(object);
		object SPACE30_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "andexpression");
		DebugLocation(36, 23);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:37:2: ( NOT ^ SPACE comparisonexpression | comparisonexpression )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==NOT))
			{
				alt9 = 1;
			}
			else if ((LA9_1==IDENTIFIER||LA9_1==29))
			{
				alt9 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:37:4: NOT ^ SPACE comparisonexpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(37, 7);
				NOT29=(IToken)Match(input,NOT,Follow._NOT_in_andexpression211); 
				NOT29_tree = (object)adaptor.Create(NOT29);
				root_0 = (object)adaptor.BecomeRoot(NOT29_tree, root_0);
				DebugLocation(37, 9);
				SPACE30=(IToken)Match(input,SPACE,Follow._SPACE_in_andexpression214); 
				SPACE30_tree = (object)adaptor.Create(SPACE30);
				adaptor.AddChild(root_0, SPACE30_tree);
				DebugLocation(37, 15);
				PushFollow(Follow._comparisonexpression_in_andexpression216);
				comparisonexpression31=comparisonexpression();
				PopFollow();

				adaptor.AddChild(root_0, comparisonexpression31.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:38:4: comparisonexpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(38, 4);
				PushFollow(Follow._comparisonexpression_in_andexpression221);
				comparisonexpression32=comparisonexpression();
				PopFollow();

				adaptor.AddChild(root_0, comparisonexpression32.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andexpression", 9);
			LeaveRule("andexpression", 9);
			LeaveRule_andexpression();
		}
		DebugLocation(38, 23);
		} finally { DebugExitRule(GrammarFileName, "andexpression"); }
		return retval;

	}
	// $ANTLR end "andexpression"

	partial void EnterRule_comparisonexpression();
	partial void LeaveRule_comparisonexpression();
	// $ANTLR start "comparisonexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:40:1: comparisonexpression : ( propertyname SPACE ! filteroperator ^ SPACE ! ( ( INT )+ | BOOL | STRING | DATETIME ) | '(' filterexpression ')' );
	[GrammarRule("comparisonexpression")]
	private AstParserRuleReturnScope<object, IToken> comparisonexpression()
	{
		EnterRule_comparisonexpression();
		EnterRule("comparisonexpression", 10);
		TraceIn("comparisonexpression", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE34 = default(IToken);
		IToken SPACE36 = default(IToken);
		IToken INT37 = default(IToken);
		IToken BOOL38 = default(IToken);
		IToken STRING39 = default(IToken);
		IToken DATETIME40 = default(IToken);
		IToken char_literal41 = default(IToken);
		IToken char_literal43 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname33 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filteroperator35 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filterexpression42 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE34_tree = default(object);
		object SPACE36_tree = default(object);
		object INT37_tree = default(object);
		object BOOL38_tree = default(object);
		object STRING39_tree = default(object);
		object DATETIME40_tree = default(object);
		object char_literal41_tree = default(object);
		object char_literal43_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "comparisonexpression");
		DebugLocation(40, 27);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:41:2: ( propertyname SPACE ! filteroperator ^ SPACE ! ( ( INT )+ | BOOL | STRING | DATETIME ) | '(' filterexpression ')' )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==IDENTIFIER))
			{
				alt12 = 1;
			}
			else if ((LA12_1==29))
			{
				alt12 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:41:4: propertyname SPACE ! filteroperator ^ SPACE ! ( ( INT )+ | BOOL | STRING | DATETIME )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(41, 4);
				PushFollow(Follow._propertyname_in_comparisonexpression232);
				propertyname33=propertyname();
				PopFollow();

				adaptor.AddChild(root_0, propertyname33.Tree);
				DebugLocation(41, 22);
				SPACE34=(IToken)Match(input,SPACE,Follow._SPACE_in_comparisonexpression234); 
				DebugLocation(41, 38);
				PushFollow(Follow._filteroperator_in_comparisonexpression237);
				filteroperator35=filteroperator();
				PopFollow();

				root_0 = (object)adaptor.BecomeRoot(filteroperator35.Tree, root_0);
				DebugLocation(41, 45);
				SPACE36=(IToken)Match(input,SPACE,Follow._SPACE_in_comparisonexpression240); 
				DebugLocation(41, 47);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:41:47: ( ( INT )+ | BOOL | STRING | DATETIME )
				int alt11=4;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				switch (input.LA(1))
				{
				case INT:
					{
					alt11 = 1;
					}
					break;
				case BOOL:
					{
					alt11 = 2;
					}
					break;
				case STRING:
					{
					alt11 = 3;
					}
					break;
				case DATETIME:
					{
					alt11 = 4;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:41:48: ( INT )+
					{
					DebugLocation(41, 48);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:41:48: ( INT )+
					int cnt10=0;
					try { DebugEnterSubRule(10);
					while (true)
					{
						int alt10=2;
						try { DebugEnterDecision(10, false);
						int LA10_1 = input.LA(1);

						if ((LA10_1==INT))
						{
							alt10 = 1;
						}


						} finally { DebugExitDecision(10); }
						switch (alt10)
						{
						case 1:
							DebugEnterAlt(1);
							// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:41:48: INT
							{
							DebugLocation(41, 48);
							INT37=(IToken)Match(input,INT,Follow._INT_in_comparisonexpression244); 
							INT37_tree = (object)adaptor.Create(INT37);
							adaptor.AddChild(root_0, INT37_tree);

							}
							break;

						default:
							if (cnt10 >= 1)
								goto loop10;

							EarlyExitException eee10 = new EarlyExitException( 10, input );
							DebugRecognitionException(eee10);
							throw eee10;
						}
						cnt10++;
					}
					loop10:
						;

					} finally { DebugExitSubRule(10); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:41:55: BOOL
					{
					DebugLocation(41, 55);
					BOOL38=(IToken)Match(input,BOOL,Follow._BOOL_in_comparisonexpression249); 
					BOOL38_tree = (object)adaptor.Create(BOOL38);
					adaptor.AddChild(root_0, BOOL38_tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:41:62: STRING
					{
					DebugLocation(41, 62);
					STRING39=(IToken)Match(input,STRING,Follow._STRING_in_comparisonexpression253); 
					STRING39_tree = (object)adaptor.Create(STRING39);
					adaptor.AddChild(root_0, STRING39_tree);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:41:71: DATETIME
					{
					DebugLocation(41, 71);
					DATETIME40=(IToken)Match(input,DATETIME,Follow._DATETIME_in_comparisonexpression257); 
					DATETIME40_tree = (object)adaptor.Create(DATETIME40);
					adaptor.AddChild(root_0, DATETIME40_tree);

					}
					break;

				}
				} finally { DebugExitSubRule(11); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:42:4: '(' filterexpression ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(42, 4);
				char_literal41=(IToken)Match(input,29,Follow._29_in_comparisonexpression263); 
				char_literal41_tree = (object)adaptor.Create(char_literal41);
				adaptor.AddChild(root_0, char_literal41_tree);
				DebugLocation(42, 8);
				PushFollow(Follow._filterexpression_in_comparisonexpression265);
				filterexpression42=filterexpression();
				PopFollow();

				adaptor.AddChild(root_0, filterexpression42.Tree);
				DebugLocation(42, 25);
				char_literal43=(IToken)Match(input,30,Follow._30_in_comparisonexpression267); 
				char_literal43_tree = (object)adaptor.Create(char_literal43);
				adaptor.AddChild(root_0, char_literal43_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("comparisonexpression", 10);
			LeaveRule("comparisonexpression", 10);
			LeaveRule_comparisonexpression();
		}
		DebugLocation(42, 27);
		} finally { DebugExitRule(GrammarFileName, "comparisonexpression"); }
		return retval;

	}
	// $ANTLR end "comparisonexpression"

	partial void EnterRule_orderby();
	partial void LeaveRule_orderby();
	// $ANTLR start "orderby"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:1: orderby : ORDERBY ^ orderbylist ;
	[GrammarRule("orderby")]
	private AstParserRuleReturnScope<object, IToken> orderby()
	{
		EnterRule_orderby();
		EnterRule("orderby", 11);
		TraceIn("orderby", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ORDERBY44 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderbylist45 = default(AstParserRuleReturnScope<object, IToken>);

		object ORDERBY44_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderby");
		DebugLocation(44, 23);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:45:2: ( ORDERBY ^ orderbylist )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:45:4: ORDERBY ^ orderbylist
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(45, 11);
			ORDERBY44=(IToken)Match(input,ORDERBY,Follow._ORDERBY_in_orderby276); 
			ORDERBY44_tree = (object)adaptor.Create(ORDERBY44);
			root_0 = (object)adaptor.BecomeRoot(ORDERBY44_tree, root_0);
			DebugLocation(45, 13);
			PushFollow(Follow._orderbylist_in_orderby279);
			orderbylist45=orderbylist();
			PopFollow();

			adaptor.AddChild(root_0, orderbylist45.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby", 11);
			LeaveRule("orderby", 11);
			LeaveRule_orderby();
		}
		DebugLocation(45, 23);
		} finally { DebugExitRule(GrammarFileName, "orderby"); }
		return retval;

	}
	// $ANTLR end "orderby"

	partial void EnterRule_orderbylist();
	partial void LeaveRule_orderbylist();
	// $ANTLR start "orderbylist"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:47:1: orderbylist : orderpropertyname ( ',' ! orderpropertyname )* ;
	[GrammarRule("orderbylist")]
	private AstParserRuleReturnScope<object, IToken> orderbylist()
	{
		EnterRule_orderbylist();
		EnterRule("orderbylist", 12);
		TraceIn("orderbylist", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderpropertyname46 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orderpropertyname48 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal47_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderbylist");
		DebugLocation(47, 46);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:2: ( orderpropertyname ( ',' ! orderpropertyname )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:4: orderpropertyname ( ',' ! orderpropertyname )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(48, 4);
			PushFollow(Follow._orderpropertyname_in_orderbylist289);
			orderpropertyname46=orderpropertyname();
			PopFollow();

			adaptor.AddChild(root_0, orderpropertyname46.Tree);
			DebugLocation(48, 22);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:22: ( ',' ! orderpropertyname )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if ((LA13_1==31))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:23: ',' ! orderpropertyname
					{
					DebugLocation(48, 26);
					char_literal47=(IToken)Match(input,31,Follow._31_in_orderbylist292); 
					DebugLocation(48, 28);
					PushFollow(Follow._orderpropertyname_in_orderbylist295);
					orderpropertyname48=orderpropertyname();
					PopFollow();

					adaptor.AddChild(root_0, orderpropertyname48.Tree);

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderbylist", 12);
			LeaveRule("orderbylist", 12);
			LeaveRule_orderbylist();
		}
		DebugLocation(48, 46);
		} finally { DebugExitRule(GrammarFileName, "orderbylist"); }
		return retval;

	}
	// $ANTLR end "orderbylist"

	partial void EnterRule_orderpropertyname();
	partial void LeaveRule_orderpropertyname();
	// $ANTLR start "orderpropertyname"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:50:1: orderpropertyname : ( propertyname -> ^( ASC propertyname ) | propertyname ( SPACE ! ( ASC | DESC ) ^) );
	[GrammarRule("orderpropertyname")]
	private AstParserRuleReturnScope<object, IToken> orderpropertyname()
	{
		EnterRule_orderpropertyname();
		EnterRule("orderpropertyname", 13);
		TraceIn("orderpropertyname", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE51 = default(IToken);
		IToken set52 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname49 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname50 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE51_tree = default(object);
		object set52_tree = default(object);
		RewriteRuleSubtreeStream stream_propertyname=new RewriteRuleSubtreeStream(adaptor,"rule propertyname");
		try { DebugEnterRule(GrammarFileName, "orderpropertyname");
		DebugLocation(50, 39);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:2: ( propertyname -> ^( ASC propertyname ) | propertyname ( SPACE ! ( ASC | DESC ) ^) )
			int alt14=2;
			try { DebugEnterDecision(14, false);
			try
			{
				alt14 = dfa14.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:4: propertyname
				{
				DebugLocation(51, 4);
				PushFollow(Follow._propertyname_in_orderpropertyname306);
				propertyname49=propertyname();
				PopFollow();

				stream_propertyname.Add(propertyname49.Tree);


				{
				// AST REWRITE
				// elements: propertyname
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 51:17: -> ^( ASC propertyname )
				{
					DebugLocation(51, 20);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:20: ^( ASC propertyname )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(51, 22);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ASC, "ASC"), root_1);

					DebugLocation(51, 26);
					adaptor.AddChild(root_1, stream_propertyname.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:52:5: propertyname ( SPACE ! ( ASC | DESC ) ^)
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(52, 5);
				PushFollow(Follow._propertyname_in_orderpropertyname320);
				propertyname50=propertyname();
				PopFollow();

				adaptor.AddChild(root_0, propertyname50.Tree);
				DebugLocation(52, 18);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:52:18: ( SPACE ! ( ASC | DESC ) ^)
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:52:19: SPACE ! ( ASC | DESC ) ^
				{
				DebugLocation(52, 24);
				SPACE51=(IToken)Match(input,SPACE,Follow._SPACE_in_orderpropertyname323); 
				DebugLocation(52, 38);

				set52=(IToken)input.LT(1);
				set52=(IToken)input.LT(1);
				if (input.LA(1)==ASC||input.LA(1)==DESC)
				{
					input.Consume();
					root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set52), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderpropertyname", 13);
			LeaveRule("orderpropertyname", 13);
			LeaveRule_orderpropertyname();
		}
		DebugLocation(52, 39);
		} finally { DebugExitRule(GrammarFileName, "orderpropertyname"); }
		return retval;

	}
	// $ANTLR end "orderpropertyname"

	partial void EnterRule_propertyname();
	partial void LeaveRule_propertyname();
	// $ANTLR start "propertyname"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:54:1: propertyname : IDENTIFIER ( '/' IDENTIFIER )* ;
	[GrammarRule("propertyname")]
	private AstParserRuleReturnScope<object, IToken> propertyname()
	{
		EnterRule_propertyname();
		EnterRule("propertyname", 14);
		TraceIn("propertyname", 14);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken IDENTIFIER53 = default(IToken);
		IToken char_literal54 = default(IToken);
		IToken IDENTIFIER55 = default(IToken);

		object IDENTIFIER53_tree = default(object);
		object char_literal54_tree = default(object);
		object IDENTIFIER55_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "propertyname");
		DebugLocation(54, 32);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:55:2: ( IDENTIFIER ( '/' IDENTIFIER )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:55:4: IDENTIFIER ( '/' IDENTIFIER )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(55, 4);
			IDENTIFIER53=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_propertyname343); 
			IDENTIFIER53_tree = (object)adaptor.Create(IDENTIFIER53);
			adaptor.AddChild(root_0, IDENTIFIER53_tree);
			DebugLocation(55, 16);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:55:16: ( '/' IDENTIFIER )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if ((LA15_1==32))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:55:17: '/' IDENTIFIER
					{
					DebugLocation(55, 17);
					char_literal54=(IToken)Match(input,32,Follow._32_in_propertyname347); 
					char_literal54_tree = (object)adaptor.Create(char_literal54);
					adaptor.AddChild(root_0, char_literal54_tree);
					DebugLocation(55, 21);
					IDENTIFIER55=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_propertyname349); 
					IDENTIFIER55_tree = (object)adaptor.Create(IDENTIFIER55);
					adaptor.AddChild(root_0, IDENTIFIER55_tree);

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyname", 14);
			LeaveRule("propertyname", 14);
			LeaveRule_propertyname();
		}
		DebugLocation(55, 32);
		} finally { DebugExitRule(GrammarFileName, "propertyname"); }
		return retval;

	}
	// $ANTLR end "propertyname"

	partial void EnterRule_filteroperator();
	partial void LeaveRule_filteroperator();
	// $ANTLR start "filteroperator"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:57:1: filteroperator : ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL );
	[GrammarRule("filteroperator")]
	private AstParserRuleReturnScope<object, IToken> filteroperator()
	{
		EnterRule_filteroperator();
		EnterRule("filteroperator", 15);
		TraceIn("filteroperator", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set56 = default(IToken);

		object set56_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filteroperator");
		DebugLocation(57, 85);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:2: ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(58, 2);

			set56=(IToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATERTHAN && input.LA(1)<=GREATERTHANOREQUAL)||(input.LA(1)>=LESSTHAN && input.LA(1)<=LESSTHANOREQUAL)||input.LA(1)==NOTEQUALS)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set56));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filteroperator", 15);
			LeaveRule("filteroperator", 15);
			LeaveRule_filteroperator();
		}
		DebugLocation(58, 85);
		} finally { DebugExitRule(GrammarFileName, "filteroperator"); }
		return retval;

	}
	// $ANTLR end "filteroperator"
	#endregion Rules


	#region DFA
	private DFA14 dfa14;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa14 = new DFA14( this );
	}

	private class DFA14 : DFA
	{
		private const string DFA14_eotS =
			"\x6\xFFFF";
		private const string DFA14_eofS =
			"\x1\xFFFF\x1\x3\x3\xFFFF\x1\x3";
		private const string DFA14_minS =
			"\x1\xE\x1\xB\x1\xE\x2\xFFFF\x1\xB";
		private const string DFA14_maxS =
			"\x1\xE\x1\x20\x1\xE\x2\xFFFF\x1\x20";
		private const string DFA14_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA14_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA14_transitionS =
			{
				"\x1\x1",
				"\x1\x3\xA\xFFFF\x3\x3\x1\x4\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x1\x2",
				"\x1\x5",
				"",
				"",
				"\x1\x3\xA\xFFFF\x3\x3\x1\x4\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x1\x2"
			};

		private static readonly short[] DFA14_eot = DFA.UnpackEncodedString(DFA14_eotS);
		private static readonly short[] DFA14_eof = DFA.UnpackEncodedString(DFA14_eofS);
		private static readonly char[] DFA14_min = DFA.UnpackEncodedStringToUnsignedChars(DFA14_minS);
		private static readonly char[] DFA14_max = DFA.UnpackEncodedStringToUnsignedChars(DFA14_maxS);
		private static readonly short[] DFA14_accept = DFA.UnpackEncodedString(DFA14_acceptS);
		private static readonly short[] DFA14_special = DFA.UnpackEncodedString(DFA14_specialS);
		private static readonly short[][] DFA14_transition;

		static DFA14()
		{
			int numStates = DFA14_transitionS.Length;
			DFA14_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA14_transition[i] = DFA.UnpackEncodedString(DFA14_transitionS[i]);
			}
		}

		public DFA14( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 14;
			this.eot = DFA14_eot;
			this.eof = DFA14_eof;
			this.min = DFA14_min;
			this.max = DFA14_max;
			this.accept = DFA14_accept;
			this.special = DFA14_special;
			this.transition = DFA14_transition;
		}

		public override string Description { get { return "50:1: orderpropertyname : ( propertyname -> ^( ASC propertyname ) | propertyname ( SPACE ! ( ASC | DESC ) ^) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _param_in_prog55 = new BitSet(new ulong[]{0x19C00802UL});
		public static readonly BitSet _28_in_prog58 = new BitSet(new ulong[]{0x9C00800UL});
		public static readonly BitSet _param_in_prog61 = new BitSet(new ulong[]{0x19C00802UL});
		public static readonly BitSet _orderby_in_param74 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _top_in_param78 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _skip_in_param82 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _filter_in_param86 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_in_param90 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SKIP_in_skip101 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _INT_in_skip104 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _TOP_in_top115 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _INT_in_top118 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _FILTER_in_filter129 = new BitSet(new ulong[]{0x20084000UL});
		public static readonly BitSet _filterexpression_in_filter132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select142 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _propertyname_in_select145 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _31_in_select148 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _propertyname_in_select151 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _orexpression_in_filterexpression163 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _SPACE_in_filterexpression166 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _OR_in_filterexpression169 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _SPACE_in_filterexpression172 = new BitSet(new ulong[]{0x20084000UL});
		public static readonly BitSet _orexpression_in_filterexpression175 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _andexpression_in_orexpression187 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _SPACE_in_orexpression190 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _AND_in_orexpression193 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _SPACE_in_orexpression196 = new BitSet(new ulong[]{0x20084000UL});
		public static readonly BitSet _andexpression_in_orexpression199 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _NOT_in_andexpression211 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _SPACE_in_andexpression214 = new BitSet(new ulong[]{0x20004000UL});
		public static readonly BitSet _comparisonexpression_in_andexpression216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _comparisonexpression_in_andexpression221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_comparisonexpression232 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _SPACE_in_comparisonexpression234 = new BitSet(new ulong[]{0x133400UL});
		public static readonly BitSet _filteroperator_in_comparisonexpression237 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _SPACE_in_comparisonexpression240 = new BitSet(new ulong[]{0x4008180UL});
		public static readonly BitSet _INT_in_comparisonexpression244 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _BOOL_in_comparisonexpression249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_comparisonexpression253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATETIME_in_comparisonexpression257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _29_in_comparisonexpression263 = new BitSet(new ulong[]{0x20084000UL});
		public static readonly BitSet _filterexpression_in_comparisonexpression265 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_comparisonexpression267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDERBY_in_orderby276 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _orderbylist_in_orderby279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist289 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _31_in_orderbylist292 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist295 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _propertyname_in_orderpropertyname306 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_orderpropertyname320 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _SPACE_in_orderpropertyname323 = new BitSet(new ulong[]{0x220UL});
		public static readonly BitSet _set_in_orderpropertyname326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_propertyname343 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _32_in_propertyname347 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _IDENTIFIER_in_propertyname349 = new BitSet(new ulong[]{0x100000002UL});
	}
	#endregion Follow sets
}

} // namespace  LinqToQuerystring 
