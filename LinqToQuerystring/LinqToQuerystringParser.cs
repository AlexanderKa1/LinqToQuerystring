//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g 2013-04-06 15:02:51

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  LinqToQuerystring 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class LinqToQuerystringParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALLPAGES", "AND", "ASC", "ASSIGN", "BOOL", "DATETIME", "DESC", "EQUALS", "FILTER", "GREATERTHAN", "GREATERTHANOREQUAL", "IDENTIFIER", "INLINECOUNT", "INT", "LESSTHAN", "LESSTHANOREQUAL", "NEWLINE", "NONE", "NOT", "NOTEQUALS", "OR", "ORDERBY", "SELECT", "SKIP", "SPACE", "STRING", "TOP", "'&'", "'('", "')'", "','", "'/'"
	};
	public const int EOF=-1;
	public const int ALLPAGES=4;
	public const int AND=5;
	public const int ASC=6;
	public const int ASSIGN=7;
	public const int BOOL=8;
	public const int DATETIME=9;
	public const int DESC=10;
	public const int EQUALS=11;
	public const int FILTER=12;
	public const int GREATERTHAN=13;
	public const int GREATERTHANOREQUAL=14;
	public const int IDENTIFIER=15;
	public const int INLINECOUNT=16;
	public const int INT=17;
	public const int LESSTHAN=18;
	public const int LESSTHANOREQUAL=19;
	public const int NEWLINE=20;
	public const int NONE=21;
	public const int NOT=22;
	public const int NOTEQUALS=23;
	public const int OR=24;
	public const int ORDERBY=25;
	public const int SELECT=26;
	public const int SKIP=27;
	public const int SPACE=28;
	public const int STRING=29;
	public const int TOP=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;

	public LinqToQuerystringParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public LinqToQuerystringParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return LinqToQuerystringParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:13:8: public prog : ( param ( '&' ! param )* )* ;
	[GrammarRule("prog")]
	public AstParserRuleReturnScope<object, IToken> prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		TraceIn("prog", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal2 = default(IToken);
		AstParserRuleReturnScope<object, IToken> param1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> param3 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal2_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(13, 25);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:2: ( ( param ( '&' ! param )* )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:4: ( param ( '&' ! param )* )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(14, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:4: ( param ( '&' ! param )* )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==FILTER||LA2_1==INLINECOUNT||(LA2_1>=ORDERBY && LA2_1<=SKIP)||LA2_1==TOP))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:5: param ( '&' ! param )*
					{
					DebugLocation(14, 5);
					PushFollow(Follow._param_in_prog55);
					param1=param();
					PopFollow();

					adaptor.AddChild(root_0, param1.Tree);
					DebugLocation(14, 11);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:11: ( '&' ! param )*
					try { DebugEnterSubRule(1);
					while (true)
					{
						int alt1=2;
						try { DebugEnterDecision(1, false);
						int LA1_1 = input.LA(1);

						if ((LA1_1==31))
						{
							alt1 = 1;
						}


						} finally { DebugExitDecision(1); }
						switch ( alt1 )
						{
						case 1:
							DebugEnterAlt(1);
							// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:14:12: '&' ! param
							{
							DebugLocation(14, 15);
							char_literal2=(IToken)Match(input,31,Follow._31_in_prog58); 
							DebugLocation(14, 17);
							PushFollow(Follow._param_in_prog61);
							param3=param();
							PopFollow();

							adaptor.AddChild(root_0, param3.Tree);

							}
							break;

						default:
							goto loop1;
						}
					}

					loop1:
						;

					} finally { DebugExitSubRule(1); }


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
		}
		DebugLocation(14, 25);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	partial void EnterRule_param();
	partial void LeaveRule_param();
	// $ANTLR start "param"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:1: param : ( orderby | top | skip | filter | select | inlinecount ) ;
	[GrammarRule("param")]
	private AstParserRuleReturnScope<object, IToken> param()
	{
		EnterRule_param();
		EnterRule("param", 2);
		TraceIn("param", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> orderby4 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> top5 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> skip6 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filter7 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> select8 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> inlinecount9 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "param");
		DebugLocation(16, 62);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:7: ( ( orderby | top | skip | filter | select | inlinecount ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:9: ( orderby | top | skip | filter | select | inlinecount )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(16, 9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:9: ( orderby | top | skip | filter | select | inlinecount )
			int alt3=6;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case ORDERBY:
				{
				alt3 = 1;
				}
				break;
			case TOP:
				{
				alt3 = 2;
				}
				break;
			case SKIP:
				{
				alt3 = 3;
				}
				break;
			case FILTER:
				{
				alt3 = 4;
				}
				break;
			case SELECT:
				{
				alt3 = 5;
				}
				break;
			case INLINECOUNT:
				{
				alt3 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:10: orderby
				{
				DebugLocation(16, 10);
				PushFollow(Follow._orderby_in_param74);
				orderby4=orderby();
				PopFollow();

				adaptor.AddChild(root_0, orderby4.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:20: top
				{
				DebugLocation(16, 20);
				PushFollow(Follow._top_in_param78);
				top5=top();
				PopFollow();

				adaptor.AddChild(root_0, top5.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:26: skip
				{
				DebugLocation(16, 26);
				PushFollow(Follow._skip_in_param82);
				skip6=skip();
				PopFollow();

				adaptor.AddChild(root_0, skip6.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:33: filter
				{
				DebugLocation(16, 33);
				PushFollow(Follow._filter_in_param86);
				filter7=filter();
				PopFollow();

				adaptor.AddChild(root_0, filter7.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:42: select
				{
				DebugLocation(16, 42);
				PushFollow(Follow._select_in_param90);
				select8=select();
				PopFollow();

				adaptor.AddChild(root_0, select8.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:16:51: inlinecount
				{
				DebugLocation(16, 51);
				PushFollow(Follow._inlinecount_in_param94);
				inlinecount9=inlinecount();
				PopFollow();

				adaptor.AddChild(root_0, inlinecount9.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("param", 2);
			LeaveRule("param", 2);
			LeaveRule_param();
		}
		DebugLocation(16, 62);
		} finally { DebugExitRule(GrammarFileName, "param"); }
		return retval;

	}
	// $ANTLR end "param"

	partial void EnterRule_skip();
	partial void LeaveRule_skip();
	// $ANTLR start "skip"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:18:1: skip : SKIP ^ ( INT )+ ;
	[GrammarRule("skip")]
	private AstParserRuleReturnScope<object, IToken> skip()
	{
		EnterRule_skip();
		EnterRule("skip", 3);
		TraceIn("skip", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SKIP10 = default(IToken);
		IToken INT11 = default(IToken);

		object SKIP10_tree = default(object);
		object INT11_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "skip");
		DebugLocation(18, 13);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:19:2: ( SKIP ^ ( INT )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:19:4: SKIP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(19, 8);
			SKIP10=(IToken)Match(input,SKIP,Follow._SKIP_in_skip105); 
			SKIP10_tree = (object)adaptor.Create(SKIP10);
			root_0 = (object)adaptor.BecomeRoot(SKIP10_tree, root_0);
			DebugLocation(19, 10);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:19:10: ( INT )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==INT))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:19:10: INT
					{
					DebugLocation(19, 10);
					INT11=(IToken)Match(input,INT,Follow._INT_in_skip108); 
					INT11_tree = (object)adaptor.Create(INT11);
					adaptor.AddChild(root_0, INT11_tree);

					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("skip", 3);
			LeaveRule("skip", 3);
			LeaveRule_skip();
		}
		DebugLocation(19, 13);
		} finally { DebugExitRule(GrammarFileName, "skip"); }
		return retval;

	}
	// $ANTLR end "skip"

	partial void EnterRule_top();
	partial void LeaveRule_top();
	// $ANTLR start "top"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:21:1: top : TOP ^ ( INT )+ ;
	[GrammarRule("top")]
	private AstParserRuleReturnScope<object, IToken> top()
	{
		EnterRule_top();
		EnterRule("top", 4);
		TraceIn("top", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken TOP12 = default(IToken);
		IToken INT13 = default(IToken);

		object TOP12_tree = default(object);
		object INT13_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "top");
		DebugLocation(21, 12);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:22:2: ( TOP ^ ( INT )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:22:4: TOP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(22, 7);
			TOP12=(IToken)Match(input,TOP,Follow._TOP_in_top119); 
			TOP12_tree = (object)adaptor.Create(TOP12);
			root_0 = (object)adaptor.BecomeRoot(TOP12_tree, root_0);
			DebugLocation(22, 9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:22:9: ( INT )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==INT))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:22:9: INT
					{
					DebugLocation(22, 9);
					INT13=(IToken)Match(input,INT,Follow._INT_in_top122); 
					INT13_tree = (object)adaptor.Create(INT13);
					adaptor.AddChild(root_0, INT13_tree);

					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top", 4);
			LeaveRule("top", 4);
			LeaveRule_top();
		}
		DebugLocation(22, 12);
		} finally { DebugExitRule(GrammarFileName, "top"); }
		return retval;

	}
	// $ANTLR end "top"

	partial void EnterRule_filter();
	partial void LeaveRule_filter();
	// $ANTLR start "filter"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:24:1: filter : FILTER ^ filterexpression ;
	[GrammarRule("filter")]
	private AstParserRuleReturnScope<object, IToken> filter()
	{
		EnterRule_filter();
		EnterRule("filter", 5);
		TraceIn("filter", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken FILTER14 = default(IToken);
		AstParserRuleReturnScope<object, IToken> filterexpression15 = default(AstParserRuleReturnScope<object, IToken>);

		object FILTER14_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filter");
		DebugLocation(24, 27);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:25:2: ( FILTER ^ filterexpression )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:25:4: FILTER ^ filterexpression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(25, 10);
			FILTER14=(IToken)Match(input,FILTER,Follow._FILTER_in_filter133); 
			FILTER14_tree = (object)adaptor.Create(FILTER14);
			root_0 = (object)adaptor.BecomeRoot(FILTER14_tree, root_0);
			DebugLocation(25, 12);
			PushFollow(Follow._filterexpression_in_filter136);
			filterexpression15=filterexpression();
			PopFollow();

			adaptor.AddChild(root_0, filterexpression15.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filter", 5);
			LeaveRule("filter", 5);
			LeaveRule_filter();
		}
		DebugLocation(25, 27);
		} finally { DebugExitRule(GrammarFileName, "filter"); }
		return retval;

	}
	// $ANTLR end "filter"

	partial void EnterRule_select();
	partial void LeaveRule_select();
	// $ANTLR start "select"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:27:1: select : SELECT ^ propertyname ( ',' ! propertyname )* ;
	[GrammarRule("select")]
	private AstParserRuleReturnScope<object, IToken> select()
	{
		EnterRule_select();
		EnterRule("select", 6);
		TraceIn("select", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SELECT16 = default(IToken);
		IToken char_literal18 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname17 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname19 = default(AstParserRuleReturnScope<object, IToken>);

		object SELECT16_tree = default(object);
		object char_literal18_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "select");
		DebugLocation(27, 44);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:28:2: ( SELECT ^ propertyname ( ',' ! propertyname )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:28:4: SELECT ^ propertyname ( ',' ! propertyname )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(28, 10);
			SELECT16=(IToken)Match(input,SELECT,Follow._SELECT_in_select146); 
			SELECT16_tree = (object)adaptor.Create(SELECT16);
			root_0 = (object)adaptor.BecomeRoot(SELECT16_tree, root_0);
			DebugLocation(28, 12);
			PushFollow(Follow._propertyname_in_select149);
			propertyname17=propertyname();
			PopFollow();

			adaptor.AddChild(root_0, propertyname17.Tree);
			DebugLocation(28, 25);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:28:25: ( ',' ! propertyname )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==34))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:28:26: ',' ! propertyname
					{
					DebugLocation(28, 29);
					char_literal18=(IToken)Match(input,34,Follow._34_in_select152); 
					DebugLocation(28, 31);
					PushFollow(Follow._propertyname_in_select155);
					propertyname19=propertyname();
					PopFollow();

					adaptor.AddChild(root_0, propertyname19.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select", 6);
			LeaveRule("select", 6);
			LeaveRule_select();
		}
		DebugLocation(28, 44);
		} finally { DebugExitRule(GrammarFileName, "select"); }
		return retval;

	}
	// $ANTLR end "select"

	partial void EnterRule_inlinecount();
	partial void LeaveRule_inlinecount();
	// $ANTLR start "inlinecount"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:30:1: inlinecount : INLINECOUNT ^ ( ALLPAGES | NONE ) ;
	[GrammarRule("inlinecount")]
	private AstParserRuleReturnScope<object, IToken> inlinecount()
	{
		EnterRule_inlinecount();
		EnterRule("inlinecount", 7);
		TraceIn("inlinecount", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken INLINECOUNT20 = default(IToken);
		IToken set21 = default(IToken);

		object INLINECOUNT20_tree = default(object);
		object set21_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "inlinecount");
		DebugLocation(30, 31);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:31:2: ( INLINECOUNT ^ ( ALLPAGES | NONE ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:31:4: INLINECOUNT ^ ( ALLPAGES | NONE )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(31, 15);
			INLINECOUNT20=(IToken)Match(input,INLINECOUNT,Follow._INLINECOUNT_in_inlinecount167); 
			INLINECOUNT20_tree = (object)adaptor.Create(INLINECOUNT20);
			root_0 = (object)adaptor.BecomeRoot(INLINECOUNT20_tree, root_0);
			DebugLocation(31, 17);

			set21=(IToken)input.LT(1);
			if (input.LA(1)==ALLPAGES||input.LA(1)==NONE)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set21));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inlinecount", 7);
			LeaveRule("inlinecount", 7);
			LeaveRule_inlinecount();
		}
		DebugLocation(31, 31);
		} finally { DebugExitRule(GrammarFileName, "inlinecount"); }
		return retval;

	}
	// $ANTLR end "inlinecount"

	partial void EnterRule_filterexpression();
	partial void LeaveRule_filterexpression();
	// $ANTLR start "filterexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:33:1: filterexpression : orexpression ( SPACE ! OR ^ SPACE ! orexpression )* ;
	[GrammarRule("filterexpression")]
	private AstParserRuleReturnScope<object, IToken> filterexpression()
	{
		EnterRule_filterexpression();
		EnterRule("filterexpression", 8);
		TraceIn("filterexpression", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE23 = default(IToken);
		IToken OR24 = default(IToken);
		IToken SPACE25 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orexpression22 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orexpression26 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE23_tree = default(object);
		object OR24_tree = default(object);
		object SPACE25_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filterexpression");
		DebugLocation(33, 49);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:2: ( orexpression ( SPACE ! OR ^ SPACE ! orexpression )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:4: orexpression ( SPACE ! OR ^ SPACE ! orexpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(34, 4);
			PushFollow(Follow._orexpression_in_filterexpression184);
			orexpression22=orexpression();
			PopFollow();

			adaptor.AddChild(root_0, orexpression22.Tree);
			DebugLocation(34, 17);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:17: ( SPACE ! OR ^ SPACE ! orexpression )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==SPACE))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:18: SPACE ! OR ^ SPACE ! orexpression
					{
					DebugLocation(34, 23);
					SPACE23=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression187); 
					DebugLocation(34, 27);
					OR24=(IToken)Match(input,OR,Follow._OR_in_filterexpression190); 
					OR24_tree = (object)adaptor.Create(OR24);
					root_0 = (object)adaptor.BecomeRoot(OR24_tree, root_0);
					DebugLocation(34, 34);
					SPACE25=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression193); 
					DebugLocation(34, 36);
					PushFollow(Follow._orexpression_in_filterexpression196);
					orexpression26=orexpression();
					PopFollow();

					adaptor.AddChild(root_0, orexpression26.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filterexpression", 8);
			LeaveRule("filterexpression", 8);
			LeaveRule_filterexpression();
		}
		DebugLocation(34, 49);
		} finally { DebugExitRule(GrammarFileName, "filterexpression"); }
		return retval;

	}
	// $ANTLR end "filterexpression"

	partial void EnterRule_orexpression();
	partial void LeaveRule_orexpression();
	// $ANTLR start "orexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:1: orexpression : andexpression ( SPACE ! AND ^ SPACE ! andexpression )* ;
	[GrammarRule("orexpression")]
	private AstParserRuleReturnScope<object, IToken> orexpression()
	{
		EnterRule_orexpression();
		EnterRule("orexpression", 9);
		TraceIn("orexpression", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE28 = default(IToken);
		IToken AND29 = default(IToken);
		IToken SPACE30 = default(IToken);
		AstParserRuleReturnScope<object, IToken> andexpression27 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> andexpression31 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE28_tree = default(object);
		object AND29_tree = default(object);
		object SPACE30_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orexpression");
		DebugLocation(36, 52);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:37:2: ( andexpression ( SPACE ! AND ^ SPACE ! andexpression )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:37:4: andexpression ( SPACE ! AND ^ SPACE ! andexpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(37, 4);
			PushFollow(Follow._andexpression_in_orexpression208);
			andexpression27=andexpression();
			PopFollow();

			adaptor.AddChild(root_0, andexpression27.Tree);
			DebugLocation(37, 18);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:37:18: ( SPACE ! AND ^ SPACE ! andexpression )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==SPACE))
				{
					int LA8_2 = input.LA(2);

					if ((LA8_2==AND))
					{
						alt8 = 1;
					}


				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:37:19: SPACE ! AND ^ SPACE ! andexpression
					{
					DebugLocation(37, 24);
					SPACE28=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression211); 
					DebugLocation(37, 29);
					AND29=(IToken)Match(input,AND,Follow._AND_in_orexpression214); 
					AND29_tree = (object)adaptor.Create(AND29);
					root_0 = (object)adaptor.BecomeRoot(AND29_tree, root_0);
					DebugLocation(37, 36);
					SPACE30=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression217); 
					DebugLocation(37, 38);
					PushFollow(Follow._andexpression_in_orexpression220);
					andexpression31=andexpression();
					PopFollow();

					adaptor.AddChild(root_0, andexpression31.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orexpression", 9);
			LeaveRule("orexpression", 9);
			LeaveRule_orexpression();
		}
		DebugLocation(37, 52);
		} finally { DebugExitRule(GrammarFileName, "orexpression"); }
		return retval;

	}
	// $ANTLR end "orexpression"

	partial void EnterRule_andexpression();
	partial void LeaveRule_andexpression();
	// $ANTLR start "andexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:39:1: andexpression : ( NOT ^ SPACE comparisonexpression | comparisonexpression );
	[GrammarRule("andexpression")]
	private AstParserRuleReturnScope<object, IToken> andexpression()
	{
		EnterRule_andexpression();
		EnterRule("andexpression", 10);
		TraceIn("andexpression", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NOT32 = default(IToken);
		IToken SPACE33 = default(IToken);
		AstParserRuleReturnScope<object, IToken> comparisonexpression34 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> comparisonexpression35 = default(AstParserRuleReturnScope<object, IToken>);

		object NOT32_tree = default(object);
		object SPACE33_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "andexpression");
		DebugLocation(39, 23);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:40:2: ( NOT ^ SPACE comparisonexpression | comparisonexpression )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==NOT))
			{
				alt9 = 1;
			}
			else if ((LA9_1==IDENTIFIER||LA9_1==32))
			{
				alt9 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:40:4: NOT ^ SPACE comparisonexpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(40, 7);
				NOT32=(IToken)Match(input,NOT,Follow._NOT_in_andexpression232); 
				NOT32_tree = (object)adaptor.Create(NOT32);
				root_0 = (object)adaptor.BecomeRoot(NOT32_tree, root_0);
				DebugLocation(40, 9);
				SPACE33=(IToken)Match(input,SPACE,Follow._SPACE_in_andexpression235); 
				SPACE33_tree = (object)adaptor.Create(SPACE33);
				adaptor.AddChild(root_0, SPACE33_tree);
				DebugLocation(40, 15);
				PushFollow(Follow._comparisonexpression_in_andexpression237);
				comparisonexpression34=comparisonexpression();
				PopFollow();

				adaptor.AddChild(root_0, comparisonexpression34.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:41:4: comparisonexpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(41, 4);
				PushFollow(Follow._comparisonexpression_in_andexpression242);
				comparisonexpression35=comparisonexpression();
				PopFollow();

				adaptor.AddChild(root_0, comparisonexpression35.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andexpression", 10);
			LeaveRule("andexpression", 10);
			LeaveRule_andexpression();
		}
		DebugLocation(41, 23);
		} finally { DebugExitRule(GrammarFileName, "andexpression"); }
		return retval;

	}
	// $ANTLR end "andexpression"

	partial void EnterRule_comparisonexpression();
	partial void LeaveRule_comparisonexpression();
	// $ANTLR start "comparisonexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:43:1: comparisonexpression : ( propertyname SPACE ! filteroperator ^ SPACE ! ( ( INT )+ | BOOL | STRING | DATETIME ) | '(' filterexpression ')' );
	[GrammarRule("comparisonexpression")]
	private AstParserRuleReturnScope<object, IToken> comparisonexpression()
	{
		EnterRule_comparisonexpression();
		EnterRule("comparisonexpression", 11);
		TraceIn("comparisonexpression", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE37 = default(IToken);
		IToken SPACE39 = default(IToken);
		IToken INT40 = default(IToken);
		IToken BOOL41 = default(IToken);
		IToken STRING42 = default(IToken);
		IToken DATETIME43 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken char_literal46 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname36 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filteroperator38 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filterexpression45 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE37_tree = default(object);
		object SPACE39_tree = default(object);
		object INT40_tree = default(object);
		object BOOL41_tree = default(object);
		object STRING42_tree = default(object);
		object DATETIME43_tree = default(object);
		object char_literal44_tree = default(object);
		object char_literal46_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "comparisonexpression");
		DebugLocation(43, 27);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:2: ( propertyname SPACE ! filteroperator ^ SPACE ! ( ( INT )+ | BOOL | STRING | DATETIME ) | '(' filterexpression ')' )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==IDENTIFIER))
			{
				alt12 = 1;
			}
			else if ((LA12_1==32))
			{
				alt12 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:4: propertyname SPACE ! filteroperator ^ SPACE ! ( ( INT )+ | BOOL | STRING | DATETIME )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(44, 4);
				PushFollow(Follow._propertyname_in_comparisonexpression253);
				propertyname36=propertyname();
				PopFollow();

				adaptor.AddChild(root_0, propertyname36.Tree);
				DebugLocation(44, 22);
				SPACE37=(IToken)Match(input,SPACE,Follow._SPACE_in_comparisonexpression255); 
				DebugLocation(44, 38);
				PushFollow(Follow._filteroperator_in_comparisonexpression258);
				filteroperator38=filteroperator();
				PopFollow();

				root_0 = (object)adaptor.BecomeRoot(filteroperator38.Tree, root_0);
				DebugLocation(44, 45);
				SPACE39=(IToken)Match(input,SPACE,Follow._SPACE_in_comparisonexpression261); 
				DebugLocation(44, 47);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:47: ( ( INT )+ | BOOL | STRING | DATETIME )
				int alt11=4;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				switch (input.LA(1))
				{
				case INT:
					{
					alt11 = 1;
					}
					break;
				case BOOL:
					{
					alt11 = 2;
					}
					break;
				case STRING:
					{
					alt11 = 3;
					}
					break;
				case DATETIME:
					{
					alt11 = 4;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:48: ( INT )+
					{
					DebugLocation(44, 48);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:48: ( INT )+
					int cnt10=0;
					try { DebugEnterSubRule(10);
					while (true)
					{
						int alt10=2;
						try { DebugEnterDecision(10, false);
						int LA10_1 = input.LA(1);

						if ((LA10_1==INT))
						{
							alt10 = 1;
						}


						} finally { DebugExitDecision(10); }
						switch (alt10)
						{
						case 1:
							DebugEnterAlt(1);
							// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:48: INT
							{
							DebugLocation(44, 48);
							INT40=(IToken)Match(input,INT,Follow._INT_in_comparisonexpression265); 
							INT40_tree = (object)adaptor.Create(INT40);
							adaptor.AddChild(root_0, INT40_tree);

							}
							break;

						default:
							if (cnt10 >= 1)
								goto loop10;

							EarlyExitException eee10 = new EarlyExitException( 10, input );
							DebugRecognitionException(eee10);
							throw eee10;
						}
						cnt10++;
					}
					loop10:
						;

					} finally { DebugExitSubRule(10); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:55: BOOL
					{
					DebugLocation(44, 55);
					BOOL41=(IToken)Match(input,BOOL,Follow._BOOL_in_comparisonexpression270); 
					BOOL41_tree = (object)adaptor.Create(BOOL41);
					adaptor.AddChild(root_0, BOOL41_tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:62: STRING
					{
					DebugLocation(44, 62);
					STRING42=(IToken)Match(input,STRING,Follow._STRING_in_comparisonexpression274); 
					STRING42_tree = (object)adaptor.Create(STRING42);
					adaptor.AddChild(root_0, STRING42_tree);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:71: DATETIME
					{
					DebugLocation(44, 71);
					DATETIME43=(IToken)Match(input,DATETIME,Follow._DATETIME_in_comparisonexpression278); 
					DATETIME43_tree = (object)adaptor.Create(DATETIME43);
					adaptor.AddChild(root_0, DATETIME43_tree);

					}
					break;

				}
				} finally { DebugExitSubRule(11); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:45:4: '(' filterexpression ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(45, 4);
				char_literal44=(IToken)Match(input,32,Follow._32_in_comparisonexpression284); 
				char_literal44_tree = (object)adaptor.Create(char_literal44);
				adaptor.AddChild(root_0, char_literal44_tree);
				DebugLocation(45, 8);
				PushFollow(Follow._filterexpression_in_comparisonexpression286);
				filterexpression45=filterexpression();
				PopFollow();

				adaptor.AddChild(root_0, filterexpression45.Tree);
				DebugLocation(45, 25);
				char_literal46=(IToken)Match(input,33,Follow._33_in_comparisonexpression288); 
				char_literal46_tree = (object)adaptor.Create(char_literal46);
				adaptor.AddChild(root_0, char_literal46_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("comparisonexpression", 11);
			LeaveRule("comparisonexpression", 11);
			LeaveRule_comparisonexpression();
		}
		DebugLocation(45, 27);
		} finally { DebugExitRule(GrammarFileName, "comparisonexpression"); }
		return retval;

	}
	// $ANTLR end "comparisonexpression"

	partial void EnterRule_orderby();
	partial void LeaveRule_orderby();
	// $ANTLR start "orderby"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:47:1: orderby : ORDERBY ^ orderbylist ;
	[GrammarRule("orderby")]
	private AstParserRuleReturnScope<object, IToken> orderby()
	{
		EnterRule_orderby();
		EnterRule("orderby", 12);
		TraceIn("orderby", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ORDERBY47 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderbylist48 = default(AstParserRuleReturnScope<object, IToken>);

		object ORDERBY47_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderby");
		DebugLocation(47, 23);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:2: ( ORDERBY ^ orderbylist )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:4: ORDERBY ^ orderbylist
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(48, 11);
			ORDERBY47=(IToken)Match(input,ORDERBY,Follow._ORDERBY_in_orderby297); 
			ORDERBY47_tree = (object)adaptor.Create(ORDERBY47);
			root_0 = (object)adaptor.BecomeRoot(ORDERBY47_tree, root_0);
			DebugLocation(48, 13);
			PushFollow(Follow._orderbylist_in_orderby300);
			orderbylist48=orderbylist();
			PopFollow();

			adaptor.AddChild(root_0, orderbylist48.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby", 12);
			LeaveRule("orderby", 12);
			LeaveRule_orderby();
		}
		DebugLocation(48, 23);
		} finally { DebugExitRule(GrammarFileName, "orderby"); }
		return retval;

	}
	// $ANTLR end "orderby"

	partial void EnterRule_orderbylist();
	partial void LeaveRule_orderbylist();
	// $ANTLR start "orderbylist"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:50:1: orderbylist : orderpropertyname ( ',' ! orderpropertyname )* ;
	[GrammarRule("orderbylist")]
	private AstParserRuleReturnScope<object, IToken> orderbylist()
	{
		EnterRule_orderbylist();
		EnterRule("orderbylist", 13);
		TraceIn("orderbylist", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal50 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderpropertyname49 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orderpropertyname51 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal50_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderbylist");
		DebugLocation(50, 46);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:2: ( orderpropertyname ( ',' ! orderpropertyname )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:4: orderpropertyname ( ',' ! orderpropertyname )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(51, 4);
			PushFollow(Follow._orderpropertyname_in_orderbylist310);
			orderpropertyname49=orderpropertyname();
			PopFollow();

			adaptor.AddChild(root_0, orderpropertyname49.Tree);
			DebugLocation(51, 22);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:22: ( ',' ! orderpropertyname )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if ((LA13_1==34))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:23: ',' ! orderpropertyname
					{
					DebugLocation(51, 26);
					char_literal50=(IToken)Match(input,34,Follow._34_in_orderbylist313); 
					DebugLocation(51, 28);
					PushFollow(Follow._orderpropertyname_in_orderbylist316);
					orderpropertyname51=orderpropertyname();
					PopFollow();

					adaptor.AddChild(root_0, orderpropertyname51.Tree);

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderbylist", 13);
			LeaveRule("orderbylist", 13);
			LeaveRule_orderbylist();
		}
		DebugLocation(51, 46);
		} finally { DebugExitRule(GrammarFileName, "orderbylist"); }
		return retval;

	}
	// $ANTLR end "orderbylist"

	partial void EnterRule_orderpropertyname();
	partial void LeaveRule_orderpropertyname();
	// $ANTLR start "orderpropertyname"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:53:1: orderpropertyname : ( propertyname -> ^( ASC propertyname ) | propertyname ( SPACE ! ( ASC | DESC ) ^) );
	[GrammarRule("orderpropertyname")]
	private AstParserRuleReturnScope<object, IToken> orderpropertyname()
	{
		EnterRule_orderpropertyname();
		EnterRule("orderpropertyname", 14);
		TraceIn("orderpropertyname", 14);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE54 = default(IToken);
		IToken set55 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname52 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname53 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE54_tree = default(object);
		object set55_tree = default(object);
		RewriteRuleSubtreeStream stream_propertyname=new RewriteRuleSubtreeStream(adaptor,"rule propertyname");
		try { DebugEnterRule(GrammarFileName, "orderpropertyname");
		DebugLocation(53, 39);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:54:2: ( propertyname -> ^( ASC propertyname ) | propertyname ( SPACE ! ( ASC | DESC ) ^) )
			int alt14=2;
			try { DebugEnterDecision(14, false);
			try
			{
				alt14 = dfa14.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:54:4: propertyname
				{
				DebugLocation(54, 4);
				PushFollow(Follow._propertyname_in_orderpropertyname327);
				propertyname52=propertyname();
				PopFollow();

				stream_propertyname.Add(propertyname52.Tree);


				{
				// AST REWRITE
				// elements: propertyname
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 54:17: -> ^( ASC propertyname )
				{
					DebugLocation(54, 20);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:54:20: ^( ASC propertyname )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(54, 22);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ASC, "ASC"), root_1);

					DebugLocation(54, 26);
					adaptor.AddChild(root_1, stream_propertyname.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:55:5: propertyname ( SPACE ! ( ASC | DESC ) ^)
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(55, 5);
				PushFollow(Follow._propertyname_in_orderpropertyname341);
				propertyname53=propertyname();
				PopFollow();

				adaptor.AddChild(root_0, propertyname53.Tree);
				DebugLocation(55, 18);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:55:18: ( SPACE ! ( ASC | DESC ) ^)
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:55:19: SPACE ! ( ASC | DESC ) ^
				{
				DebugLocation(55, 24);
				SPACE54=(IToken)Match(input,SPACE,Follow._SPACE_in_orderpropertyname344); 
				DebugLocation(55, 38);

				set55=(IToken)input.LT(1);
				set55=(IToken)input.LT(1);
				if (input.LA(1)==ASC||input.LA(1)==DESC)
				{
					input.Consume();
					root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set55), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderpropertyname", 14);
			LeaveRule("orderpropertyname", 14);
			LeaveRule_orderpropertyname();
		}
		DebugLocation(55, 39);
		} finally { DebugExitRule(GrammarFileName, "orderpropertyname"); }
		return retval;

	}
	// $ANTLR end "orderpropertyname"

	partial void EnterRule_propertyname();
	partial void LeaveRule_propertyname();
	// $ANTLR start "propertyname"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:57:1: propertyname : IDENTIFIER ( '/' IDENTIFIER )* ;
	[GrammarRule("propertyname")]
	private AstParserRuleReturnScope<object, IToken> propertyname()
	{
		EnterRule_propertyname();
		EnterRule("propertyname", 15);
		TraceIn("propertyname", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken IDENTIFIER56 = default(IToken);
		IToken char_literal57 = default(IToken);
		IToken IDENTIFIER58 = default(IToken);

		object IDENTIFIER56_tree = default(object);
		object char_literal57_tree = default(object);
		object IDENTIFIER58_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "propertyname");
		DebugLocation(57, 32);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:2: ( IDENTIFIER ( '/' IDENTIFIER )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:4: IDENTIFIER ( '/' IDENTIFIER )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(58, 4);
			IDENTIFIER56=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_propertyname364); 
			IDENTIFIER56_tree = (object)adaptor.Create(IDENTIFIER56);
			adaptor.AddChild(root_0, IDENTIFIER56_tree);
			DebugLocation(58, 16);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:16: ( '/' IDENTIFIER )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if ((LA15_1==35))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:17: '/' IDENTIFIER
					{
					DebugLocation(58, 17);
					char_literal57=(IToken)Match(input,35,Follow._35_in_propertyname368); 
					char_literal57_tree = (object)adaptor.Create(char_literal57);
					adaptor.AddChild(root_0, char_literal57_tree);
					DebugLocation(58, 21);
					IDENTIFIER58=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_propertyname370); 
					IDENTIFIER58_tree = (object)adaptor.Create(IDENTIFIER58);
					adaptor.AddChild(root_0, IDENTIFIER58_tree);

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyname", 15);
			LeaveRule("propertyname", 15);
			LeaveRule_propertyname();
		}
		DebugLocation(58, 32);
		} finally { DebugExitRule(GrammarFileName, "propertyname"); }
		return retval;

	}
	// $ANTLR end "propertyname"

	partial void EnterRule_filteroperator();
	partial void LeaveRule_filteroperator();
	// $ANTLR start "filteroperator"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:60:1: filteroperator : ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL );
	[GrammarRule("filteroperator")]
	private AstParserRuleReturnScope<object, IToken> filteroperator()
	{
		EnterRule_filteroperator();
		EnterRule("filteroperator", 16);
		TraceIn("filteroperator", 16);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set59 = default(IToken);

		object set59_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filteroperator");
		DebugLocation(60, 85);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:61:2: ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(61, 2);

			set59=(IToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATERTHAN && input.LA(1)<=GREATERTHANOREQUAL)||(input.LA(1)>=LESSTHAN && input.LA(1)<=LESSTHANOREQUAL)||input.LA(1)==NOTEQUALS)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set59));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filteroperator", 16);
			LeaveRule("filteroperator", 16);
			LeaveRule_filteroperator();
		}
		DebugLocation(61, 85);
		} finally { DebugExitRule(GrammarFileName, "filteroperator"); }
		return retval;

	}
	// $ANTLR end "filteroperator"
	#endregion Rules


	#region DFA
	private DFA14 dfa14;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa14 = new DFA14( this );
	}

	private class DFA14 : DFA
	{
		private const string DFA14_eotS =
			"\x6\xFFFF";
		private const string DFA14_eofS =
			"\x1\xFFFF\x1\x3\x3\xFFFF\x1\x3";
		private const string DFA14_minS =
			"\x1\xF\x1\xC\x1\xF\x2\xFFFF\x1\xC";
		private const string DFA14_maxS =
			"\x1\xF\x1\x23\x1\xF\x2\xFFFF\x1\x23";
		private const string DFA14_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA14_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA14_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x3\xFFFF\x1\x3\x8\xFFFF\x3\x3\x1\x4\x1\xFFFF\x2\x3\x2\xFFFF\x1"+
				"\x3\x1\x2",
				"\x1\x5",
				"",
				"",
				"\x1\x3\x3\xFFFF\x1\x3\x8\xFFFF\x3\x3\x1\x4\x1\xFFFF\x2\x3\x2\xFFFF\x1"+
				"\x3\x1\x2"
			};

		private static readonly short[] DFA14_eot = DFA.UnpackEncodedString(DFA14_eotS);
		private static readonly short[] DFA14_eof = DFA.UnpackEncodedString(DFA14_eofS);
		private static readonly char[] DFA14_min = DFA.UnpackEncodedStringToUnsignedChars(DFA14_minS);
		private static readonly char[] DFA14_max = DFA.UnpackEncodedStringToUnsignedChars(DFA14_maxS);
		private static readonly short[] DFA14_accept = DFA.UnpackEncodedString(DFA14_acceptS);
		private static readonly short[] DFA14_special = DFA.UnpackEncodedString(DFA14_specialS);
		private static readonly short[][] DFA14_transition;

		static DFA14()
		{
			int numStates = DFA14_transitionS.Length;
			DFA14_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA14_transition[i] = DFA.UnpackEncodedString(DFA14_transitionS[i]);
			}
		}

		public DFA14( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 14;
			this.eot = DFA14_eot;
			this.eof = DFA14_eof;
			this.min = DFA14_min;
			this.max = DFA14_max;
			this.accept = DFA14_accept;
			this.special = DFA14_special;
			this.transition = DFA14_transition;
		}

		public override string Description { get { return "53:1: orderpropertyname : ( propertyname -> ^( ASC propertyname ) | propertyname ( SPACE ! ( ASC | DESC ) ^) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _param_in_prog55 = new BitSet(new ulong[]{0xCE011002UL});
		public static readonly BitSet _31_in_prog58 = new BitSet(new ulong[]{0x4E011000UL});
		public static readonly BitSet _param_in_prog61 = new BitSet(new ulong[]{0xCE011002UL});
		public static readonly BitSet _orderby_in_param74 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _top_in_param78 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _skip_in_param82 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _filter_in_param86 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_in_param90 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _inlinecount_in_param94 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SKIP_in_skip105 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _INT_in_skip108 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _TOP_in_top119 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _INT_in_top122 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _FILTER_in_filter133 = new BitSet(new ulong[]{0x100408000UL});
		public static readonly BitSet _filterexpression_in_filter136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select146 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _propertyname_in_select149 = new BitSet(new ulong[]{0x400000002UL});
		public static readonly BitSet _34_in_select152 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _propertyname_in_select155 = new BitSet(new ulong[]{0x400000002UL});
		public static readonly BitSet _INLINECOUNT_in_inlinecount167 = new BitSet(new ulong[]{0x200010UL});
		public static readonly BitSet _set_in_inlinecount170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orexpression_in_filterexpression184 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _SPACE_in_filterexpression187 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _OR_in_filterexpression190 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _SPACE_in_filterexpression193 = new BitSet(new ulong[]{0x100408000UL});
		public static readonly BitSet _orexpression_in_filterexpression196 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _andexpression_in_orexpression208 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _SPACE_in_orexpression211 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _AND_in_orexpression214 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _SPACE_in_orexpression217 = new BitSet(new ulong[]{0x100408000UL});
		public static readonly BitSet _andexpression_in_orexpression220 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _NOT_in_andexpression232 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _SPACE_in_andexpression235 = new BitSet(new ulong[]{0x100008000UL});
		public static readonly BitSet _comparisonexpression_in_andexpression237 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _comparisonexpression_in_andexpression242 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_comparisonexpression253 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _SPACE_in_comparisonexpression255 = new BitSet(new ulong[]{0x8C6800UL});
		public static readonly BitSet _filteroperator_in_comparisonexpression258 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _SPACE_in_comparisonexpression261 = new BitSet(new ulong[]{0x20020300UL});
		public static readonly BitSet _INT_in_comparisonexpression265 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _BOOL_in_comparisonexpression270 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_comparisonexpression274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATETIME_in_comparisonexpression278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_comparisonexpression284 = new BitSet(new ulong[]{0x100408000UL});
		public static readonly BitSet _filterexpression_in_comparisonexpression286 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_comparisonexpression288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDERBY_in_orderby297 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _orderbylist_in_orderby300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist310 = new BitSet(new ulong[]{0x400000002UL});
		public static readonly BitSet _34_in_orderbylist313 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist316 = new BitSet(new ulong[]{0x400000002UL});
		public static readonly BitSet _propertyname_in_orderpropertyname327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_orderpropertyname341 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _SPACE_in_orderpropertyname344 = new BitSet(new ulong[]{0x440UL});
		public static readonly BitSet _set_in_orderpropertyname347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_propertyname364 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _35_in_propertyname368 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENTIFIER_in_propertyname370 = new BitSet(new ulong[]{0x800000002UL});
	}
	#endregion Follow sets
}

} // namespace  LinqToQuerystring 
