//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g 2013-04-06 17:46:53

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  LinqToQuerystring 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class LinqToQuerystringLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ALLPAGES=4;
	public const int AND=5;
	public const int ASC=6;
	public const int ASSIGN=7;
	public const int BOOL=8;
	public const int DATETIME=9;
	public const int DESC=10;
	public const int EQUALS=11;
	public const int FILTER=12;
	public const int GREATERTHAN=13;
	public const int GREATERTHANOREQUAL=14;
	public const int IDENTIFIER=15;
	public const int INLINECOUNT=16;
	public const int INT=17;
	public const int LESSTHAN=18;
	public const int LESSTHANOREQUAL=19;
	public const int NEWLINE=20;
	public const int NONE=21;
	public const int NOT=22;
	public const int NOTEQUALS=23;
	public const int OR=24;
	public const int ORDERBY=25;
	public const int SELECT=26;
	public const int SKIP=27;
	public const int SPACE=28;
	public const int STRING=29;
	public const int TOP=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;

    // delegates
    // delegators

	public LinqToQuerystringLexer()
	{
		OnCreated();
	}

	public LinqToQuerystringLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public LinqToQuerystringLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__31();
	partial void LeaveRule_T__31();

	// $ANTLR start "T__31"
	[GrammarRule("T__31")]
	private void mT__31()
	{
		EnterRule_T__31();
		EnterRule("T__31", 1);
		TraceIn("T__31", 1);
		try
		{
			int _type = T__31;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:9:7: ( '&' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:9:9: '&'
			{
			DebugLocation(9, 9);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__31", 1);
			LeaveRule("T__31", 1);
			LeaveRule_T__31();
		}
	}
	// $ANTLR end "T__31"

	partial void EnterRule_T__32();
	partial void LeaveRule_T__32();

	// $ANTLR start "T__32"
	[GrammarRule("T__32")]
	private void mT__32()
	{
		EnterRule_T__32();
		EnterRule("T__32", 2);
		TraceIn("T__32", 2);
		try
		{
			int _type = T__32;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:10:7: ( '(' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:10:9: '('
			{
			DebugLocation(10, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__32", 2);
			LeaveRule("T__32", 2);
			LeaveRule_T__32();
		}
	}
	// $ANTLR end "T__32"

	partial void EnterRule_T__33();
	partial void LeaveRule_T__33();

	// $ANTLR start "T__33"
	[GrammarRule("T__33")]
	private void mT__33()
	{
		EnterRule_T__33();
		EnterRule("T__33", 3);
		TraceIn("T__33", 3);
		try
		{
			int _type = T__33;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:11:7: ( ')' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:11:9: ')'
			{
			DebugLocation(11, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__33", 3);
			LeaveRule("T__33", 3);
			LeaveRule_T__33();
		}
	}
	// $ANTLR end "T__33"

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 4);
		TraceIn("T__34", 4);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:12:7: ( ',' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:12:9: ','
			{
			DebugLocation(12, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 4);
			LeaveRule("T__34", 4);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_T__35();
	partial void LeaveRule_T__35();

	// $ANTLR start "T__35"
	[GrammarRule("T__35")]
	private void mT__35()
	{
		EnterRule_T__35();
		EnterRule("T__35", 5);
		TraceIn("T__35", 5);
		try
		{
			int _type = T__35;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:13:7: ( '/' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:13:9: '/'
			{
			DebugLocation(13, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__35", 5);
			LeaveRule("T__35", 5);
			LeaveRule_T__35();
		}
	}
	// $ANTLR end "T__35"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 6);
		TraceIn("ASSIGN", 6);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:65:2: ( '=' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:65:5: '='
			{
			DebugLocation(65, 5);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 6);
			LeaveRule("ASSIGN", 6);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_EQUALS();
	partial void LeaveRule_EQUALS();

	// $ANTLR start "EQUALS"
	[GrammarRule("EQUALS")]
	private void mEQUALS()
	{
		EnterRule_EQUALS();
		EnterRule("EQUALS", 7);
		TraceIn("EQUALS", 7);
		try
		{
			int _type = EQUALS;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:68:2: ( 'eq' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:68:4: 'eq'
			{
			DebugLocation(68, 4);
			Match("eq"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUALS", 7);
			LeaveRule("EQUALS", 7);
			LeaveRule_EQUALS();
		}
	}
	// $ANTLR end "EQUALS"

	partial void EnterRule_NOTEQUALS();
	partial void LeaveRule_NOTEQUALS();

	// $ANTLR start "NOTEQUALS"
	[GrammarRule("NOTEQUALS")]
	private void mNOTEQUALS()
	{
		EnterRule_NOTEQUALS();
		EnterRule("NOTEQUALS", 8);
		TraceIn("NOTEQUALS", 8);
		try
		{
			int _type = NOTEQUALS;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:71:2: ( 'ne' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:71:4: 'ne'
			{
			DebugLocation(71, 4);
			Match("ne"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOTEQUALS", 8);
			LeaveRule("NOTEQUALS", 8);
			LeaveRule_NOTEQUALS();
		}
	}
	// $ANTLR end "NOTEQUALS"

	partial void EnterRule_GREATERTHAN();
	partial void LeaveRule_GREATERTHAN();

	// $ANTLR start "GREATERTHAN"
	[GrammarRule("GREATERTHAN")]
	private void mGREATERTHAN()
	{
		EnterRule_GREATERTHAN();
		EnterRule("GREATERTHAN", 9);
		TraceIn("GREATERTHAN", 9);
		try
		{
			int _type = GREATERTHAN;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:74:2: ( 'gt' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:74:4: 'gt'
			{
			DebugLocation(74, 4);
			Match("gt"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATERTHAN", 9);
			LeaveRule("GREATERTHAN", 9);
			LeaveRule_GREATERTHAN();
		}
	}
	// $ANTLR end "GREATERTHAN"

	partial void EnterRule_GREATERTHANOREQUAL();
	partial void LeaveRule_GREATERTHANOREQUAL();

	// $ANTLR start "GREATERTHANOREQUAL"
	[GrammarRule("GREATERTHANOREQUAL")]
	private void mGREATERTHANOREQUAL()
	{
		EnterRule_GREATERTHANOREQUAL();
		EnterRule("GREATERTHANOREQUAL", 10);
		TraceIn("GREATERTHANOREQUAL", 10);
		try
		{
			int _type = GREATERTHANOREQUAL;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:77:2: ( 'ge' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:77:4: 'ge'
			{
			DebugLocation(77, 4);
			Match("ge"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATERTHANOREQUAL", 10);
			LeaveRule("GREATERTHANOREQUAL", 10);
			LeaveRule_GREATERTHANOREQUAL();
		}
	}
	// $ANTLR end "GREATERTHANOREQUAL"

	partial void EnterRule_LESSTHAN();
	partial void LeaveRule_LESSTHAN();

	// $ANTLR start "LESSTHAN"
	[GrammarRule("LESSTHAN")]
	private void mLESSTHAN()
	{
		EnterRule_LESSTHAN();
		EnterRule("LESSTHAN", 11);
		TraceIn("LESSTHAN", 11);
		try
		{
			int _type = LESSTHAN;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:80:2: ( 'lt' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:80:4: 'lt'
			{
			DebugLocation(80, 4);
			Match("lt"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESSTHAN", 11);
			LeaveRule("LESSTHAN", 11);
			LeaveRule_LESSTHAN();
		}
	}
	// $ANTLR end "LESSTHAN"

	partial void EnterRule_LESSTHANOREQUAL();
	partial void LeaveRule_LESSTHANOREQUAL();

	// $ANTLR start "LESSTHANOREQUAL"
	[GrammarRule("LESSTHANOREQUAL")]
	private void mLESSTHANOREQUAL()
	{
		EnterRule_LESSTHANOREQUAL();
		EnterRule("LESSTHANOREQUAL", 12);
		TraceIn("LESSTHANOREQUAL", 12);
		try
		{
			int _type = LESSTHANOREQUAL;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:83:2: ( 'le' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:83:4: 'le'
			{
			DebugLocation(83, 4);
			Match("le"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESSTHANOREQUAL", 12);
			LeaveRule("LESSTHANOREQUAL", 12);
			LeaveRule_LESSTHANOREQUAL();
		}
	}
	// $ANTLR end "LESSTHANOREQUAL"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 13);
		TraceIn("NOT", 13);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:86:2: ( 'not' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:86:4: 'not'
			{
			DebugLocation(86, 4);
			Match("not"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 13);
			LeaveRule("NOT", 13);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 14);
		TraceIn("OR", 14);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:89:2: ( 'or' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:89:4: 'or'
			{
			DebugLocation(89, 4);
			Match("or"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 14);
			LeaveRule("OR", 14);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 15);
		TraceIn("AND", 15);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:92:2: ( 'and' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:92:5: 'and'
			{
			DebugLocation(92, 5);
			Match("and"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 15);
			LeaveRule("AND", 15);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_ASC();
	partial void LeaveRule_ASC();

	// $ANTLR start "ASC"
	[GrammarRule("ASC")]
	private void mASC()
	{
		EnterRule_ASC();
		EnterRule("ASC", 16);
		TraceIn("ASC", 16);
		try
		{
			int _type = ASC;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:95:2: ( 'asc' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:95:4: 'asc'
			{
			DebugLocation(95, 4);
			Match("asc"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASC", 16);
			LeaveRule("ASC", 16);
			LeaveRule_ASC();
		}
	}
	// $ANTLR end "ASC"

	partial void EnterRule_DESC();
	partial void LeaveRule_DESC();

	// $ANTLR start "DESC"
	[GrammarRule("DESC")]
	private void mDESC()
	{
		EnterRule_DESC();
		EnterRule("DESC", 17);
		TraceIn("DESC", 17);
		try
		{
			int _type = DESC;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:98:2: ( 'desc' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:98:4: 'desc'
			{
			DebugLocation(98, 4);
			Match("desc"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DESC", 17);
			LeaveRule("DESC", 17);
			LeaveRule_DESC();
		}
	}
	// $ANTLR end "DESC"

	partial void EnterRule_ALLPAGES();
	partial void LeaveRule_ALLPAGES();

	// $ANTLR start "ALLPAGES"
	[GrammarRule("ALLPAGES")]
	private void mALLPAGES()
	{
		EnterRule_ALLPAGES();
		EnterRule("ALLPAGES", 18);
		TraceIn("ALLPAGES", 18);
		try
		{
			int _type = ALLPAGES;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:101:2: ( 'allpages' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:101:5: 'allpages'
			{
			DebugLocation(101, 5);
			Match("allpages"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ALLPAGES", 18);
			LeaveRule("ALLPAGES", 18);
			LeaveRule_ALLPAGES();
		}
	}
	// $ANTLR end "ALLPAGES"

	partial void EnterRule_NONE();
	partial void LeaveRule_NONE();

	// $ANTLR start "NONE"
	[GrammarRule("NONE")]
	private void mNONE()
	{
		EnterRule_NONE();
		EnterRule("NONE", 19);
		TraceIn("NONE", 19);
		try
		{
			int _type = NONE;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:104:2: ( 'none' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:104:4: 'none'
			{
			DebugLocation(104, 4);
			Match("none"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NONE", 19);
			LeaveRule("NONE", 19);
			LeaveRule_NONE();
		}
	}
	// $ANTLR end "NONE"

	partial void EnterRule_SKIP();
	partial void LeaveRule_SKIP();

	// $ANTLR start "SKIP"
	[GrammarRule("SKIP")]
	private void mSKIP()
	{
		EnterRule_SKIP();
		EnterRule("SKIP", 20);
		TraceIn("SKIP", 20);
		try
		{
			int _type = SKIP;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:107:2: ( '$skip=' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:107:4: '$skip='
			{
			DebugLocation(107, 4);
			Match("$skip="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SKIP", 20);
			LeaveRule("SKIP", 20);
			LeaveRule_SKIP();
		}
	}
	// $ANTLR end "SKIP"

	partial void EnterRule_TOP();
	partial void LeaveRule_TOP();

	// $ANTLR start "TOP"
	[GrammarRule("TOP")]
	private void mTOP()
	{
		EnterRule_TOP();
		EnterRule("TOP", 21);
		TraceIn("TOP", 21);
		try
		{
			int _type = TOP;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:110:2: ( '$top=' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:110:4: '$top='
			{
			DebugLocation(110, 4);
			Match("$top="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TOP", 21);
			LeaveRule("TOP", 21);
			LeaveRule_TOP();
		}
	}
	// $ANTLR end "TOP"

	partial void EnterRule_FILTER();
	partial void LeaveRule_FILTER();

	// $ANTLR start "FILTER"
	[GrammarRule("FILTER")]
	private void mFILTER()
	{
		EnterRule_FILTER();
		EnterRule("FILTER", 22);
		TraceIn("FILTER", 22);
		try
		{
			int _type = FILTER;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:113:2: ( '$filter=' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:113:4: '$filter='
			{
			DebugLocation(113, 4);
			Match("$filter="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FILTER", 22);
			LeaveRule("FILTER", 22);
			LeaveRule_FILTER();
		}
	}
	// $ANTLR end "FILTER"

	partial void EnterRule_ORDERBY();
	partial void LeaveRule_ORDERBY();

	// $ANTLR start "ORDERBY"
	[GrammarRule("ORDERBY")]
	private void mORDERBY()
	{
		EnterRule_ORDERBY();
		EnterRule("ORDERBY", 23);
		TraceIn("ORDERBY", 23);
		try
		{
			int _type = ORDERBY;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:116:2: ( '$orderby=' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:116:4: '$orderby='
			{
			DebugLocation(116, 4);
			Match("$orderby="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ORDERBY", 23);
			LeaveRule("ORDERBY", 23);
			LeaveRule_ORDERBY();
		}
	}
	// $ANTLR end "ORDERBY"

	partial void EnterRule_SELECT();
	partial void LeaveRule_SELECT();

	// $ANTLR start "SELECT"
	[GrammarRule("SELECT")]
	private void mSELECT()
	{
		EnterRule_SELECT();
		EnterRule("SELECT", 24);
		TraceIn("SELECT", 24);
		try
		{
			int _type = SELECT;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:119:2: ( '$select=' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:119:4: '$select='
			{
			DebugLocation(119, 4);
			Match("$select="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SELECT", 24);
			LeaveRule("SELECT", 24);
			LeaveRule_SELECT();
		}
	}
	// $ANTLR end "SELECT"

	partial void EnterRule_INLINECOUNT();
	partial void LeaveRule_INLINECOUNT();

	// $ANTLR start "INLINECOUNT"
	[GrammarRule("INLINECOUNT")]
	private void mINLINECOUNT()
	{
		EnterRule_INLINECOUNT();
		EnterRule("INLINECOUNT", 25);
		TraceIn("INLINECOUNT", 25);
		try
		{
			int _type = INLINECOUNT;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:122:2: ( '$inlinecount=' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:122:4: '$inlinecount='
			{
			DebugLocation(122, 4);
			Match("$inlinecount="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INLINECOUNT", 25);
			LeaveRule("INLINECOUNT", 25);
			LeaveRule_INLINECOUNT();
		}
	}
	// $ANTLR end "INLINECOUNT"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 26);
		TraceIn("INT", 26);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:125:2: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:125:4: ( '0' .. '9' )+
			{
			DebugLocation(125, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:125:4: ( '0' .. '9' )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='0' && LA1_1<='9')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(125, 4);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 26);
			LeaveRule("INT", 26);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_BOOL();
	partial void LeaveRule_BOOL();

	// $ANTLR start "BOOL"
	[GrammarRule("BOOL")]
	private void mBOOL()
	{
		EnterRule_BOOL();
		EnterRule("BOOL", 27);
		TraceIn("BOOL", 27);
		try
		{
			int _type = BOOL;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:128:2: ( ( 'true' | 'false' ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:128:4: ( 'true' | 'false' )
			{
			DebugLocation(128, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:128:4: ( 'true' | 'false' )
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1=='t'))
			{
				alt2 = 1;
			}
			else if ((LA2_1=='f'))
			{
				alt2 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:128:5: 'true'
				{
				DebugLocation(128, 5);
				Match("true"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:128:14: 'false'
				{
				DebugLocation(128, 14);
				Match("false"); 


				}
				break;

			}
			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BOOL", 27);
			LeaveRule("BOOL", 27);
			LeaveRule_BOOL();
		}
	}
	// $ANTLR end "BOOL"

	partial void EnterRule_SPACE();
	partial void LeaveRule_SPACE();

	// $ANTLR start "SPACE"
	[GrammarRule("SPACE")]
	private void mSPACE()
	{
		EnterRule_SPACE();
		EnterRule("SPACE", 28);
		TraceIn("SPACE", 28);
		try
		{
			int _type = SPACE;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:131:2: ( ( ' ' | '\\t' )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:131:4: ( ' ' | '\\t' )+
			{
			DebugLocation(131, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:131:4: ( ' ' | '\\t' )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1=='\t'||LA3_1==' '))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(131, 4);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SPACE", 28);
			LeaveRule("SPACE", 28);
			LeaveRule_SPACE();
		}
	}
	// $ANTLR end "SPACE"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 29);
		TraceIn("NEWLINE", 29);
		try
		{
			int _type = NEWLINE;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:134:2: ( ( '\\r' | '\\n' )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:134:4: ( '\\r' | '\\n' )+
			{
			DebugLocation(134, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:134:4: ( '\\r' | '\\n' )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1=='\n'||LA4_1=='\r'))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(134, 4);
					input.Consume();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEWLINE", 29);
			LeaveRule("NEWLINE", 29);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	partial void EnterRule_IDENTIFIER();
	partial void LeaveRule_IDENTIFIER();

	// $ANTLR start "IDENTIFIER"
	[GrammarRule("IDENTIFIER")]
	private void mIDENTIFIER()
	{
		EnterRule_IDENTIFIER();
		EnterRule("IDENTIFIER", 30);
		TraceIn("IDENTIFIER", 30);
		try
		{
			int _type = IDENTIFIER;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:137:2: ( ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:137:4: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )+
			{
			DebugLocation(137, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:137:4: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if (((LA5_1>='0' && LA5_1<='9')||(LA5_1>='A' && LA5_1<='Z')||LA5_1=='_'||(LA5_1>='a' && LA5_1<='z')))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(137, 4);
					input.Consume();


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENTIFIER", 30);
			LeaveRule("IDENTIFIER", 30);
			LeaveRule_IDENTIFIER();
		}
	}
	// $ANTLR end "IDENTIFIER"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 31);
		TraceIn("STRING", 31);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:140:2: ( '\\'' ( '<' | '>' | 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | ' ' | '\\t' )+ '\\'' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:140:4: '\\'' ( '<' | '>' | 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | ' ' | '\\t' )+ '\\''
			{
			DebugLocation(140, 4);
			Match('\''); 
			DebugLocation(140, 9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:140:9: ( '<' | '>' | 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | ' ' | '\\t' )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1=='\t'||LA6_1==' '||(LA6_1>='0' && LA6_1<='9')||LA6_1=='<'||LA6_1=='>'||(LA6_1>='A' && LA6_1<='Z')||LA6_1=='_'||(LA6_1>='a' && LA6_1<='z')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(140, 9);
					input.Consume();


					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(140, 60);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 31);
			LeaveRule("STRING", 31);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_DATETIME();
	partial void LeaveRule_DATETIME();

	// $ANTLR start "DATETIME"
	[GrammarRule("DATETIME")]
	private void mDATETIME()
	{
		EnterRule_DATETIME();
		EnterRule("DATETIME", 32);
		TraceIn("DATETIME", 32);
		try
		{
			int _type = DATETIME;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:143:2: ( 'datetime\\'' ( '0' .. '9' )+ '-' ( '0' .. '9' )+ ( '-' )+ ( '0' .. '9' )+ 'T' ( '0' .. '9' )+ ':' ( '0' .. '9' )+ ( ':' ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )* )* '\\'' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:143:4: 'datetime\\'' ( '0' .. '9' )+ '-' ( '0' .. '9' )+ ( '-' )+ ( '0' .. '9' )+ 'T' ( '0' .. '9' )+ ':' ( '0' .. '9' )+ ( ':' ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )* )* '\\''
			{
			DebugLocation(143, 4);
			Match("datetime'"); 

			DebugLocation(143, 17);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:143:17: ( '0' .. '9' )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if (((LA7_1>='0' && LA7_1<='9')))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(143, 17);
					input.Consume();


					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(143, 27);
			Match('-'); 
			DebugLocation(143, 31);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:143:31: ( '0' .. '9' )+
			int cnt8=0;
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if (((LA8_1>='0' && LA8_1<='9')))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(143, 31);
					input.Consume();


					}
					break;

				default:
					if (cnt8 >= 1)
						goto loop8;

					EarlyExitException eee8 = new EarlyExitException( 8, input );
					DebugRecognitionException(eee8);
					throw eee8;
				}
				cnt8++;
			}
			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(143, 41);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:143:41: ( '-' )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1=='-'))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:143:41: '-'
					{
					DebugLocation(143, 41);
					Match('-'); 

					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(143, 47);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:143:47: ( '0' .. '9' )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if (((LA10_1>='0' && LA10_1<='9')))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(143, 47);
					input.Consume();


					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(143, 57);
			Match('T'); 
			DebugLocation(143, 61);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:143:61: ( '0' .. '9' )+
			int cnt11=0;
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if (((LA11_1>='0' && LA11_1<='9')))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(143, 61);
					input.Consume();


					}
					break;

				default:
					if (cnt11 >= 1)
						goto loop11;

					EarlyExitException eee11 = new EarlyExitException( 11, input );
					DebugRecognitionException(eee11);
					throw eee11;
				}
				cnt11++;
			}
			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(143, 71);
			Match(':'); 
			DebugLocation(143, 75);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:143:75: ( '0' .. '9' )+
			int cnt12=0;
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if (((LA12_1>='0' && LA12_1<='9')))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(143, 75);
					input.Consume();


					}
					break;

				default:
					if (cnt12 >= 1)
						goto loop12;

					EarlyExitException eee12 = new EarlyExitException( 12, input );
					DebugRecognitionException(eee12);
					throw eee12;
				}
				cnt12++;
			}
			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(143, 85);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:143:85: ( ':' ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )* )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==':'))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:143:86: ':' ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )*
					{
					DebugLocation(143, 86);
					Match(':'); 
					DebugLocation(143, 90);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:143:90: ( '0' .. '9' )+
					int cnt13=0;
					try { DebugEnterSubRule(13);
					while (true)
					{
						int alt13=2;
						try { DebugEnterDecision(13, false);
						int LA13_1 = input.LA(1);

						if (((LA13_1>='0' && LA13_1<='9')))
						{
							alt13 = 1;
						}


						} finally { DebugExitDecision(13); }
						switch (alt13)
						{
						case 1:
							DebugEnterAlt(1);
							// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
							{
							DebugLocation(143, 90);
							input.Consume();


							}
							break;

						default:
							if (cnt13 >= 1)
								goto loop13;

							EarlyExitException eee13 = new EarlyExitException( 13, input );
							DebugRecognitionException(eee13);
							throw eee13;
						}
						cnt13++;
					}
					loop13:
						;

					} finally { DebugExitSubRule(13); }

					DebugLocation(143, 100);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:143:100: ( '.' ( '0' .. '9' )+ )*
					try { DebugEnterSubRule(15);
					while (true)
					{
						int alt15=2;
						try { DebugEnterDecision(15, false);
						int LA15_1 = input.LA(1);

						if ((LA15_1=='.'))
						{
							alt15 = 1;
						}


						} finally { DebugExitDecision(15); }
						switch ( alt15 )
						{
						case 1:
							DebugEnterAlt(1);
							// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:143:101: '.' ( '0' .. '9' )+
							{
							DebugLocation(143, 101);
							Match('.'); 
							DebugLocation(143, 105);
							// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:143:105: ( '0' .. '9' )+
							int cnt14=0;
							try { DebugEnterSubRule(14);
							while (true)
							{
								int alt14=2;
								try { DebugEnterDecision(14, false);
								int LA14_1 = input.LA(1);

								if (((LA14_1>='0' && LA14_1<='9')))
								{
									alt14 = 1;
								}


								} finally { DebugExitDecision(14); }
								switch (alt14)
								{
								case 1:
									DebugEnterAlt(1);
									// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
									{
									DebugLocation(143, 105);
									input.Consume();


									}
									break;

								default:
									if (cnt14 >= 1)
										goto loop14;

									EarlyExitException eee14 = new EarlyExitException( 14, input );
									DebugRecognitionException(eee14);
									throw eee14;
								}
								cnt14++;
							}
							loop14:
								;

							} finally { DebugExitSubRule(14); }


							}
							break;

						default:
							goto loop15;
						}
					}

					loop15:
						;

					} finally { DebugExitSubRule(15); }


					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(143, 119);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DATETIME", 32);
			LeaveRule("DATETIME", 32);
			LeaveRule_DATETIME();
		}
	}
	// $ANTLR end "DATETIME"

	public override void mTokens()
	{
		// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:8: ( T__31 | T__32 | T__33 | T__34 | T__35 | ASSIGN | EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL | NOT | OR | AND | ASC | DESC | ALLPAGES | NONE | SKIP | TOP | FILTER | ORDERBY | SELECT | INLINECOUNT | INT | BOOL | SPACE | NEWLINE | IDENTIFIER | STRING | DATETIME )
		int alt17=32;
		try { DebugEnterDecision(17, false);
		try
		{
			alt17 = dfa17.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(17); }
		switch (alt17)
		{
		case 1:
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:10: T__31
			{
			DebugLocation(1, 10);
			mT__31(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:16: T__32
			{
			DebugLocation(1, 16);
			mT__32(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:22: T__33
			{
			DebugLocation(1, 22);
			mT__33(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:28: T__34
			{
			DebugLocation(1, 28);
			mT__34(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:34: T__35
			{
			DebugLocation(1, 34);
			mT__35(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:40: ASSIGN
			{
			DebugLocation(1, 40);
			mASSIGN(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:47: EQUALS
			{
			DebugLocation(1, 47);
			mEQUALS(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:54: NOTEQUALS
			{
			DebugLocation(1, 54);
			mNOTEQUALS(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:64: GREATERTHAN
			{
			DebugLocation(1, 64);
			mGREATERTHAN(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:76: GREATERTHANOREQUAL
			{
			DebugLocation(1, 76);
			mGREATERTHANOREQUAL(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:95: LESSTHAN
			{
			DebugLocation(1, 95);
			mLESSTHAN(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:104: LESSTHANOREQUAL
			{
			DebugLocation(1, 104);
			mLESSTHANOREQUAL(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:120: NOT
			{
			DebugLocation(1, 120);
			mNOT(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:124: OR
			{
			DebugLocation(1, 124);
			mOR(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:127: AND
			{
			DebugLocation(1, 127);
			mAND(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:131: ASC
			{
			DebugLocation(1, 131);
			mASC(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:135: DESC
			{
			DebugLocation(1, 135);
			mDESC(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:140: ALLPAGES
			{
			DebugLocation(1, 140);
			mALLPAGES(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:149: NONE
			{
			DebugLocation(1, 149);
			mNONE(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:154: SKIP
			{
			DebugLocation(1, 154);
			mSKIP(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:159: TOP
			{
			DebugLocation(1, 159);
			mTOP(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:163: FILTER
			{
			DebugLocation(1, 163);
			mFILTER(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:170: ORDERBY
			{
			DebugLocation(1, 170);
			mORDERBY(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:178: SELECT
			{
			DebugLocation(1, 178);
			mSELECT(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:185: INLINECOUNT
			{
			DebugLocation(1, 185);
			mINLINECOUNT(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:197: INT
			{
			DebugLocation(1, 197);
			mINT(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:201: BOOL
			{
			DebugLocation(1, 201);
			mBOOL(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:206: SPACE
			{
			DebugLocation(1, 206);
			mSPACE(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:212: NEWLINE
			{
			DebugLocation(1, 212);
			mNEWLINE(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:220: IDENTIFIER
			{
			DebugLocation(1, 220);
			mIDENTIFIER(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:231: STRING
			{
			DebugLocation(1, 231);
			mSTRING(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:238: DATETIME
			{
			DebugLocation(1, 238);
			mDATETIME(); 

			}
			break;

		}

	}


	#region DFA
	DFA17 dfa17;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa17 = new DFA17(this);
	}

	private class DFA17 : DFA
	{
		private const string DFA17_eotS =
			"\x7\xFFFF\x7\x14\x1\xFFFF\x1\x28\x2\x14\x4\xFFFF\x1\x2B\x1\x2C\x1\x14"+
			"\x1\x2F\x1\x30\x1\x31\x1\x32\x1\x33\x5\x14\x6\xFFFF\x2\x14\x2\xFFFF\x1"+
			"\x3D\x1\x14\x5\xFFFF\x1\x3F\x1\x40\x3\x14\x2\xFFFF\x2\x14\x1\xFFFF\x1"+
			"\x46\x2\xFFFF\x1\x14\x1\x48\x1\x14\x1\x4A\x1\x14\x1\xFFFF\x1\x14\x1\xFFFF"+
			"\x1\x14\x1\xFFFF\x1\x4A\x4\x14\x1\x52\x1\x14\x2\xFFFF";
		private const string DFA17_eofS =
			"\x54\xFFFF";
		private const string DFA17_minS =
			"\x1\x9\x6\xFFFF\x1\x71\x3\x65\x1\x72\x1\x6C\x1\x61\x1\x66\x1\x30\x1\x72"+
			"\x1\x61\x4\xFFFF\x2\x30\x1\x6E\x5\x30\x1\x64\x1\x63\x1\x6C\x1\x73\x1"+
			"\x74\x1\x65\x5\xFFFF\x1\x75\x1\x6C\x2\xFFFF\x1\x30\x1\x65\x5\xFFFF\x2"+
			"\x30\x1\x70\x1\x63\x1\x65\x2\xFFFF\x1\x65\x1\x73\x1\xFFFF\x1\x30\x2\xFFFF"+
			"\x1\x61\x1\x30\x1\x74\x1\x30\x1\x65\x1\xFFFF\x1\x67\x1\xFFFF\x1\x69\x1"+
			"\xFFFF\x1\x30\x1\x65\x1\x6D\x1\x73\x1\x65\x1\x30\x1\x27\x2\xFFFF";
		private const string DFA17_maxS =
			"\x1\x7A\x6\xFFFF\x1\x71\x1\x6F\x2\x74\x1\x72\x1\x73\x1\x65\x1\x74\x1"+
			"\x7A\x1\x72\x1\x61\x4\xFFFF\x2\x7A\x1\x74\x5\x7A\x1\x64\x1\x63\x1\x6C"+
			"\x1\x73\x1\x74\x1\x6B\x5\xFFFF\x1\x75\x1\x6C\x2\xFFFF\x1\x7A\x1\x65\x5"+
			"\xFFFF\x2\x7A\x1\x70\x1\x63\x1\x65\x2\xFFFF\x1\x65\x1\x73\x1\xFFFF\x1"+
			"\x7A\x2\xFFFF\x1\x61\x1\x7A\x1\x74\x1\x7A\x1\x65\x1\xFFFF\x1\x67\x1\xFFFF"+
			"\x1\x69\x1\xFFFF\x1\x7A\x1\x65\x1\x6D\x1\x73\x1\x65\x1\x7A\x1\x27\x2"+
			"\xFFFF";
		private const string DFA17_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\xB\xFFFF\x1\x1C\x1\x1D"+
			"\x1\x1E\x1\x1F\xE\xFFFF\x1\x15\x1\x16\x1\x17\x1\x19\x1\x1A\x2\xFFFF\x1"+
			"\x7\x1\x8\x2\xFFFF\x1\x9\x1\xA\x1\xB\x1\xC\x1\xE\x5\xFFFF\x1\x14\x1\x18"+
			"\x2\xFFFF\x1\xD\x1\xFFFF\x1\xF\x1\x10\x5\xFFFF\x1\x13\x1\xFFFF\x1\x11"+
			"\x1\xFFFF\x1\x1B\x7\xFFFF\x1\x12\x1\x20";
		private const string DFA17_specialS =
			"\x54\xFFFF}>";
		private static readonly string[] DFA17_transitionS =
			{
				"\x1\x12\x1\x13\x2\xFFFF\x1\x13\x12\xFFFF\x1\x12\x3\xFFFF\x1\xE\x1\xFFFF"+
				"\x1\x1\x1\x15\x1\x2\x1\x3\x2\xFFFF\x1\x4\x2\xFFFF\x1\x5\xA\xF\x3\xFFFF"+
				"\x1\x6\x3\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1\xC\x2\x14\x1\xD"+
				"\x1\x7\x1\x11\x1\x9\x4\x14\x1\xA\x1\x14\x1\x8\x1\xB\x4\x14\x1\x10\x6"+
				"\x14",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x16",
				"\x1\x17\x9\xFFFF\x1\x18",
				"\x1\x1A\xE\xFFFF\x1\x19",
				"\x1\x1C\xE\xFFFF\x1\x1B",
				"\x1\x1D",
				"\x1\x20\x1\xFFFF\x1\x1E\x4\xFFFF\x1\x1F",
				"\x1\x22\x3\xFFFF\x1\x21",
				"\x1\x25\x2\xFFFF\x1\x27\x5\xFFFF\x1\x26\x3\xFFFF\x1\x23\x1\x24",
				"\xA\xF\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\x1\x29",
				"\x1\x2A",
				"",
				"",
				"",
				"",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\x1\x2E\x5\xFFFF\x1\x2D",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\x1\x34",
				"\x1\x35",
				"\x1\x36",
				"\x1\x37",
				"\x1\x38",
				"\x1\x3A\x5\xFFFF\x1\x39",
				"",
				"",
				"",
				"",
				"",
				"\x1\x3B",
				"\x1\x3C",
				"",
				"",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\x1\x3E",
				"",
				"",
				"",
				"",
				"",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\x1\x41",
				"\x1\x42",
				"\x1\x43",
				"",
				"",
				"\x1\x44",
				"\x1\x45",
				"",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"",
				"",
				"\x1\x47",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\x1\x49",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\x1\x4B",
				"",
				"\x1\x4C",
				"",
				"\x1\x4D",
				"",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\x1\x4E",
				"\x1\x4F",
				"\x1\x50",
				"\x1\x51",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\x1\x53",
				"",
				""
			};

		private static readonly short[] DFA17_eot = DFA.UnpackEncodedString(DFA17_eotS);
		private static readonly short[] DFA17_eof = DFA.UnpackEncodedString(DFA17_eofS);
		private static readonly char[] DFA17_min = DFA.UnpackEncodedStringToUnsignedChars(DFA17_minS);
		private static readonly char[] DFA17_max = DFA.UnpackEncodedStringToUnsignedChars(DFA17_maxS);
		private static readonly short[] DFA17_accept = DFA.UnpackEncodedString(DFA17_acceptS);
		private static readonly short[] DFA17_special = DFA.UnpackEncodedString(DFA17_specialS);
		private static readonly short[][] DFA17_transition;

		static DFA17()
		{
			int numStates = DFA17_transitionS.Length;
			DFA17_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA17_transition[i] = DFA.UnpackEncodedString(DFA17_transitionS[i]);
			}
		}

		public DFA17( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 17;
			this.eot = DFA17_eot;
			this.eof = DFA17_eof;
			this.min = DFA17_min;
			this.max = DFA17_max;
			this.accept = DFA17_accept;
			this.special = DFA17_special;
			this.transition = DFA17_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__31 | T__32 | T__33 | T__34 | T__35 | ASSIGN | EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL | NOT | OR | AND | ASC | DESC | ALLPAGES | NONE | SKIP | TOP | FILTER | ORDERBY | SELECT | INLINECOUNT | INT | BOOL | SPACE | NEWLINE | IDENTIFIER | STRING | DATETIME );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  LinqToQuerystring 
