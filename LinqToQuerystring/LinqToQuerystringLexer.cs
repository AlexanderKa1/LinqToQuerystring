//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g 2013-05-28 18:52:09

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using LinqToQuerystring.Exceptions;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  LinqToQuerystring 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class LinqToQuerystringLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ALLPAGES=4;
	public const int AND=5;
	public const int ASC=6;
	public const int ASSIGN=7;
	public const int BOOL=8;
	public const int DATETIME=9;
	public const int DESC=10;
	public const int DYNAMICIDENTIFIER=11;
	public const int ENDSWITH=12;
	public const int EQUALS=13;
	public const int ESC_SEQ=14;
	public const int FILTER=15;
	public const int GREATERTHAN=16;
	public const int GREATERTHANOREQUAL=17;
	public const int HEX_DIGIT=18;
	public const int IDENTIFIER=19;
	public const int INLINECOUNT=20;
	public const int INT=21;
	public const int LESSTHAN=22;
	public const int LESSTHANOREQUAL=23;
	public const int NEWLINE=24;
	public const int NONE=25;
	public const int NOT=26;
	public const int NOTEQUALS=27;
	public const int OCTAL_ESC=28;
	public const int OR=29;
	public const int ORDERBY=30;
	public const int SELECT=31;
	public const int SKIP=32;
	public const int SPACE=33;
	public const int STARTSWITH=34;
	public const int STRING=35;
	public const int SUBSTRINGOF=36;
	public const int TOLOWER=37;
	public const int TOP=38;
	public const int UNICODE_ESC=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;

	public override void ReportError(RecognitionException e) {
	    if (this.input.LT(1) == '\\')
	    {
	        //This will be an invalid escape sequence
	        throw new InvalidEscapeSequenceException("\\" + (char)e.Character);
	    }

	    throw e;
	}


    // delegates
    // delegators

	public LinqToQuerystringLexer()
	{
		OnCreated();
	}

	public LinqToQuerystringLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public LinqToQuerystringLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 1);
		TraceIn("T__40", 1);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:23:7: ( '&' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:23:9: '&'
			{
			DebugLocation(23, 9);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 1);
			LeaveRule("T__40", 1);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 2);
		TraceIn("T__41", 2);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:24:7: ( '(' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:24:9: '('
			{
			DebugLocation(24, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 2);
			LeaveRule("T__41", 2);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 3);
		TraceIn("T__42", 3);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:25:7: ( ')' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:25:9: ')'
			{
			DebugLocation(25, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 3);
			LeaveRule("T__42", 3);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 4);
		TraceIn("T__43", 4);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:26:7: ( ',' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:26:9: ','
			{
			DebugLocation(26, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 4);
			LeaveRule("T__43", 4);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 5);
		TraceIn("T__44", 5);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:27:7: ( '/' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:27:9: '/'
			{
			DebugLocation(27, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 5);
			LeaveRule("T__44", 5);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 6);
		TraceIn("ASSIGN", 6);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:96:2: ( '=' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:96:5: '='
			{
			DebugLocation(96, 5);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 6);
			LeaveRule("ASSIGN", 6);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_EQUALS();
	partial void LeaveRule_EQUALS();

	// $ANTLR start "EQUALS"
	[GrammarRule("EQUALS")]
	private void mEQUALS()
	{
		EnterRule_EQUALS();
		EnterRule("EQUALS", 7);
		TraceIn("EQUALS", 7);
		try
		{
			int _type = EQUALS;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:99:2: ( 'eq' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:99:4: 'eq'
			{
			DebugLocation(99, 4);
			Match("eq"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUALS", 7);
			LeaveRule("EQUALS", 7);
			LeaveRule_EQUALS();
		}
	}
	// $ANTLR end "EQUALS"

	partial void EnterRule_NOTEQUALS();
	partial void LeaveRule_NOTEQUALS();

	// $ANTLR start "NOTEQUALS"
	[GrammarRule("NOTEQUALS")]
	private void mNOTEQUALS()
	{
		EnterRule_NOTEQUALS();
		EnterRule("NOTEQUALS", 8);
		TraceIn("NOTEQUALS", 8);
		try
		{
			int _type = NOTEQUALS;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:102:2: ( 'ne' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:102:4: 'ne'
			{
			DebugLocation(102, 4);
			Match("ne"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOTEQUALS", 8);
			LeaveRule("NOTEQUALS", 8);
			LeaveRule_NOTEQUALS();
		}
	}
	// $ANTLR end "NOTEQUALS"

	partial void EnterRule_GREATERTHAN();
	partial void LeaveRule_GREATERTHAN();

	// $ANTLR start "GREATERTHAN"
	[GrammarRule("GREATERTHAN")]
	private void mGREATERTHAN()
	{
		EnterRule_GREATERTHAN();
		EnterRule("GREATERTHAN", 9);
		TraceIn("GREATERTHAN", 9);
		try
		{
			int _type = GREATERTHAN;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:105:2: ( 'gt' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:105:4: 'gt'
			{
			DebugLocation(105, 4);
			Match("gt"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATERTHAN", 9);
			LeaveRule("GREATERTHAN", 9);
			LeaveRule_GREATERTHAN();
		}
	}
	// $ANTLR end "GREATERTHAN"

	partial void EnterRule_GREATERTHANOREQUAL();
	partial void LeaveRule_GREATERTHANOREQUAL();

	// $ANTLR start "GREATERTHANOREQUAL"
	[GrammarRule("GREATERTHANOREQUAL")]
	private void mGREATERTHANOREQUAL()
	{
		EnterRule_GREATERTHANOREQUAL();
		EnterRule("GREATERTHANOREQUAL", 10);
		TraceIn("GREATERTHANOREQUAL", 10);
		try
		{
			int _type = GREATERTHANOREQUAL;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:108:2: ( 'ge' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:108:4: 'ge'
			{
			DebugLocation(108, 4);
			Match("ge"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATERTHANOREQUAL", 10);
			LeaveRule("GREATERTHANOREQUAL", 10);
			LeaveRule_GREATERTHANOREQUAL();
		}
	}
	// $ANTLR end "GREATERTHANOREQUAL"

	partial void EnterRule_LESSTHAN();
	partial void LeaveRule_LESSTHAN();

	// $ANTLR start "LESSTHAN"
	[GrammarRule("LESSTHAN")]
	private void mLESSTHAN()
	{
		EnterRule_LESSTHAN();
		EnterRule("LESSTHAN", 11);
		TraceIn("LESSTHAN", 11);
		try
		{
			int _type = LESSTHAN;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:111:2: ( 'lt' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:111:4: 'lt'
			{
			DebugLocation(111, 4);
			Match("lt"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESSTHAN", 11);
			LeaveRule("LESSTHAN", 11);
			LeaveRule_LESSTHAN();
		}
	}
	// $ANTLR end "LESSTHAN"

	partial void EnterRule_LESSTHANOREQUAL();
	partial void LeaveRule_LESSTHANOREQUAL();

	// $ANTLR start "LESSTHANOREQUAL"
	[GrammarRule("LESSTHANOREQUAL")]
	private void mLESSTHANOREQUAL()
	{
		EnterRule_LESSTHANOREQUAL();
		EnterRule("LESSTHANOREQUAL", 12);
		TraceIn("LESSTHANOREQUAL", 12);
		try
		{
			int _type = LESSTHANOREQUAL;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:114:2: ( 'le' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:114:4: 'le'
			{
			DebugLocation(114, 4);
			Match("le"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESSTHANOREQUAL", 12);
			LeaveRule("LESSTHANOREQUAL", 12);
			LeaveRule_LESSTHANOREQUAL();
		}
	}
	// $ANTLR end "LESSTHANOREQUAL"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 13);
		TraceIn("NOT", 13);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:117:2: ( 'not' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:117:4: 'not'
			{
			DebugLocation(117, 4);
			Match("not"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 13);
			LeaveRule("NOT", 13);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 14);
		TraceIn("OR", 14);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:120:2: ( 'or' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:120:4: 'or'
			{
			DebugLocation(120, 4);
			Match("or"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 14);
			LeaveRule("OR", 14);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 15);
		TraceIn("AND", 15);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:123:2: ( 'and' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:123:5: 'and'
			{
			DebugLocation(123, 5);
			Match("and"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 15);
			LeaveRule("AND", 15);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_ASC();
	partial void LeaveRule_ASC();

	// $ANTLR start "ASC"
	[GrammarRule("ASC")]
	private void mASC()
	{
		EnterRule_ASC();
		EnterRule("ASC", 16);
		TraceIn("ASC", 16);
		try
		{
			int _type = ASC;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:126:2: ( 'asc' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:126:4: 'asc'
			{
			DebugLocation(126, 4);
			Match("asc"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASC", 16);
			LeaveRule("ASC", 16);
			LeaveRule_ASC();
		}
	}
	// $ANTLR end "ASC"

	partial void EnterRule_DESC();
	partial void LeaveRule_DESC();

	// $ANTLR start "DESC"
	[GrammarRule("DESC")]
	private void mDESC()
	{
		EnterRule_DESC();
		EnterRule("DESC", 17);
		TraceIn("DESC", 17);
		try
		{
			int _type = DESC;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:129:2: ( 'desc' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:129:4: 'desc'
			{
			DebugLocation(129, 4);
			Match("desc"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DESC", 17);
			LeaveRule("DESC", 17);
			LeaveRule_DESC();
		}
	}
	// $ANTLR end "DESC"

	partial void EnterRule_ALLPAGES();
	partial void LeaveRule_ALLPAGES();

	// $ANTLR start "ALLPAGES"
	[GrammarRule("ALLPAGES")]
	private void mALLPAGES()
	{
		EnterRule_ALLPAGES();
		EnterRule("ALLPAGES", 18);
		TraceIn("ALLPAGES", 18);
		try
		{
			int _type = ALLPAGES;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:132:2: ( 'allpages' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:132:5: 'allpages'
			{
			DebugLocation(132, 5);
			Match("allpages"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ALLPAGES", 18);
			LeaveRule("ALLPAGES", 18);
			LeaveRule_ALLPAGES();
		}
	}
	// $ANTLR end "ALLPAGES"

	partial void EnterRule_NONE();
	partial void LeaveRule_NONE();

	// $ANTLR start "NONE"
	[GrammarRule("NONE")]
	private void mNONE()
	{
		EnterRule_NONE();
		EnterRule("NONE", 19);
		TraceIn("NONE", 19);
		try
		{
			int _type = NONE;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:135:2: ( 'none' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:135:4: 'none'
			{
			DebugLocation(135, 4);
			Match("none"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NONE", 19);
			LeaveRule("NONE", 19);
			LeaveRule_NONE();
		}
	}
	// $ANTLR end "NONE"

	partial void EnterRule_SKIP();
	partial void LeaveRule_SKIP();

	// $ANTLR start "SKIP"
	[GrammarRule("SKIP")]
	private void mSKIP()
	{
		EnterRule_SKIP();
		EnterRule("SKIP", 20);
		TraceIn("SKIP", 20);
		try
		{
			int _type = SKIP;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:138:2: ( '$skip=' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:138:4: '$skip='
			{
			DebugLocation(138, 4);
			Match("$skip="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SKIP", 20);
			LeaveRule("SKIP", 20);
			LeaveRule_SKIP();
		}
	}
	// $ANTLR end "SKIP"

	partial void EnterRule_TOP();
	partial void LeaveRule_TOP();

	// $ANTLR start "TOP"
	[GrammarRule("TOP")]
	private void mTOP()
	{
		EnterRule_TOP();
		EnterRule("TOP", 21);
		TraceIn("TOP", 21);
		try
		{
			int _type = TOP;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:141:2: ( '$top=' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:141:4: '$top='
			{
			DebugLocation(141, 4);
			Match("$top="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TOP", 21);
			LeaveRule("TOP", 21);
			LeaveRule_TOP();
		}
	}
	// $ANTLR end "TOP"

	partial void EnterRule_FILTER();
	partial void LeaveRule_FILTER();

	// $ANTLR start "FILTER"
	[GrammarRule("FILTER")]
	private void mFILTER()
	{
		EnterRule_FILTER();
		EnterRule("FILTER", 22);
		TraceIn("FILTER", 22);
		try
		{
			int _type = FILTER;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:144:2: ( '$filter=' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:144:4: '$filter='
			{
			DebugLocation(144, 4);
			Match("$filter="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FILTER", 22);
			LeaveRule("FILTER", 22);
			LeaveRule_FILTER();
		}
	}
	// $ANTLR end "FILTER"

	partial void EnterRule_ORDERBY();
	partial void LeaveRule_ORDERBY();

	// $ANTLR start "ORDERBY"
	[GrammarRule("ORDERBY")]
	private void mORDERBY()
	{
		EnterRule_ORDERBY();
		EnterRule("ORDERBY", 23);
		TraceIn("ORDERBY", 23);
		try
		{
			int _type = ORDERBY;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:147:2: ( '$orderby=' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:147:4: '$orderby='
			{
			DebugLocation(147, 4);
			Match("$orderby="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ORDERBY", 23);
			LeaveRule("ORDERBY", 23);
			LeaveRule_ORDERBY();
		}
	}
	// $ANTLR end "ORDERBY"

	partial void EnterRule_SELECT();
	partial void LeaveRule_SELECT();

	// $ANTLR start "SELECT"
	[GrammarRule("SELECT")]
	private void mSELECT()
	{
		EnterRule_SELECT();
		EnterRule("SELECT", 24);
		TraceIn("SELECT", 24);
		try
		{
			int _type = SELECT;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:150:2: ( '$select=' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:150:4: '$select='
			{
			DebugLocation(150, 4);
			Match("$select="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SELECT", 24);
			LeaveRule("SELECT", 24);
			LeaveRule_SELECT();
		}
	}
	// $ANTLR end "SELECT"

	partial void EnterRule_INLINECOUNT();
	partial void LeaveRule_INLINECOUNT();

	// $ANTLR start "INLINECOUNT"
	[GrammarRule("INLINECOUNT")]
	private void mINLINECOUNT()
	{
		EnterRule_INLINECOUNT();
		EnterRule("INLINECOUNT", 25);
		TraceIn("INLINECOUNT", 25);
		try
		{
			int _type = INLINECOUNT;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:153:2: ( '$inlinecount=' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:153:4: '$inlinecount='
			{
			DebugLocation(153, 4);
			Match("$inlinecount="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INLINECOUNT", 25);
			LeaveRule("INLINECOUNT", 25);
			LeaveRule_INLINECOUNT();
		}
	}
	// $ANTLR end "INLINECOUNT"

	partial void EnterRule_STARTSWITH();
	partial void LeaveRule_STARTSWITH();

	// $ANTLR start "STARTSWITH"
	[GrammarRule("STARTSWITH")]
	private void mSTARTSWITH()
	{
		EnterRule_STARTSWITH();
		EnterRule("STARTSWITH", 26);
		TraceIn("STARTSWITH", 26);
		try
		{
			int _type = STARTSWITH;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:156:2: ( 'startswith' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:156:4: 'startswith'
			{
			DebugLocation(156, 4);
			Match("startswith"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STARTSWITH", 26);
			LeaveRule("STARTSWITH", 26);
			LeaveRule_STARTSWITH();
		}
	}
	// $ANTLR end "STARTSWITH"

	partial void EnterRule_ENDSWITH();
	partial void LeaveRule_ENDSWITH();

	// $ANTLR start "ENDSWITH"
	[GrammarRule("ENDSWITH")]
	private void mENDSWITH()
	{
		EnterRule_ENDSWITH();
		EnterRule("ENDSWITH", 27);
		TraceIn("ENDSWITH", 27);
		try
		{
			int _type = ENDSWITH;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:159:2: ( 'endswith' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:159:4: 'endswith'
			{
			DebugLocation(159, 4);
			Match("endswith"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ENDSWITH", 27);
			LeaveRule("ENDSWITH", 27);
			LeaveRule_ENDSWITH();
		}
	}
	// $ANTLR end "ENDSWITH"

	partial void EnterRule_SUBSTRINGOF();
	partial void LeaveRule_SUBSTRINGOF();

	// $ANTLR start "SUBSTRINGOF"
	[GrammarRule("SUBSTRINGOF")]
	private void mSUBSTRINGOF()
	{
		EnterRule_SUBSTRINGOF();
		EnterRule("SUBSTRINGOF", 28);
		TraceIn("SUBSTRINGOF", 28);
		try
		{
			int _type = SUBSTRINGOF;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:162:2: ( 'substringof' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:162:4: 'substringof'
			{
			DebugLocation(162, 4);
			Match("substringof"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SUBSTRINGOF", 28);
			LeaveRule("SUBSTRINGOF", 28);
			LeaveRule_SUBSTRINGOF();
		}
	}
	// $ANTLR end "SUBSTRINGOF"

	partial void EnterRule_TOLOWER();
	partial void LeaveRule_TOLOWER();

	// $ANTLR start "TOLOWER"
	[GrammarRule("TOLOWER")]
	private void mTOLOWER()
	{
		EnterRule_TOLOWER();
		EnterRule("TOLOWER", 29);
		TraceIn("TOLOWER", 29);
		try
		{
			int _type = TOLOWER;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:165:2: ( 'tolower' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:165:4: 'tolower'
			{
			DebugLocation(165, 4);
			Match("tolower"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TOLOWER", 29);
			LeaveRule("TOLOWER", 29);
			LeaveRule_TOLOWER();
		}
	}
	// $ANTLR end "TOLOWER"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 30);
		TraceIn("INT", 30);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:168:2: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:168:4: ( '0' .. '9' )+
			{
			DebugLocation(168, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:168:4: ( '0' .. '9' )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='0' && LA1_1<='9')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(168, 4);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 30);
			LeaveRule("INT", 30);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_BOOL();
	partial void LeaveRule_BOOL();

	// $ANTLR start "BOOL"
	[GrammarRule("BOOL")]
	private void mBOOL()
	{
		EnterRule_BOOL();
		EnterRule("BOOL", 31);
		TraceIn("BOOL", 31);
		try
		{
			int _type = BOOL;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:170:6: ( ( 'true' | 'false' ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:170:8: ( 'true' | 'false' )
			{
			DebugLocation(170, 8);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:170:8: ( 'true' | 'false' )
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1=='t'))
			{
				alt2 = 1;
			}
			else if ((LA2_1=='f'))
			{
				alt2 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:170:9: 'true'
				{
				DebugLocation(170, 9);
				Match("true"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:170:18: 'false'
				{
				DebugLocation(170, 18);
				Match("false"); 


				}
				break;

			}
			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BOOL", 31);
			LeaveRule("BOOL", 31);
			LeaveRule_BOOL();
		}
	}
	// $ANTLR end "BOOL"

	partial void EnterRule_DATETIME();
	partial void LeaveRule_DATETIME();

	// $ANTLR start "DATETIME"
	[GrammarRule("DATETIME")]
	private void mDATETIME()
	{
		EnterRule_DATETIME();
		EnterRule("DATETIME", 32);
		TraceIn("DATETIME", 32);
		try
		{
			int _type = DATETIME;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:173:2: ( 'datetime\\'' ( '0' .. '9' )+ '-' ( '0' .. '9' )+ ( '-' )+ ( '0' .. '9' )+ 'T' ( '0' .. '9' )+ ':' ( '0' .. '9' )+ ( ':' ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )* )* '\\'' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:173:4: 'datetime\\'' ( '0' .. '9' )+ '-' ( '0' .. '9' )+ ( '-' )+ ( '0' .. '9' )+ 'T' ( '0' .. '9' )+ ':' ( '0' .. '9' )+ ( ':' ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )* )* '\\''
			{
			DebugLocation(173, 4);
			Match("datetime'"); 

			DebugLocation(173, 17);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:173:17: ( '0' .. '9' )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if (((LA3_1>='0' && LA3_1<='9')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(173, 17);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(173, 27);
			Match('-'); 
			DebugLocation(173, 31);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:173:31: ( '0' .. '9' )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if (((LA4_1>='0' && LA4_1<='9')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(173, 31);
					input.Consume();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(173, 41);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:173:41: ( '-' )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1=='-'))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:173:41: '-'
					{
					DebugLocation(173, 41);
					Match('-'); 

					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(173, 47);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:173:47: ( '0' .. '9' )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if (((LA6_1>='0' && LA6_1<='9')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(173, 47);
					input.Consume();


					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(173, 57);
			Match('T'); 
			DebugLocation(173, 61);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:173:61: ( '0' .. '9' )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if (((LA7_1>='0' && LA7_1<='9')))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(173, 61);
					input.Consume();


					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(173, 71);
			Match(':'); 
			DebugLocation(173, 75);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:173:75: ( '0' .. '9' )+
			int cnt8=0;
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if (((LA8_1>='0' && LA8_1<='9')))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(173, 75);
					input.Consume();


					}
					break;

				default:
					if (cnt8 >= 1)
						goto loop8;

					EarlyExitException eee8 = new EarlyExitException( 8, input );
					DebugRecognitionException(eee8);
					throw eee8;
				}
				cnt8++;
			}
			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(173, 85);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:173:85: ( ':' ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )* )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1==':'))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:173:86: ':' ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )*
					{
					DebugLocation(173, 86);
					Match(':'); 
					DebugLocation(173, 90);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:173:90: ( '0' .. '9' )+
					int cnt9=0;
					try { DebugEnterSubRule(9);
					while (true)
					{
						int alt9=2;
						try { DebugEnterDecision(9, false);
						int LA9_1 = input.LA(1);

						if (((LA9_1>='0' && LA9_1<='9')))
						{
							alt9 = 1;
						}


						} finally { DebugExitDecision(9); }
						switch (alt9)
						{
						case 1:
							DebugEnterAlt(1);
							// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
							{
							DebugLocation(173, 90);
							input.Consume();


							}
							break;

						default:
							if (cnt9 >= 1)
								goto loop9;

							EarlyExitException eee9 = new EarlyExitException( 9, input );
							DebugRecognitionException(eee9);
							throw eee9;
						}
						cnt9++;
					}
					loop9:
						;

					} finally { DebugExitSubRule(9); }

					DebugLocation(173, 100);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:173:100: ( '.' ( '0' .. '9' )+ )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_1 = input.LA(1);

						if ((LA11_1=='.'))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:173:101: '.' ( '0' .. '9' )+
							{
							DebugLocation(173, 101);
							Match('.'); 
							DebugLocation(173, 105);
							// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:173:105: ( '0' .. '9' )+
							int cnt10=0;
							try { DebugEnterSubRule(10);
							while (true)
							{
								int alt10=2;
								try { DebugEnterDecision(10, false);
								int LA10_1 = input.LA(1);

								if (((LA10_1>='0' && LA10_1<='9')))
								{
									alt10 = 1;
								}


								} finally { DebugExitDecision(10); }
								switch (alt10)
								{
								case 1:
									DebugEnterAlt(1);
									// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
									{
									DebugLocation(173, 105);
									input.Consume();


									}
									break;

								default:
									if (cnt10 >= 1)
										goto loop10;

									EarlyExitException eee10 = new EarlyExitException( 10, input );
									DebugRecognitionException(eee10);
									throw eee10;
								}
								cnt10++;
							}
							loop10:
								;

							} finally { DebugExitSubRule(10); }


							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }


					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(173, 119);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DATETIME", 32);
			LeaveRule("DATETIME", 32);
			LeaveRule_DATETIME();
		}
	}
	// $ANTLR end "DATETIME"

	partial void EnterRule_SPACE();
	partial void LeaveRule_SPACE();

	// $ANTLR start "SPACE"
	[GrammarRule("SPACE")]
	private void mSPACE()
	{
		EnterRule_SPACE();
		EnterRule("SPACE", 33);
		TraceIn("SPACE", 33);
		try
		{
			int _type = SPACE;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:176:2: ( ( ' ' | '\\t' )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:176:4: ( ' ' | '\\t' )+
			{
			DebugLocation(176, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:176:4: ( ' ' | '\\t' )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if ((LA13_1=='\t'||LA13_1==' '))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(176, 4);
					input.Consume();


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SPACE", 33);
			LeaveRule("SPACE", 33);
			LeaveRule_SPACE();
		}
	}
	// $ANTLR end "SPACE"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 34);
		TraceIn("NEWLINE", 34);
		try
		{
			int _type = NEWLINE;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:179:2: ( ( '\\r' | '\\n' )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:179:4: ( '\\r' | '\\n' )+
			{
			DebugLocation(179, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:179:4: ( '\\r' | '\\n' )+
			int cnt14=0;
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1=='\n'||LA14_1=='\r'))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(179, 4);
					input.Consume();


					}
					break;

				default:
					if (cnt14 >= 1)
						goto loop14;

					EarlyExitException eee14 = new EarlyExitException( 14, input );
					DebugRecognitionException(eee14);
					throw eee14;
				}
				cnt14++;
			}
			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEWLINE", 34);
			LeaveRule("NEWLINE", 34);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	partial void EnterRule_DYNAMICIDENTIFIER();
	partial void LeaveRule_DYNAMICIDENTIFIER();

	// $ANTLR start "DYNAMICIDENTIFIER"
	[GrammarRule("DYNAMICIDENTIFIER")]
	private void mDYNAMICIDENTIFIER()
	{
		EnterRule_DYNAMICIDENTIFIER();
		EnterRule("DYNAMICIDENTIFIER", 35);
		TraceIn("DYNAMICIDENTIFIER", 35);
		try
		{
			int _type = DYNAMICIDENTIFIER;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:182:2: ( '[' ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )+ ']' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:182:4: '[' ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )+ ']'
			{
			DebugLocation(182, 4);
			Match('['); 
			DebugLocation(182, 8);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:182:8: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )+
			int cnt15=0;
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if (((LA15_1>='0' && LA15_1<='9')||(LA15_1>='A' && LA15_1<='Z')||LA15_1=='_'||(LA15_1>='a' && LA15_1<='z')))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(182, 8);
					input.Consume();


					}
					break;

				default:
					if (cnt15 >= 1)
						goto loop15;

					EarlyExitException eee15 = new EarlyExitException( 15, input );
					DebugRecognitionException(eee15);
					throw eee15;
				}
				cnt15++;
			}
			loop15:
				;

			} finally { DebugExitSubRule(15); }

			DebugLocation(182, 42);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DYNAMICIDENTIFIER", 35);
			LeaveRule("DYNAMICIDENTIFIER", 35);
			LeaveRule_DYNAMICIDENTIFIER();
		}
	}
	// $ANTLR end "DYNAMICIDENTIFIER"

	partial void EnterRule_IDENTIFIER();
	partial void LeaveRule_IDENTIFIER();

	// $ANTLR start "IDENTIFIER"
	[GrammarRule("IDENTIFIER")]
	private void mIDENTIFIER()
	{
		EnterRule_IDENTIFIER();
		EnterRule("IDENTIFIER", 36);
		TraceIn("IDENTIFIER", 36);
		try
		{
			int _type = IDENTIFIER;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:185:2: ( ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:185:4: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )+
			{
			DebugLocation(185, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:185:4: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if (((LA16_1>='0' && LA16_1<='9')||(LA16_1>='A' && LA16_1<='Z')||LA16_1=='_'||(LA16_1>='a' && LA16_1<='z')))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
					{
					DebugLocation(185, 4);
					input.Consume();


					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENTIFIER", 36);
			LeaveRule("IDENTIFIER", 36);
			LeaveRule_IDENTIFIER();
		}
	}
	// $ANTLR end "IDENTIFIER"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 37);
		TraceIn("STRING", 37);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:188:6: ( '\\'' ( ESC_SEQ |~ ( '\\\\' | '\\'' ) )* '\\'' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:188:8: '\\'' ( ESC_SEQ |~ ( '\\\\' | '\\'' ) )* '\\''
			{
			DebugLocation(188, 8);
			Match('\''); 
			DebugLocation(188, 13);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:188:13: ( ESC_SEQ |~ ( '\\\\' | '\\'' ) )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=3;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1=='\''))
				{
					int LA17_2 = input.LA(2);

					if ((LA17_2=='\''))
					{
						alt17 = 1;
					}


				}
				else if ((LA17_1=='\\'))
				{
					alt17 = 1;
				}
				else if (((LA17_1>='\u0000' && LA17_1<='&')||(LA17_1>='(' && LA17_1<='[')||(LA17_1>=']' && LA17_1<='\uFFFF')))
				{
					alt17 = 2;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:188:14: ESC_SEQ
					{
					DebugLocation(188, 14);
					mESC_SEQ(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:188:23: ~ ( '\\\\' | '\\'' )
					{
					DebugLocation(188, 23);
					input.Consume();


					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }

			DebugLocation(188, 38);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 37);
			LeaveRule("STRING", 37);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	private void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 38);
		TraceIn("HEX_DIGIT", 38);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:192:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
			{
			DebugLocation(192, 11);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HEX_DIGIT", 38);
			LeaveRule("HEX_DIGIT", 38);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 39);
		TraceIn("ESC_SEQ", 39);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:196:4: ( '\\'\\'' | '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
			int alt18=4;
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1=='\''))
			{
				alt18 = 1;
			}
			else if ((LA18_1=='\\'))
			{
				switch (input.LA(2))
				{
				case '\"':
				case '\'':
				case '\\':
				case 'b':
				case 'f':
				case 'n':
				case 'r':
				case 't':
					{
					alt18 = 2;
					}
					break;
				case 'u':
					{
					alt18 = 3;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
					{
					alt18 = 4;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 18, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:196:6: '\\'\\''
				{
				DebugLocation(196, 6);
				Match("''"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:197:8: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(197, 8);
				Match('\\'); 
				DebugLocation(197, 13);
				input.Consume();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:198:8: UNICODE_ESC
				{
				DebugLocation(198, 8);
				mUNICODE_ESC(); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:199:8: OCTAL_ESC
				{
				DebugLocation(199, 8);
				mOCTAL_ESC(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("ESC_SEQ", 39);
			LeaveRule("ESC_SEQ", 39);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	partial void EnterRule_OCTAL_ESC();
	partial void LeaveRule_OCTAL_ESC();

	// $ANTLR start "OCTAL_ESC"
	[GrammarRule("OCTAL_ESC")]
	private void mOCTAL_ESC()
	{
		EnterRule_OCTAL_ESC();
		EnterRule("OCTAL_ESC", 40);
		TraceIn("OCTAL_ESC", 40);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:204:6: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
			int alt19=3;
			try { DebugEnterDecision(19, false);
			int LA19_1 = input.LA(1);

			if ((LA19_1=='\\'))
			{
				int LA19_2 = input.LA(2);

				if (((LA19_2>='0' && LA19_2<='3')))
				{
					int LA19_3 = input.LA(3);

					if (((LA19_3>='0' && LA19_3<='7')))
					{
						int LA19_4 = input.LA(4);

						if (((LA19_4>='0' && LA19_4<='7')))
						{
							alt19 = 1;
						}
						else
						{
							alt19 = 2;
						}
					}
					else
					{
						alt19 = 3;
					}
				}
				else if (((LA19_2>='4' && LA19_2<='7')))
				{
					int LA19_3 = input.LA(3);

					if (((LA19_3>='0' && LA19_3<='7')))
					{
						alt19 = 2;
					}
					else
					{
						alt19 = 3;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:204:10: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(204, 10);
				Match('\\'); 
				DebugLocation(204, 15);
				input.Consume();

				DebugLocation(204, 26);
				input.Consume();

				DebugLocation(204, 37);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:205:10: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(205, 10);
				Match('\\'); 
				DebugLocation(205, 15);
				input.Consume();

				DebugLocation(205, 26);
				input.Consume();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:206:10: '\\\\' ( '0' .. '7' )
				{
				DebugLocation(206, 10);
				Match('\\'); 
				DebugLocation(206, 15);
				input.Consume();


				}
				break;

			}
		}
		finally
		{
			TraceOut("OCTAL_ESC", 40);
			LeaveRule("OCTAL_ESC", 40);
			LeaveRule_OCTAL_ESC();
		}
	}
	// $ANTLR end "OCTAL_ESC"

	partial void EnterRule_UNICODE_ESC();
	partial void LeaveRule_UNICODE_ESC();

	// $ANTLR start "UNICODE_ESC"
	[GrammarRule("UNICODE_ESC")]
	private void mUNICODE_ESC()
	{
		EnterRule_UNICODE_ESC();
		EnterRule("UNICODE_ESC", 41);
		TraceIn("UNICODE_ESC", 41);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:211:6: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:211:10: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
			{
			DebugLocation(211, 10);
			Match('\\'); 
			DebugLocation(211, 15);
			Match('u'); 
			DebugLocation(211, 19);
			mHEX_DIGIT(); 
			DebugLocation(211, 29);
			mHEX_DIGIT(); 
			DebugLocation(211, 39);
			mHEX_DIGIT(); 
			DebugLocation(211, 49);
			mHEX_DIGIT(); 

			}

		}
		finally
		{
			TraceOut("UNICODE_ESC", 41);
			LeaveRule("UNICODE_ESC", 41);
			LeaveRule_UNICODE_ESC();
		}
	}
	// $ANTLR end "UNICODE_ESC"

	public override void mTokens()
	{
		// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:8: ( T__40 | T__41 | T__42 | T__43 | T__44 | ASSIGN | EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL | NOT | OR | AND | ASC | DESC | ALLPAGES | NONE | SKIP | TOP | FILTER | ORDERBY | SELECT | INLINECOUNT | STARTSWITH | ENDSWITH | SUBSTRINGOF | TOLOWER | INT | BOOL | DATETIME | SPACE | NEWLINE | DYNAMICIDENTIFIER | IDENTIFIER | STRING )
		int alt20=37;
		try { DebugEnterDecision(20, false);
		try
		{
			alt20 = dfa20.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(20); }
		switch (alt20)
		{
		case 1:
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:10: T__40
			{
			DebugLocation(1, 10);
			mT__40(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:16: T__41
			{
			DebugLocation(1, 16);
			mT__41(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:22: T__42
			{
			DebugLocation(1, 22);
			mT__42(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:28: T__43
			{
			DebugLocation(1, 28);
			mT__43(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:34: T__44
			{
			DebugLocation(1, 34);
			mT__44(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:40: ASSIGN
			{
			DebugLocation(1, 40);
			mASSIGN(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:47: EQUALS
			{
			DebugLocation(1, 47);
			mEQUALS(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:54: NOTEQUALS
			{
			DebugLocation(1, 54);
			mNOTEQUALS(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:64: GREATERTHAN
			{
			DebugLocation(1, 64);
			mGREATERTHAN(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:76: GREATERTHANOREQUAL
			{
			DebugLocation(1, 76);
			mGREATERTHANOREQUAL(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:95: LESSTHAN
			{
			DebugLocation(1, 95);
			mLESSTHAN(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:104: LESSTHANOREQUAL
			{
			DebugLocation(1, 104);
			mLESSTHANOREQUAL(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:120: NOT
			{
			DebugLocation(1, 120);
			mNOT(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:124: OR
			{
			DebugLocation(1, 124);
			mOR(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:127: AND
			{
			DebugLocation(1, 127);
			mAND(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:131: ASC
			{
			DebugLocation(1, 131);
			mASC(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:135: DESC
			{
			DebugLocation(1, 135);
			mDESC(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:140: ALLPAGES
			{
			DebugLocation(1, 140);
			mALLPAGES(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:149: NONE
			{
			DebugLocation(1, 149);
			mNONE(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:154: SKIP
			{
			DebugLocation(1, 154);
			mSKIP(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:159: TOP
			{
			DebugLocation(1, 159);
			mTOP(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:163: FILTER
			{
			DebugLocation(1, 163);
			mFILTER(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:170: ORDERBY
			{
			DebugLocation(1, 170);
			mORDERBY(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:178: SELECT
			{
			DebugLocation(1, 178);
			mSELECT(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:185: INLINECOUNT
			{
			DebugLocation(1, 185);
			mINLINECOUNT(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:197: STARTSWITH
			{
			DebugLocation(1, 197);
			mSTARTSWITH(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:208: ENDSWITH
			{
			DebugLocation(1, 208);
			mENDSWITH(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:217: SUBSTRINGOF
			{
			DebugLocation(1, 217);
			mSUBSTRINGOF(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:229: TOLOWER
			{
			DebugLocation(1, 229);
			mTOLOWER(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:237: INT
			{
			DebugLocation(1, 237);
			mINT(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:241: BOOL
			{
			DebugLocation(1, 241);
			mBOOL(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:246: DATETIME
			{
			DebugLocation(1, 246);
			mDATETIME(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:255: SPACE
			{
			DebugLocation(1, 255);
			mSPACE(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:261: NEWLINE
			{
			DebugLocation(1, 261);
			mNEWLINE(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:269: DYNAMICIDENTIFIER
			{
			DebugLocation(1, 269);
			mDYNAMICIDENTIFIER(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:287: IDENTIFIER
			{
			DebugLocation(1, 287);
			mIDENTIFIER(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:1:298: STRING
			{
			DebugLocation(1, 298);
			mSTRING(); 

			}
			break;

		}

	}


	#region DFA
	DFA20 dfa20;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa20 = new DFA20(this);
	}

	private class DFA20 : DFA
	{
		private const string DFA20_eotS =
			"\x7\xFFFF\x7\x16\x1\xFFFF\x2\x16\x1\x2F\x1\x16\x5\xFFFF\x1\x31\x1\x16"+
			"\x1\x33\x1\x16\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A\x5\x16\x5\xFFFF\x4"+
			"\x16\x1\xFFFF\x1\x16\x1\xFFFF\x1\x16\x1\xFFFF\x1\x48\x1\x16\x5\xFFFF"+
			"\x1\x4A\x1\x4B\x3\x16\x2\xFFFF\x6\x16\x1\xFFFF\x1\x55\x2\xFFFF\x1\x16"+
			"\x1\x57\x4\x16\x1\x5C\x2\x16\x1\xFFFF\x1\x16\x1\xFFFF\x4\x16\x1\xFFFF"+
			"\x1\x5C\xB\x16\x1\x6F\x1\x70\x1\x71\x3\x16\x4\xFFFF\x2\x16\x1\x77\x1"+
			"\x16\x1\xFFFF\x1\x79\x1\xFFFF";
		private const string DFA20_eofS =
			"\x7A\xFFFF";
		private const string DFA20_minS =
			"\x1\x9\x6\xFFFF\x1\x6E\x3\x65\x1\x72\x1\x6C\x1\x61\x1\x66\x1\x74\x1\x6F"+
			"\x1\x30\x1\x61\x5\xFFFF\x1\x30\x1\x64\x1\x30\x1\x6E\x5\x30\x1\x64\x1"+
			"\x63\x1\x6C\x1\x73\x1\x74\x1\x65\x4\xFFFF\x1\x61\x1\x62\x1\x6C\x1\x75"+
			"\x1\xFFFF\x1\x6C\x1\xFFFF\x1\x73\x1\xFFFF\x1\x30\x1\x65\x5\xFFFF\x2\x30"+
			"\x1\x70\x1\x63\x1\x65\x2\xFFFF\x1\x72\x1\x73\x1\x6F\x1\x65\x1\x73\x1"+
			"\x77\x1\xFFFF\x1\x30\x2\xFFFF\x1\x61\x1\x30\x3\x74\x1\x77\x1\x30\x1\x65"+
			"\x1\x69\x1\xFFFF\x1\x67\x1\xFFFF\x1\x69\x1\x73\x1\x72\x1\x65\x1\xFFFF"+
			"\x1\x30\x1\x74\x1\x65\x1\x6D\x1\x77\x1\x69\x1\x72\x1\x68\x1\x73\x1\x65"+
			"\x1\x69\x1\x6E\x3\x30\x1\x27\x1\x74\x1\x67\x4\xFFFF\x1\x68\x1\x6F\x1"+
			"\x30\x1\x66\x1\xFFFF\x1\x30\x1\xFFFF";
		private const string DFA20_maxS =
			"\x1\x7A\x6\xFFFF\x1\x71\x1\x6F\x2\x74\x1\x72\x1\x73\x1\x65\x1\x74\x1"+
			"\x75\x1\x72\x1\x7A\x1\x61\x5\xFFFF\x1\x7A\x1\x64\x1\x7A\x1\x74\x5\x7A"+
			"\x1\x64\x1\x63\x1\x6C\x1\x73\x1\x74\x1\x6B\x4\xFFFF\x1\x61\x1\x62\x1"+
			"\x6C\x1\x75\x1\xFFFF\x1\x6C\x1\xFFFF\x1\x73\x1\xFFFF\x1\x7A\x1\x65\x5"+
			"\xFFFF\x2\x7A\x1\x70\x1\x63\x1\x65\x2\xFFFF\x1\x72\x1\x73\x1\x6F\x1\x65"+
			"\x1\x73\x1\x77\x1\xFFFF\x1\x7A\x2\xFFFF\x1\x61\x1\x7A\x3\x74\x1\x77\x1"+
			"\x7A\x1\x65\x1\x69\x1\xFFFF\x1\x67\x1\xFFFF\x1\x69\x1\x73\x1\x72\x1\x65"+
			"\x1\xFFFF\x1\x7A\x1\x74\x1\x65\x1\x6D\x1\x77\x1\x69\x1\x72\x1\x68\x1"+
			"\x73\x1\x65\x1\x69\x1\x6E\x3\x7A\x1\x27\x1\x74\x1\x67\x4\xFFFF\x1\x68"+
			"\x1\x6F\x1\x7A\x1\x66\x1\xFFFF\x1\x7A\x1\xFFFF";
		private const string DFA20_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\xC\xFFFF\x1\x21\x1\x22"+
			"\x1\x23\x1\x24\x1\x25\xF\xFFFF\x1\x15\x1\x16\x1\x17\x1\x19\x4\xFFFF\x1"+
			"\x1E\x1\xFFFF\x1\x7\x1\xFFFF\x1\x8\x2\xFFFF\x1\x9\x1\xA\x1\xB\x1\xC\x1"+
			"\xE\x5\xFFFF\x1\x14\x1\x18\x6\xFFFF\x1\xD\x1\xFFFF\x1\xF\x1\x10\x9\xFFFF"+
			"\x1\x13\x1\xFFFF\x1\x11\x4\xFFFF\x1\x1F\x12\xFFFF\x1\x1D\x1\x1B\x1\x12"+
			"\x1\x20\x4\xFFFF\x1\x1A\x1\xFFFF\x1\x1C";
		private const string DFA20_specialS =
			"\x7A\xFFFF}>";
		private static readonly string[] DFA20_transitionS =
			{
				"\x1\x13\x1\x14\x2\xFFFF\x1\x14\x12\xFFFF\x1\x13\x3\xFFFF\x1\xE\x1\xFFFF"+
				"\x1\x1\x1\x17\x1\x2\x1\x3\x2\xFFFF\x1\x4\x2\xFFFF\x1\x5\xA\x11\x3\xFFFF"+
				"\x1\x6\x3\xFFFF\x1A\x16\x1\x15\x3\xFFFF\x1\x16\x1\xFFFF\x1\xC\x2\x16"+
				"\x1\xD\x1\x7\x1\x12\x1\x9\x4\x16\x1\xA\x1\x16\x1\x8\x1\xB\x3\x16\x1"+
				"\xF\x1\x10\x6\x16",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x19\x2\xFFFF\x1\x18",
				"\x1\x1A\x9\xFFFF\x1\x1B",
				"\x1\x1D\xE\xFFFF\x1\x1C",
				"\x1\x1F\xE\xFFFF\x1\x1E",
				"\x1\x20",
				"\x1\x23\x1\xFFFF\x1\x21\x4\xFFFF\x1\x22",
				"\x1\x25\x3\xFFFF\x1\x24",
				"\x1\x28\x2\xFFFF\x1\x2A\x5\xFFFF\x1\x29\x3\xFFFF\x1\x26\x1\x27",
				"\x1\x2B\x1\x2C",
				"\x1\x2D\x2\xFFFF\x1\x2E",
				"\xA\x11\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x30",
				"",
				"",
				"",
				"",
				"",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x32",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x35\x5\xFFFF\x1\x34",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x3B",
				"\x1\x3C",
				"\x1\x3D",
				"\x1\x3E",
				"\x1\x3F",
				"\x1\x41\x5\xFFFF\x1\x40",
				"",
				"",
				"",
				"",
				"\x1\x42",
				"\x1\x43",
				"\x1\x44",
				"\x1\x45",
				"",
				"\x1\x46",
				"",
				"\x1\x47",
				"",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x49",
				"",
				"",
				"",
				"",
				"",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x4C",
				"\x1\x4D",
				"\x1\x4E",
				"",
				"",
				"\x1\x4F",
				"\x1\x50",
				"\x1\x51",
				"\x1\x52",
				"\x1\x53",
				"\x1\x54",
				"",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"",
				"",
				"\x1\x56",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x58",
				"\x1\x59",
				"\x1\x5A",
				"\x1\x5B",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x5D",
				"\x1\x5E",
				"",
				"\x1\x5F",
				"",
				"\x1\x60",
				"\x1\x61",
				"\x1\x62",
				"\x1\x63",
				"",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x64",
				"\x1\x65",
				"\x1\x66",
				"\x1\x67",
				"\x1\x68",
				"\x1\x69",
				"\x1\x6A",
				"\x1\x6B",
				"\x1\x6C",
				"\x1\x6D",
				"\x1\x6E",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x72",
				"\x1\x73",
				"\x1\x74",
				"",
				"",
				"",
				"",
				"\x1\x75",
				"\x1\x76",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				"\x1\x78",
				"",
				"\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A\x16",
				""
			};

		private static readonly short[] DFA20_eot = DFA.UnpackEncodedString(DFA20_eotS);
		private static readonly short[] DFA20_eof = DFA.UnpackEncodedString(DFA20_eofS);
		private static readonly char[] DFA20_min = DFA.UnpackEncodedStringToUnsignedChars(DFA20_minS);
		private static readonly char[] DFA20_max = DFA.UnpackEncodedStringToUnsignedChars(DFA20_maxS);
		private static readonly short[] DFA20_accept = DFA.UnpackEncodedString(DFA20_acceptS);
		private static readonly short[] DFA20_special = DFA.UnpackEncodedString(DFA20_specialS);
		private static readonly short[][] DFA20_transition;

		static DFA20()
		{
			int numStates = DFA20_transitionS.Length;
			DFA20_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA20_transition[i] = DFA.UnpackEncodedString(DFA20_transitionS[i]);
			}
		}

		public DFA20( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 20;
			this.eot = DFA20_eot;
			this.eof = DFA20_eof;
			this.min = DFA20_min;
			this.max = DFA20_max;
			this.accept = DFA20_accept;
			this.special = DFA20_special;
			this.transition = DFA20_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__40 | T__41 | T__42 | T__43 | T__44 | ASSIGN | EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL | NOT | OR | AND | ASC | DESC | ALLPAGES | NONE | SKIP | TOP | FILTER | ORDERBY | SELECT | INLINECOUNT | STARTSWITH | ENDSWITH | SUBSTRINGOF | TOLOWER | INT | BOOL | DATETIME | SPACE | NEWLINE | DYNAMICIDENTIFIER | IDENTIFIER | STRING );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  LinqToQuerystring 
